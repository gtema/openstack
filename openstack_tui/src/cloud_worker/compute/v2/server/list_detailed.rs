// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use openstack_sdk::api::compute::v2::server::list_detailed::RequestBuilder;
use openstack_sdk::api::{Pagination, paged};
use openstack_sdk::{AsyncOpenStack, api::QueryAsync};

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct ComputeServerList {
    #[builder(default)]
    pub access_ip_v4: Option<String>,
    #[builder(default)]
    pub access_ip_v6: Option<String>,
    #[builder(default)]
    pub all_tenants: Option<String>,
    #[builder(default)]
    pub auto_disk_config: Option<String>,
    #[builder(default)]
    pub availability_zone: Option<String>,
    #[builder(default)]
    pub block_device_mapping: Option<String>,
    #[builder(default)]
    pub changes_before: Option<String>,
    #[builder(default)]
    pub changes_since: Option<String>,
    #[builder(default)]
    pub config_drive: Option<String>,
    #[builder(default)]
    pub created_at: Option<String>,
    #[builder(default)]
    pub deleted: Option<String>,
    #[builder(default)]
    pub description: Option<String>,
    #[builder(default)]
    pub display_description: Option<String>,
    #[builder(default)]
    pub display_name: Option<String>,
    #[builder(default)]
    pub flavor: Option<String>,
    #[builder(default)]
    pub host: Option<String>,
    #[builder(default)]
    pub hostname: Option<String>,
    #[builder(default)]
    pub image: Option<String>,
    #[builder(default)]
    pub image_ref: Option<String>,
    #[builder(default)]
    pub info_cache: Option<String>,
    #[builder(default)]
    pub ip: Option<String>,
    #[builder(default)]
    pub ip6: Option<String>,
    #[builder(default)]
    pub kernel_id: Option<String>,
    #[builder(default)]
    pub kernel_name: Option<String>,
    #[builder(default)]
    pub key_name: Option<String>,
    #[builder(default)]
    pub launch_index: Option<String>,
    #[builder(default)]
    pub launched_at: Option<String>,
    #[builder(default)]
    pub limit: Option<u32>,
    #[builder(default)]
    pub locked: Option<String>,
    #[builder(default)]
    pub locked_by: Option<String>,
    #[builder(default)]
    pub marker: Option<String>,
    #[builder(default)]
    pub metadata: Option<String>,
    #[builder(default)]
    pub name: Option<String>,
    #[builder(default)]
    pub node: Option<String>,
    #[builder(default)]
    pub not_tags: Option<String>,
    #[builder(default)]
    pub not_tags_any: Option<String>,
    #[builder(default)]
    pub pci_devices: Option<String>,
    #[builder(default)]
    pub power_state: Option<String>,
    #[builder(default)]
    pub progress: Option<String>,
    #[builder(default)]
    pub project_id: Option<String>,
    #[builder(default)]
    pub project_name: Option<String>,
    #[builder(default)]
    pub ramdisk_id: Option<String>,
    #[builder(default)]
    pub ramdisk_name: Option<String>,
    #[builder(default)]
    pub reservation_id: Option<String>,
    #[builder(default)]
    pub reservation_name: Option<String>,
    #[builder(default)]
    pub root_device_name: Option<String>,
    #[builder(default)]
    pub security_groups: Option<String>,
    #[builder(default)]
    pub services: Option<String>,
    #[builder(default)]
    pub soft_deleted: Option<String>,
    #[builder(default)]
    pub sort_dir: Option<String>,
    #[builder(default)]
    pub sort_key: Option<String>,
    #[builder(default)]
    pub status: Option<String>,
    #[builder(default)]
    pub system_metadata: Option<String>,
    #[builder(default)]
    pub tags: Option<String>,
    #[builder(default)]
    pub tags_any: Option<String>,
    #[builder(default)]
    pub task_state: Option<String>,
    #[builder(default)]
    pub tenant_id: Option<String>,
    #[builder(default)]
    pub tenant_name: Option<String>,
    #[builder(default)]
    pub terminated_at: Option<String>,
    #[builder(default)]
    pub user_id: Option<String>,
    #[builder(default)]
    pub user_name: Option<String>,
    #[builder(default)]
    pub uuid: Option<String>,
    #[builder(default)]
    pub vm_state: Option<String>,
}

impl fmt::Display for ComputeServerList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        if self.kernel_id.is_some() || self.kernel_name.is_some() {
            parts.push(format!(
                "kernel: {}",
                self.kernel_name
                    .as_ref()
                    .or(self.kernel_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.project_id.is_some() || self.project_name.is_some() {
            parts.push(format!(
                "project: {}",
                self.project_name
                    .as_ref()
                    .or(self.project_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.ramdisk_id.is_some() || self.ramdisk_name.is_some() {
            parts.push(format!(
                "ramdisk: {}",
                self.ramdisk_name
                    .as_ref()
                    .or(self.ramdisk_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.reservation_id.is_some() || self.reservation_name.is_some() {
            parts.push(format!(
                "reservation: {}",
                self.reservation_name
                    .as_ref()
                    .or(self.reservation_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.tenant_id.is_some() || self.tenant_name.is_some() {
            parts.push(format!(
                "tenant: {}",
                self.tenant_name
                    .as_ref()
                    .or(self.tenant_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.user_id.is_some() || self.user_name.is_some() {
            parts.push(format!(
                "user: {}",
                self.user_name
                    .as_ref()
                    .or(self.user_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&ComputeServerList> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &ComputeServerList) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.access_ip_v4 {
            ep_builder.access_ip_v4(val.clone());
        }
        if let Some(val) = &value.access_ip_v6 {
            ep_builder.access_ip_v6(val.clone());
        }
        if let Some(val) = &value.all_tenants {
            ep_builder.all_tenants(val.clone());
        }
        if let Some(val) = &value.auto_disk_config {
            ep_builder.auto_disk_config(val.clone());
        }
        if let Some(val) = &value.availability_zone {
            ep_builder.availability_zone(val.clone());
        }
        if let Some(val) = &value.block_device_mapping {
            ep_builder.block_device_mapping(val.clone());
        }
        if let Some(val) = &value.changes_before {
            ep_builder.changes_before(val.clone());
        }
        if let Some(val) = &value.changes_since {
            ep_builder.changes_since(val.clone());
        }
        if let Some(val) = &value.config_drive {
            ep_builder.config_drive(val.clone());
        }
        if let Some(val) = &value.created_at {
            ep_builder.created_at(val.clone());
        }
        if let Some(val) = &value.deleted {
            ep_builder.deleted(val.clone());
        }
        if let Some(val) = &value.description {
            ep_builder.description(val.clone());
        }
        if let Some(val) = &value.display_description {
            ep_builder.display_description(val.clone());
        }
        if let Some(val) = &value.display_name {
            ep_builder.display_name(val.clone());
        }
        if let Some(val) = &value.flavor {
            ep_builder.flavor(val.clone());
        }
        if let Some(val) = &value.host {
            ep_builder.host(val.clone());
        }
        if let Some(val) = &value.hostname {
            ep_builder.hostname(val.clone());
        }
        if let Some(val) = &value.image {
            ep_builder.image(val.clone());
        }
        if let Some(val) = &value.image_ref {
            ep_builder.image_ref(val.clone());
        }
        if let Some(val) = &value.info_cache {
            ep_builder.info_cache(val.clone());
        }
        if let Some(val) = &value.ip {
            ep_builder.ip(val.clone());
        }
        if let Some(val) = &value.ip6 {
            ep_builder.ip6(val.clone());
        }
        if let Some(val) = &value.kernel_id {
            ep_builder.kernel_id(val.clone());
        }
        if let Some(val) = &value.key_name {
            ep_builder.key_name(val.clone());
        }
        if let Some(val) = &value.launch_index {
            ep_builder.launch_index(val.clone());
        }
        if let Some(val) = &value.launched_at {
            ep_builder.launched_at(val.clone());
        }
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.locked {
            ep_builder.locked(val.clone());
        }
        if let Some(val) = &value.locked_by {
            ep_builder.locked_by(val.clone());
        }
        if let Some(val) = &value.marker {
            ep_builder.marker(val.clone());
        }
        if let Some(val) = &value.metadata {
            ep_builder.metadata(val.clone());
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.node {
            ep_builder.node(val.clone());
        }
        if let Some(val) = &value.not_tags {
            ep_builder.not_tags(val.clone());
        }
        if let Some(val) = &value.not_tags_any {
            ep_builder.not_tags_any(val.clone());
        }
        if let Some(val) = &value.pci_devices {
            ep_builder.pci_devices(val.clone());
        }
        if let Some(val) = &value.power_state {
            ep_builder.power_state(val.clone());
        }
        if let Some(val) = &value.progress {
            ep_builder.progress(val.clone());
        }
        if let Some(val) = &value.project_id {
            ep_builder.project_id(val.clone());
        }
        if let Some(val) = &value.ramdisk_id {
            ep_builder.ramdisk_id(val.clone());
        }
        if let Some(val) = &value.reservation_id {
            ep_builder.reservation_id(val.clone());
        }
        if let Some(val) = &value.root_device_name {
            ep_builder.root_device_name(val.clone());
        }
        if let Some(val) = &value.security_groups {
            ep_builder.security_groups(val.clone());
        }
        if let Some(val) = &value.services {
            ep_builder.services(val.clone());
        }
        if let Some(val) = &value.soft_deleted {
            ep_builder.soft_deleted(val.clone());
        }
        if let Some(val) = &value.sort_dir {
            ep_builder.sort_dir(val.clone());
        }
        if let Some(val) = &value.sort_key {
            ep_builder.sort_key(val.clone());
        }
        if let Some(val) = &value.status {
            ep_builder.status(val.clone());
        }
        if let Some(val) = &value.system_metadata {
            ep_builder.system_metadata(val.clone());
        }
        if let Some(val) = &value.tags {
            ep_builder.tags(val.clone());
        }
        if let Some(val) = &value.tags_any {
            ep_builder.tags_any(val.clone());
        }
        if let Some(val) = &value.task_state {
            ep_builder.task_state(val.clone());
        }
        if let Some(val) = &value.tenant_id {
            ep_builder.tenant_id(val.clone());
        }
        if let Some(val) = &value.terminated_at {
            ep_builder.terminated_at(val.clone());
        }
        if let Some(val) = &value.user_id {
            ep_builder.user_id(val.clone());
        }
        if let Some(val) = &value.uuid {
            ep_builder.uuid(val.clone());
        }
        if let Some(val) = &value.vm_state {
            ep_builder.vm_state(val.clone());
        }

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for ComputeServerList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use crate::utils::OutputConfig;
use crate::utils::StructTable;
use openstack_sdk::api::compute::v2::hypervisor::list_detailed::RequestBuilder;
use openstack_sdk::api::{Pagination, paged};
use openstack_sdk::{AsyncOpenStack, api::QueryAsync};
use serde_json::Value;
use structable_derive::StructTable;

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct ComputeHypervisorList {
    #[builder(default)]
    pub hypervisor_hostname_pattern: Option<String>,
    #[builder(default)]
    pub limit: Option<i32>,
    #[builder(default)]
    pub marker: Option<String>,
    #[builder(default)]
    pub with_servers: Option<bool>,
}

impl fmt::Display for ComputeHypervisorList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let parts: Vec<String> = Vec::new();
        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&ComputeHypervisorList> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &ComputeHypervisorList) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.marker {
            ep_builder.marker(val.clone());
        }
        if let Some(val) = &value.hypervisor_hostname_pattern {
            ep_builder.hypervisor_hostname_pattern(val.clone());
        }
        if let Some(val) = &value.with_servers {
            ep_builder.with_servers(*val);
        }

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for ComputeHypervisorList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}
/// ComputeHypervisor response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
pub struct ComputeHypervisor {
    /// A dictionary that contains cpu information like `arch`, `model`,
    /// `vendor`, `features` and `topology`. The content of this field is
    /// hypervisor specific.
    ///
    /// Note
    ///
    /// Since version 2.28 `cpu_info` field is returned as a dictionary instead
    /// of string.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "CPU_INFO", wide)]
    pub cpu_info: Option<Value>,

    /// The current_workload is the number of tasks the hypervisor is
    /// responsible for. This will be equal or greater than the number of
    /// active VMs on the system (it can be greater when VMs are being deleted
    /// and the hypervisor is still cleaning up).
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "CURRENT_WORKLOAD", wide)]
    pub current_workload: Option<i32>,

    /// The actual free disk on this hypervisor(in GiB). If allocation ratios
    /// used for overcommit are configured, this may be negative. This is
    /// intentional as it provides insight into the amount by which the disk is
    /// overcommitted.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "DISK_AVAILABLE_LEAST", wide)]
    pub disk_available_least: Option<i32>,

    /// The free disk remaining on this hypervisor(in GiB). This does not take
    /// allocation ratios used for overcommit into account so this value may be
    /// negative.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "FREE_DISK_GB", wide)]
    pub free_disk_gb: Option<i32>,

    /// The free RAM in this hypervisor(in MiB). This does not take allocation
    /// ratios used for overcommit into account so this value may be negative.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "FREE_RAM_MB", wide)]
    pub free_ram_mb: Option<i32>,

    /// The IP address of the hypervisorâ€™s host.
    ///
    #[serde(default)]
    #[structable(optional, title = "HOST_IP", wide)]
    pub host_ip: Option<String>,

    /// The hypervisor host name provided by the Nova virt driver. For the
    /// Ironic driver, it is the Ironic node uuid.
    ///
    #[serde(default)]
    #[structable(optional, title = "HYPERVISOR_HOSTNAME", wide)]
    pub hypervisor_hostname: Option<String>,

    /// The hypervisor type.
    ///
    #[serde(default)]
    #[structable(optional, title = "HYPERVISOR_TYPE", wide)]
    pub hypervisor_type: Option<String>,

    /// The hypervisor version.
    ///
    #[serde(default)]
    #[structable(optional, title = "HYPERVISOR_VERSION", wide)]
    pub hypervisor_version: Option<i32>,

    /// The id of the hypervisor. From version 2.53 it is a string as UUID
    ///
    #[serde(default)]
    #[structable(optional, title = "ID", wide)]
    pub id: Option<String>,

    /// The disk in this hypervisor (in GiB). This does not take allocation
    /// ratios used for overcommit into account so there may be disparity
    /// between this and the used count.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "LOCAL_GB", wide)]
    pub local_gb: Option<i32>,

    /// The disk used in this hypervisor (in GiB).
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "LOCAL_GB_USED", wide)]
    pub local_gb_used: Option<i32>,

    /// The memory of this hypervisor (in MiB). This does not take allocation
    /// ratios used for overcommit into account so there may be disparity
    /// between this and the used count.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "MEMORY_MB", wide)]
    pub memory_mb: Option<i32>,

    /// The memory used in this hypervisor (in MiB).
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "MEMORY_MB_USED", wide)]
    pub memory_mb_used: Option<i32>,

    /// The number of running VMs on this hypervisor.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "RUNNING_VMS", wide)]
    pub running_vms: Option<i32>,

    /// A list of `server` objects. This field has become mandatory in
    /// microversion 2.75. If no servers is on hypervisor then empty list is
    /// returned.
    ///
    /// **New in version 2.53**
    ///
    #[serde(default)]
    #[structable(optional, title = "SERVERS", wide)]
    pub servers: Option<Value>,

    /// The hypervisor service object.
    ///
    #[serde(default)]
    #[structable(optional, title = "SERVICE", wide)]
    pub service: Option<Value>,

    /// The state of the hypervisor. One of `up` or `down`.
    ///
    #[serde(default)]
    #[structable(optional, title = "STATE")]
    pub state: Option<Value>,

    /// The status of the hypervisor. One of `enabled` or `disabled`.
    ///
    #[serde(default)]
    #[structable(optional, title = "STATUS")]
    pub status: Option<Value>,

    /// The total uptime of the hypervisor and information about average load.
    /// Only reported for active hosts where the virt driver supports this
    /// feature.
    ///
    /// **New in version 2.88**
    ///
    #[serde(default)]
    #[structable(optional, title = "UPTIME", wide)]
    pub uptime: Option<String>,

    /// The number of vCPU in this hypervisor. This does not take allocation
    /// ratios used for overcommit into account so there may be disparity
    /// between this and the used count.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "VCPUS", wide)]
    pub vcpus: Option<i32>,

    /// The number of vCPU used in this hypervisor.
    ///
    /// **Available until version 2.87**
    ///
    #[serde(default)]
    #[structable(optional, title = "VCPUS_USED", wide)]
    pub vcpus_used: Option<i32>,
}

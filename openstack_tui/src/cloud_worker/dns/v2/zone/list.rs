// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use crate::utils::OutputConfig;
use crate::utils::StructTable;
use openstack_sdk::api::dns::v2::zone::list::RequestBuilder;
use openstack_sdk::api::{paged, Pagination};
use openstack_sdk::{api::QueryAsync, AsyncOpenStack};
use serde_json::Value;
use structable_derive::StructTable;

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct DnsZoneList {
    #[builder(default)]
    pub _type: Option<String>,
    #[builder(default)]
    pub description: Option<String>,
    #[builder(default)]
    pub email: Option<String>,
    #[builder(default)]
    pub limit: Option<i32>,
    #[builder(default)]
    pub market: Option<String>,
    #[builder(default)]
    pub name: Option<String>,
    #[builder(default)]
    pub sort_dir: Option<String>,
    #[builder(default)]
    pub sort_key: Option<String>,
    #[builder(default)]
    pub status: Option<String>,
    #[builder(default)]
    pub ttl: Option<i32>,
}

impl fmt::Display for DnsZoneList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let parts: Vec<String> = Vec::new();
        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&DnsZoneList> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &DnsZoneList) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.market {
            ep_builder.market(val.clone());
        }
        if let Some(val) = &value.sort_dir {
            ep_builder.sort_dir(val.clone());
        }
        if let Some(val) = &value.sort_key {
            ep_builder.sort_key(val.clone());
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.description {
            ep_builder.description(val.clone());
        }
        if let Some(val) = &value._type {
            ep_builder._type(val.clone());
        }
        if let Some(val) = &value.email {
            ep_builder.email(val.clone());
        }
        if let Some(val) = &value.status {
            ep_builder.status(val.clone());
        }
        if let Some(val) = &value.ttl {
            ep_builder.ttl(*val);
        }

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for DnsZoneList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}
/// DnsZone response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct DnsZone {
    /// current action in progress on the resource
    ///
    #[serde(default)]
    #[structable(optional, title = "ACTION", wide)]
    action: Option<Value>,

    /// Key:Value pairs of information about this zone, and the pool the user
    /// would like to place the zone in. This information can be used by the
    /// scheduler to place zones on the correct pool.
    ///
    #[serde(default)]
    #[structable(optional, title = "ATTRIBUTES", wide)]
    attributes: Option<Value>,

    /// Date / Time when resource was created.
    ///
    #[serde(default)]
    #[structable(optional, title = "CREATED_AT")]
    created_at: Option<String>,

    /// Description for this zone
    ///
    #[serde(default)]
    #[structable(optional, title = "DESCRIPTION", wide)]
    description: Option<String>,

    /// e-mail for the zone. Used in SOA records for the zone
    ///
    #[serde(default)]
    #[structable(optional, title = "EMAIL", wide)]
    email: Option<String>,

    /// ID for the resource
    ///
    #[serde(default)]
    #[structable(optional, title = "ID", wide)]
    id: Option<String>,

    /// Mandatory for secondary zones. The servers to slave from to get DNS
    /// information
    ///
    #[serde(default)]
    #[structable(optional, title = "MASTERS", wide)]
    masters: Option<Value>,

    /// DNS Name for the zone
    ///
    #[serde(default)]
    #[structable(optional, title = "NAME")]
    name: Option<String>,

    /// ID for the pool hosting this zone
    ///
    #[serde(default)]
    #[structable(optional, title = "POOL_ID", wide)]
    pool_id: Option<String>,

    /// ID for the project that owns the resource
    ///
    #[serde(default)]
    #[structable(optional, title = "PROJECT_ID", wide)]
    project_id: Option<String>,

    /// current serial number for the zone
    ///
    #[serde(default)]
    #[structable(optional, title = "SERIAL", wide)]
    serial: Option<i32>,

    /// True if the zone is shared with another project.
    ///
    /// **New in version 2.1**
    ///
    #[serde(default)]
    #[structable(optional, title = "SHARED", wide)]
    shared: Option<bool>,

    /// The status of the resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "STATUS")]
    status: Option<Value>,

    /// For secondary zones. The last time an update was retrieved from the
    /// master servers
    ///
    #[serde(default)]
    #[structable(optional, title = "TRANSFERRED_AT", wide)]
    transferred_at: Option<String>,

    /// TTL (Time to Live) for the zone.
    ///
    #[serde(default)]
    #[structable(optional, title = "TTL", wide)]
    ttl: Option<i32>,

    /// Type of zone. PRIMARY is controlled by Designate, SECONDARY zones are
    /// slaved from another DNS Server. Defaults to PRIMARY
    ///
    #[serde(default, rename = "type")]
    #[structable(optional, title = "TYPE", wide)]
    _type: Option<Value>,

    /// Date / Time when resource last updated.
    ///
    #[serde(default)]
    #[structable(optional, title = "UPDATED_AT")]
    updated_at: Option<String>,

    /// Version of the resource
    ///
    #[serde(default)]
    #[structable(optional, title = "VERSION", wide)]
    version: Option<i32>,
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use eyre::{Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use openstack_sdk::api::load_balancer::v2::pool::list::RequestBuilder;
use openstack_sdk::api::{paged, Pagination};
use openstack_sdk::{api::QueryAsync, AsyncOpenStack};

#[derive(Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct LoadBalancerPoolList {
    admin_state_up: Option<bool>,
    alpn_protocols: Option<String>,
    created_at: Option<String>,
    description: Option<String>,
    id: Option<String>,
    limit: Option<i32>,
    loadbalancer_id: Option<String>,
    loadbalancer_name: Option<String>,
    marker: Option<String>,
    name: Option<String>,
    not_tags: Option<String>,
    not_tags_any: Option<String>,
    operating_status: Option<String>,
    page_reverse: Option<bool>,
    project_id: Option<String>,
    project_name: Option<String>,
    provisioning_status: Option<String>,
    tags: Option<String>,
    tags_any: Option<String>,
    tls_ciphers: Option<String>,
    tls_enabled: Option<bool>,
    tls_versions: Option<String>,
    updated_at: Option<String>,
}

impl fmt::Display for LoadBalancerPoolList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        if self.loadbalancer_id.is_some() || self.loadbalancer_name.is_some() {
            parts.push(format!(
                "loadbalancer: {}",
                self.loadbalancer_name
                    .as_ref()
                    .or(self.loadbalancer_id.as_ref())
                    .unwrap_or(&String::new())
            ));
        }

        if self.project_id.is_some() || self.project_name.is_some() {
            parts.push(format!(
                "project: {}",
                self.project_name
                    .as_ref()
                    .or(self.project_id.as_ref())
                    .unwrap_or(&String::new())
            ));
        }

        write!(f, "{}", parts.join(","))
    }
}

impl From<&LoadBalancerPoolList> for RequestBuilder<'_> {
    fn from(value: &LoadBalancerPoolList) -> Self {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.admin_state_up {
            ep_builder.admin_state_up(*val);
        }
        if let Some(val) = &value.alpn_protocols {
            ep_builder.alpn_protocols(val.clone());
        }
        if let Some(val) = &value.created_at {
            ep_builder.created_at(val.clone());
        }
        if let Some(val) = &value.description {
            ep_builder.description(val.clone());
        }
        if let Some(val) = &value.id {
            ep_builder.id(val.clone());
        }
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.loadbalancer_id {
            ep_builder.loadbalancer_id(val.clone());
        }
        if let Some(val) = &value.marker {
            ep_builder.marker(val.clone());
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.page_reverse {
            ep_builder.page_reverse(*val);
        }
        if let Some(val) = &value.project_id {
            ep_builder.project_id(val.clone());
        }
        if let Some(val) = &value.tls_enabled {
            ep_builder.tls_enabled(*val);
        }
        if let Some(val) = &value.tls_ciphers {
            ep_builder.tls_ciphers(val.clone());
        }
        if let Some(val) = &value.tls_versions {
            ep_builder.tls_versions(val.clone());
        }
        if let Some(val) = &value.updated_at {
            ep_builder.updated_at(val.clone());
        }
        if let Some(val) = &value.provisioning_status {
            ep_builder.provisioning_status(val.clone());
        }
        if let Some(val) = &value.operating_status {
            ep_builder.operating_status(val.clone());
        }
        if let Some(val) = &value.tags {
            ep_builder.tags(val.clone());
        }
        if let Some(val) = &value.tags_any {
            ep_builder.tags_any(val.clone());
        }
        if let Some(val) = &value.not_tags {
            ep_builder.not_tags(val.clone());
        }
        if let Some(val) = &value.not_tags_any {
            ep_builder.not_tags_any(val.clone());
        }
        ep_builder
    }
}

impl ExecuteApiRequest for LoadBalancerPoolList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = Into::<RequestBuilder>::into(self)
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}

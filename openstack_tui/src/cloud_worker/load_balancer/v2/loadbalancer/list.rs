// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use crate::utils::OutputConfig;
use crate::utils::StructTable;
use openstack_sdk::api::load_balancer::v2::loadbalancer::list::RequestBuilder;
use openstack_sdk::api::{Pagination, paged};
use openstack_sdk::{AsyncOpenStack, api::QueryAsync};
use serde_json::Value;
use structable_derive::StructTable;

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct LoadBalancerLoadbalancerList {
    #[builder(default)]
    pub availability_zone: Option<String>,
    #[builder(default)]
    pub created_at: Option<String>,
    #[builder(default)]
    pub description: Option<String>,
    #[builder(default)]
    pub flavor_id: Option<String>,
    #[builder(default)]
    pub flavor_name: Option<String>,
    #[builder(default)]
    pub id: Option<String>,
    #[builder(default)]
    pub limit: Option<i32>,
    #[builder(default)]
    pub marker: Option<String>,
    #[builder(default)]
    pub name: Option<String>,
    #[builder(default)]
    pub not_tags: Option<String>,
    #[builder(default)]
    pub not_tags_any: Option<String>,
    #[builder(default)]
    pub operating_status: Option<String>,
    #[builder(default)]
    pub page_reverse: Option<bool>,
    #[builder(default)]
    pub project_id: Option<String>,
    #[builder(default)]
    pub project_name: Option<String>,
    #[builder(default)]
    pub provider: Option<String>,
    #[builder(default)]
    pub provisioning_status: Option<String>,
    #[builder(default)]
    pub tags: Option<String>,
    #[builder(default)]
    pub tags_any: Option<String>,
    #[builder(default)]
    pub updated_at: Option<String>,
    #[builder(default)]
    pub vip_address: Option<String>,
    #[builder(default)]
    pub vip_network_id: Option<String>,
    #[builder(default)]
    pub vip_network_name: Option<String>,
    #[builder(default)]
    pub vip_port_id: Option<String>,
    #[builder(default)]
    pub vip_port_name: Option<String>,
    #[builder(default)]
    pub vip_qos_policy_id: Option<String>,
    #[builder(default)]
    pub vip_qos_policy_name: Option<String>,
    #[builder(default)]
    pub vip_subnet_id: Option<String>,
    #[builder(default)]
    pub vip_subnet_name: Option<String>,
}

impl fmt::Display for LoadBalancerLoadbalancerList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        if self.flavor_id.is_some() || self.flavor_name.is_some() {
            parts.push(format!(
                "flavor: {}",
                self.flavor_name
                    .as_ref()
                    .or(self.flavor_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.id.is_some() || self.name.is_some() {
            parts.push(format!(
                "name/id: {}",
                self.name
                    .as_ref()
                    .or(self.id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.project_id.is_some() || self.project_name.is_some() {
            parts.push(format!(
                "project: {}",
                self.project_name
                    .as_ref()
                    .or(self.project_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.vip_network_id.is_some() || self.vip_network_name.is_some() {
            parts.push(format!(
                "vip_network: {}",
                self.vip_network_name
                    .as_ref()
                    .or(self.vip_network_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.vip_port_id.is_some() || self.vip_port_name.is_some() {
            parts.push(format!(
                "vip_port: {}",
                self.vip_port_name
                    .as_ref()
                    .or(self.vip_port_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.vip_qos_policy_id.is_some() || self.vip_qos_policy_name.is_some() {
            parts.push(format!(
                "vip_qos_policy: {}",
                self.vip_qos_policy_name
                    .as_ref()
                    .or(self.vip_qos_policy_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.vip_subnet_id.is_some() || self.vip_subnet_name.is_some() {
            parts.push(format!(
                "vip_subnet: {}",
                self.vip_subnet_name
                    .as_ref()
                    .or(self.vip_subnet_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&LoadBalancerLoadbalancerList> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &LoadBalancerLoadbalancerList) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.availability_zone {
            ep_builder.availability_zone(val.clone());
        }
        if let Some(val) = &value.created_at {
            ep_builder.created_at(val.clone());
        }
        if let Some(val) = &value.description {
            ep_builder.description(val.clone());
        }
        if let Some(val) = &value.flavor_id {
            ep_builder.flavor_id(val.clone());
        }
        if let Some(val) = &value.id {
            ep_builder.id(val.clone());
        }
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.marker {
            ep_builder.marker(val.clone());
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.page_reverse {
            ep_builder.page_reverse(*val);
        }
        if let Some(val) = &value.provider {
            ep_builder.provider(val.clone());
        }
        if let Some(val) = &value.project_id {
            ep_builder.project_id(val.clone());
        }
        if let Some(val) = &value.updated_at {
            ep_builder.updated_at(val.clone());
        }
        if let Some(val) = &value.vip_address {
            ep_builder.vip_address(val.clone());
        }
        if let Some(val) = &value.vip_network_id {
            ep_builder.vip_network_id(val.clone());
        }
        if let Some(val) = &value.vip_port_id {
            ep_builder.vip_port_id(val.clone());
        }
        if let Some(val) = &value.vip_subnet_id {
            ep_builder.vip_subnet_id(val.clone());
        }
        if let Some(val) = &value.vip_qos_policy_id {
            ep_builder.vip_qos_policy_id(val.clone());
        }
        if let Some(val) = &value.provisioning_status {
            ep_builder.provisioning_status(val.clone());
        }
        if let Some(val) = &value.operating_status {
            ep_builder.operating_status(val.clone());
        }
        if let Some(val) = &value.tags {
            ep_builder.tags(val.clone());
        }
        if let Some(val) = &value.tags_any {
            ep_builder.tags_any(val.clone());
        }
        if let Some(val) = &value.not_tags {
            ep_builder.not_tags(val.clone());
        }
        if let Some(val) = &value.not_tags_any {
            ep_builder.not_tags_any(val.clone());
        }

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for LoadBalancerLoadbalancerList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}
/// LoadBalancerLoadbalancer response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
pub struct LoadBalancerLoadbalancer {
    /// A list of JSON objects defining “additional VIPs”. The format for these
    /// is `{"subnet_id": <subnet_id>, "ip_address": <ip_address>}`, where the
    /// `subnet_id` field is mandatory and the `ip_address` field is optional.
    /// Additional VIP subnets must all belong to the same network as the
    /// primary VIP.
    ///
    /// **New in version 2.26**
    ///
    #[serde(default)]
    #[structable(optional, title = "ADDITIONAL_VIPS", wide)]
    pub additional_vips: Option<Value>,

    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`).
    ///
    #[serde(default)]
    #[structable(optional, title = "ADMIN_STATE_UP", wide)]
    pub admin_state_up: Option<bool>,

    /// An availability zone name.
    ///
    #[serde(default)]
    #[structable(optional, title = "AVAILABILITY_ZONE", wide)]
    pub availability_zone: Option<String>,

    /// The UTC date and timestamp when the resource was created.
    ///
    #[serde(default)]
    #[structable(optional, title = "CREATED_AT")]
    pub created_at: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "DESCRIPTION", wide)]
    pub description: Option<String>,

    /// The ID of the flavor.
    ///
    #[serde(default)]
    #[structable(optional, title = "FLAVOR_ID", wide)]
    pub flavor_id: Option<String>,

    /// The ID of the load balancer.
    ///
    #[serde(default)]
    #[structable(optional, title = "ID", wide)]
    pub id: Option<String>,

    /// The associated listener IDs, if any.
    ///
    #[serde(default)]
    #[structable(optional, title = "LISTENERS", wide)]
    pub listeners: Option<Value>,

    /// Human-readable name of the resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "NAME")]
    pub name: Option<String>,

    /// The operating status of the resource. See
    /// [Operating Status Codes](#op-status).
    ///
    #[serde(default)]
    #[structable(optional, status, title = "OPERATING_STATUS")]
    pub operating_status: Option<String>,

    /// The associated pool IDs, if any.
    ///
    #[serde(default)]
    #[structable(optional, title = "POOLS", wide)]
    pub pools: Option<Value>,

    /// The ID of the project owning this resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "PROJECT_ID", wide)]
    pub project_id: Option<String>,

    /// Provider name for the load balancer.
    ///
    #[serde(default)]
    #[structable(optional, title = "PROVIDER", wide)]
    pub provider: Option<String>,

    /// The provisioning status of the resource. See
    /// [Provisioning Status Codes](#prov-status).
    ///
    #[serde(default)]
    #[structable(optional, title = "PROVISIONING_STATUS", wide)]
    pub provisioning_status: Option<String>,

    /// A list of simple strings assigned to the resource.
    ///
    /// **New in version 2.5**
    ///
    #[serde(default)]
    #[structable(optional, title = "TAGS", wide)]
    pub tags: Option<Value>,

    #[serde(default)]
    #[structable(optional, title = "TENANT_ID", wide)]
    pub tenant_id: Option<String>,

    /// The UTC date and timestamp when the resource was last updated.
    ///
    #[serde(default)]
    #[structable(optional, title = "UPDATED_AT")]
    pub updated_at: Option<String>,

    /// The IP address of the Virtual IP (VIP).
    ///
    #[serde(default)]
    #[structable(optional, title = "VIP_ADDRESS", wide)]
    pub vip_address: Option<String>,

    /// The ID of the network for the Virtual IP (VIP).
    ///
    #[serde(default)]
    #[structable(optional, title = "VIP_NETWORK_ID", wide)]
    pub vip_network_id: Option<String>,

    /// The ID of the Virtual IP (VIP) port.
    ///
    #[serde(default)]
    #[structable(optional, title = "VIP_PORT_ID", wide)]
    pub vip_port_id: Option<String>,

    /// The ID of the QoS Policy which will apply to the Virtual IP (VIP).
    ///
    #[serde(default)]
    #[structable(optional, title = "VIP_QOS_POLICY_ID", wide)]
    pub vip_qos_policy_id: Option<String>,

    /// The list of Security Group IDs of the Virtual IP (VIP) port of the Load
    /// Balancer.
    ///
    /// **New in version 2.29**
    ///
    #[serde(default)]
    #[structable(optional, title = "VIP_SG_IDS", wide)]
    pub vip_sg_ids: Option<Value>,

    /// The ID of the subnet for the Virtual IP (VIP).
    ///
    #[serde(default)]
    #[structable(optional, title = "VIP_SUBNET_ID", wide)]
    pub vip_subnet_id: Option<String>,

    /// The VIP vNIC type used for the load balancer. One of `normal` or
    /// `direct`.
    ///
    /// **New in version 2.28**
    ///
    #[serde(default)]
    #[structable(optional, title = "VIP_VNIC_TYPE", wide)]
    pub vip_vnic_type: Option<String>,
}

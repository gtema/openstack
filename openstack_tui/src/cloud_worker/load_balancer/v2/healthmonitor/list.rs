// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use crate::utils::OutputConfig;
use crate::utils::StructTable;
use openstack_sdk::api::load_balancer::v2::healthmonitor::list::RequestBuilder;
use openstack_sdk::api::{paged, Pagination};
use openstack_sdk::{api::QueryAsync, AsyncOpenStack};
use serde_json::Value;
use structable_derive::StructTable;

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct LoadBalancerHealthmonitorList {
    #[builder(default)]
    pub _type: Option<String>,
    #[builder(default)]
    pub admin_state_up: Option<bool>,
    #[builder(default)]
    pub created_at: Option<String>,
    #[builder(default)]
    pub delay: Option<i32>,
    #[builder(default)]
    pub description: Option<String>,
    #[builder(default)]
    pub expected_codes: Option<String>,
    #[builder(default)]
    pub http_method: Option<String>,
    #[builder(default)]
    pub id: Option<String>,
    #[builder(default)]
    pub limit: Option<i32>,
    #[builder(default)]
    pub marker: Option<String>,
    #[builder(default)]
    pub max_retries: Option<i32>,
    #[builder(default)]
    pub max_retries_down: Option<i32>,
    #[builder(default)]
    pub name: Option<String>,
    #[builder(default)]
    pub not_tags: Option<String>,
    #[builder(default)]
    pub not_tags_any: Option<String>,
    #[builder(default)]
    pub operating_status: Option<String>,
    #[builder(default)]
    pub page_reverse: Option<bool>,
    #[builder(default)]
    pub pool_id: Option<String>,
    #[builder(default)]
    pub pool_name: Option<String>,
    #[builder(default)]
    pub project_id: Option<String>,
    #[builder(default)]
    pub project_name: Option<String>,
    #[builder(default)]
    pub provisioning_status: Option<String>,
    #[builder(default)]
    pub tags: Option<String>,
    #[builder(default)]
    pub tags_any: Option<String>,
    #[builder(default)]
    pub timeout: Option<i32>,
    #[builder(default)]
    pub updated_at: Option<String>,
    #[builder(default)]
    pub url_path: Option<String>,
}

impl fmt::Display for LoadBalancerHealthmonitorList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        if self.id.is_some() || self.name.is_some() {
            parts.push(format!(
                "name/id: {}",
                self.name
                    .as_ref()
                    .or(self.id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.pool_id.is_some() || self.pool_name.is_some() {
            parts.push(format!(
                "pool: {}",
                self.pool_name
                    .as_ref()
                    .or(self.pool_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.project_id.is_some() || self.project_name.is_some() {
            parts.push(format!(
                "project: {}",
                self.project_name
                    .as_ref()
                    .or(self.project_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&LoadBalancerHealthmonitorList> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &LoadBalancerHealthmonitorList) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.admin_state_up {
            ep_builder.admin_state_up(*val);
        }
        if let Some(val) = &value.created_at {
            ep_builder.created_at(val.clone());
        }
        if let Some(val) = &value.delay {
            ep_builder.delay(*val);
        }
        if let Some(val) = &value.description {
            ep_builder.description(val.clone());
        }
        if let Some(val) = &value.expected_codes {
            ep_builder.expected_codes(val.clone());
        }
        if let Some(val) = &value.http_method {
            ep_builder.http_method(val.clone());
        }
        if let Some(val) = &value.id {
            ep_builder.id(val.clone());
        }
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.marker {
            ep_builder.marker(val.clone());
        }
        if let Some(val) = &value.max_retries {
            ep_builder.max_retries(*val);
        }
        if let Some(val) = &value.max_retries_down {
            ep_builder.max_retries_down(*val);
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.page_reverse {
            ep_builder.page_reverse(*val);
        }
        if let Some(val) = &value.pool_id {
            ep_builder.pool_id(val.clone());
        }
        if let Some(val) = &value.project_id {
            ep_builder.project_id(val.clone());
        }
        if let Some(val) = &value.timeout {
            ep_builder.timeout(*val);
        }
        if let Some(val) = &value._type {
            ep_builder._type(val.clone());
        }
        if let Some(val) = &value.updated_at {
            ep_builder.updated_at(val.clone());
        }
        if let Some(val) = &value.url_path {
            ep_builder.url_path(val.clone());
        }
        if let Some(val) = &value.provisioning_status {
            ep_builder.provisioning_status(val.clone());
        }
        if let Some(val) = &value.operating_status {
            ep_builder.operating_status(val.clone());
        }
        if let Some(val) = &value.tags {
            ep_builder.tags(val.clone());
        }
        if let Some(val) = &value.tags_any {
            ep_builder.tags_any(val.clone());
        }
        if let Some(val) = &value.not_tags {
            ep_builder.not_tags(val.clone());
        }
        if let Some(val) = &value.not_tags_any {
            ep_builder.not_tags_any(val.clone());
        }

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for LoadBalancerHealthmonitorList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}
/// LoadBalancerHealthmonitor response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
pub struct LoadBalancerHealthmonitor {
    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`).
    ///
    #[serde(default)]
    #[structable(optional, title = "ADMIN_STATE_UP", wide)]
    pub admin_state_up: Option<bool>,

    /// The UTC date and timestamp when the resource was created.
    ///
    #[serde(default)]
    #[structable(optional, title = "CREATED_AT")]
    pub created_at: Option<String>,

    /// The time, in seconds, between sending probes to members.
    ///
    #[serde(default)]
    #[structable(optional, title = "DELAY", wide)]
    pub delay: Option<i32>,

    /// The domain name, which be injected into the HTTP Host Header to the
    /// backend server for HTTP health check.
    ///
    /// **New in version 2.10**
    ///
    #[serde(default)]
    #[structable(optional, title = "DOMAIN_NAME", wide)]
    pub domain_name: Option<String>,

    /// The list of HTTP status codes expected in response from the member to
    /// declare it healthy. Specify one of the following values:
    ///
    /// - A single value, such as `200`
    /// - A list, such as `200, 202`
    /// - A range, such as `200-204`
    ///
    #[serde(default)]
    #[structable(optional, title = "EXPECTED_CODES", wide)]
    pub expected_codes: Option<String>,

    /// The HTTP method that the health monitor uses for requests. One of
    /// `CONNECT`, `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT`,
    /// or `TRACE`.
    ///
    #[serde(default)]
    #[structable(optional, title = "HTTP_METHOD", wide)]
    pub http_method: Option<String>,

    /// The HTTP version. One of `1.0` or `1.1`. The default is `1.0`.
    ///
    /// **New in version 2.10**
    ///
    #[serde(default)]
    #[structable(optional, title = "HTTP_VERSION", wide)]
    pub http_version: Option<f32>,

    /// The associated health monitor ID.
    ///
    #[serde(default)]
    #[structable(optional, title = "ID", wide)]
    pub id: Option<String>,

    /// The number of successful checks before changing the `operating status`
    /// of the member to `ONLINE`. A valid value is from `1` to `10`.
    ///
    #[serde(default)]
    #[structable(optional, title = "MAX_RETRIES", wide)]
    pub max_retries: Option<i32>,

    /// The number of allowed check failures before changing the
    /// `operating status` of the member to `ERROR`. A valid value is from `1`
    /// to `10`.
    ///
    #[serde(default)]
    #[structable(optional, title = "MAX_RETRIES_DOWN", wide)]
    pub max_retries_down: Option<i32>,

    /// Human-readable name of the resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "NAME")]
    pub name: Option<String>,

    /// The operating status of the resource. See
    /// [Operating Status Codes](#op-status).
    ///
    #[serde(default)]
    #[structable(optional, status, title = "OPERATING_STATUS")]
    pub operating_status: Option<String>,

    #[serde(default)]
    #[structable(optional, title = "POOLS", wide)]
    pub pools: Option<Value>,

    /// The ID of the project owning this resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "PROJECT_ID", wide)]
    pub project_id: Option<String>,

    /// The provisioning status of the resource. See
    /// [Provisioning Status Codes](#prov-status).
    ///
    #[serde(default)]
    #[structable(optional, title = "PROVISIONING_STATUS", wide)]
    pub provisioning_status: Option<String>,

    /// A list of simple strings assigned to the resource.
    ///
    /// **New in version 2.5**
    ///
    #[serde(default)]
    #[structable(optional, title = "TAGS", wide)]
    pub tags: Option<Value>,

    #[serde(default)]
    #[structable(optional, title = "TENANT_ID", wide)]
    pub tenant_id: Option<String>,

    /// The maximum time, in seconds, that a monitor waits to connect before it
    /// times out. This value must be less than the delay value.
    ///
    #[serde(default)]
    #[structable(optional, title = "TIMEOUT", wide)]
    pub timeout: Option<i32>,

    /// The type of health monitor. One of `HTTP`, `HTTPS`, `PING`, `SCTP`,
    /// `TCP`, `TLS-HELLO`, or `UDP-CONNECT`.
    ///
    #[serde(default, rename = "type")]
    #[structable(optional, title = "TYPE", wide)]
    pub _type: Option<String>,

    /// The UTC date and timestamp when the resource was last updated.
    ///
    #[serde(default)]
    #[structable(optional, title = "UPDATED_AT")]
    pub updated_at: Option<String>,

    /// The HTTP URL path of the request sent by the monitor to test the health
    /// of a backend member. Must be a string that begins with a forward slash
    /// (`/`).
    ///
    #[serde(default)]
    #[structable(optional, title = "URL_PATH", wide)]
    pub url_path: Option<String>,
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use crate::utils::OutputConfig;
use crate::utils::StructTable;
use openstack_sdk::api::load_balancer::v2::quota::list::RequestBuilder;
use openstack_sdk::{api::QueryAsync, AsyncOpenStack};
use structable_derive::StructTable;

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct LoadBalancerQuotaList {}

impl fmt::Display for LoadBalancerQuotaList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let parts: Vec<String> = Vec::new();
        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&LoadBalancerQuotaList> for RequestBuilder {
    type Error = Report;
    fn try_from(value: &LoadBalancerQuotaList) -> Result<Self, Self::Error> {
        let ep_builder = Self::default();

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for LoadBalancerQuotaList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: ep.query_async(session).await?,
        })?;
        Ok(())
    }
}
/// LoadBalancerQuota response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
pub struct LoadBalancerQuota {
    #[serde(default)]
    #[structable(optional, title = "HEALTH_MONITOR")]
    pub health_monitor: Option<i32>,

    /// The configured health monitor quota limit. A setting of `null` means it
    /// is using the deployment default quota. A setting of `-1` means
    /// unlimited.
    ///
    #[serde(default)]
    #[structable(optional, title = "HEALTHMONITOR")]
    pub healthmonitor: Option<i32>,

    /// The configured l7policy quota limit. A setting of `null` means it is
    /// using the deployment default quota. A setting of `-1` means unlimited.
    ///
    #[serde(default)]
    #[structable(optional, title = "L7POLICY")]
    pub l7policy: Option<i32>,

    /// The configured l7rule quota limit. A setting of `null` means it is
    /// using the deployment default quota. A setting of `-1` means unlimited.
    ///
    #[serde(default)]
    #[structable(optional, title = "L7RULE")]
    pub l7rule: Option<i32>,

    /// The configured listener quota limit. A setting of `null` means it is
    /// using the deployment default quota. A setting of `-1` means unlimited.
    ///
    #[serde(default)]
    #[structable(optional, title = "LISTENER")]
    pub listener: Option<i32>,

    #[serde(default)]
    #[structable(optional, title = "LOAD_BALANCER")]
    pub load_balancer: Option<i32>,

    /// The configured load balancer quota limit. A setting of `null` means it
    /// is using the deployment default quota. A setting of `-1` means
    /// unlimited.
    ///
    #[serde(default)]
    #[structable(optional, title = "LOADBALANCER")]
    pub loadbalancer: Option<i32>,

    /// The configured member quota limit. A setting of `null` means it is
    /// using the deployment default quota. A setting of `-1` means unlimited.
    ///
    #[serde(default)]
    #[structable(optional, title = "MEMBER")]
    pub member: Option<i32>,

    /// The configured pool quota limit. A setting of `null` means it is using
    /// the deployment default quota. A setting of `-1` means unlimited.
    ///
    #[serde(default)]
    #[structable(optional, title = "POOL")]
    pub pool: Option<i32>,

    /// The ID of the project owning this resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "PROJECT_ID", wide)]
    pub project_id: Option<String>,

    #[serde(default)]
    #[structable(optional, title = "TENANT_ID")]
    pub tenant_id: Option<String>,
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use openstack_sdk::api::identity::v3::user::set::RequestBuilder;
use openstack_sdk::{AsyncOpenStack, api::QueryAsync};

#[derive(Builder, Clone, Debug, Default, Deserialize, PartialEq, Eq, Serialize)]
#[builder(setter(strip_option))]
pub struct IdentityUserSet {
    pub id: String,
    #[builder(default)]
    pub name: Option<String>,

    /// A `user` object
    user: User,
}
/// Protocols data
#[derive(Builder, Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
#[builder(setter(strip_option))]
pub struct Protocols {
    #[builder(setter(into))]
    pub protocol_id: String,

    #[builder(setter(into))]
    pub unique_id: String,
}

impl TryFrom<&Protocols> for openstack_sdk::api::identity::v3::user::set::ProtocolsBuilder<'_> {
    type Error = Report;
    fn try_from(value: &Protocols) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        ep_builder.protocol_id(value.protocol_id.clone());
        ep_builder.unique_id(value.unique_id.clone());
        Ok(ep_builder)
    }
}
impl TryFrom<&Protocols> for openstack_sdk::api::identity::v3::user::set::Protocols<'_> {
    type Error = Report;
    fn try_from(value: &Protocols) -> Result<Self, Self::Error> {
        let ep_builder: openstack_sdk::api::identity::v3::user::set::ProtocolsBuilder =
            TryFrom::try_from(value)?;
        ep_builder
            .build()
            .wrap_err("cannot prepare request element `Protocols`")
    }
}

/// Federated data
#[derive(Builder, Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
#[builder(setter(strip_option))]
pub struct Federated {
    #[builder(setter(into))]
    pub idp_id: String,

    #[builder(setter(into))]
    pub protocols: Vec<Protocols>,
}

impl TryFrom<&Federated> for openstack_sdk::api::identity::v3::user::set::FederatedBuilder<'_> {
    type Error = Report;
    fn try_from(value: &Federated) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        ep_builder.idp_id(value.idp_id.clone());
        ep_builder.protocols(
            value
                .protocols
                .iter()
                .flat_map(TryFrom::try_from)
                .collect::<Vec<openstack_sdk::api::identity::v3::user::set::Protocols>>(),
        );
        Ok(ep_builder)
    }
}
impl TryFrom<&Federated> for openstack_sdk::api::identity::v3::user::set::Federated<'_> {
    type Error = Report;
    fn try_from(value: &Federated) -> Result<Self, Self::Error> {
        let ep_builder: openstack_sdk::api::identity::v3::user::set::FederatedBuilder =
            TryFrom::try_from(value)?;
        ep_builder
            .build()
            .wrap_err("cannot prepare request element `Federated`")
    }
}

/// Options data
#[derive(Builder, Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
#[builder(setter(strip_option))]
pub struct Options {
    #[builder(default, setter(into))]
    pub ignore_change_password_upon_first_use: Option<bool>,

    #[builder(default, setter(into))]
    pub ignore_lockout_failure_attempts: Option<bool>,

    #[builder(default, setter(into))]
    pub ignore_password_expiry: Option<bool>,

    #[builder(default, setter(into))]
    pub ignore_user_inactivity: Option<bool>,

    #[builder(default, setter(into))]
    pub lock_password: Option<bool>,

    #[builder(default, setter(into))]
    pub multi_factor_auth_enabled: Option<bool>,

    #[builder(default, private, setter(into, name = "_multi_factor_auth_rules"))]
    pub multi_factor_auth_rules: Option<Vec<Vec<String>>>,
}

impl TryFrom<&Options> for openstack_sdk::api::identity::v3::user::set::OptionsBuilder<'_> {
    type Error = Report;
    fn try_from(value: &Options) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.ignore_change_password_upon_first_use {
            ep_builder.ignore_change_password_upon_first_use(*val);
        }
        if let Some(val) = &value.ignore_lockout_failure_attempts {
            ep_builder.ignore_lockout_failure_attempts(*val);
        }
        if let Some(val) = &value.ignore_password_expiry {
            ep_builder.ignore_password_expiry(*val);
        }
        if let Some(val) = &value.ignore_user_inactivity {
            ep_builder.ignore_user_inactivity(*val);
        }
        if let Some(val) = &value.lock_password {
            ep_builder.lock_password(*val);
        }
        if let Some(val) = &value.multi_factor_auth_enabled {
            ep_builder.multi_factor_auth_enabled(*val);
        }
        if let Some(val) = &value.multi_factor_auth_rules {
            ep_builder.multi_factor_auth_rules(val.iter().cloned());
        }
        Ok(ep_builder)
    }
}
impl TryFrom<&Options> for openstack_sdk::api::identity::v3::user::set::Options<'_> {
    type Error = Report;
    fn try_from(value: &Options) -> Result<Self, Self::Error> {
        let ep_builder: openstack_sdk::api::identity::v3::user::set::OptionsBuilder =
            TryFrom::try_from(value)?;
        ep_builder
            .build()
            .wrap_err("cannot prepare request element `Options`")
    }
}

/// User data
#[derive(Builder, Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
#[builder(setter(strip_option))]
pub struct User {
    /// The new ID of the default project for the user.
    #[builder(default, setter(into))]
    pub default_project_id: Option<Option<String>>,

    /// The description of the user resource.
    #[builder(default, setter(into))]
    pub description: Option<Option<String>>,

    /// The ID of the new domain for the user. The ability to change the domain
    /// of a user is now deprecated, and will be removed in subsequent release.
    /// It is already disabled by default in most Identity service
    /// implementations.
    #[builder(default, setter(into))]
    pub domain_id: Option<String>,

    /// Enables or disables the user. An enabled user can authenticate and
    /// receive authorization. A disabled user cannot authenticate or receive
    /// authorization. Additionally, all tokens that the user holds become no
    /// longer valid. If you reenable this user, pre-existing tokens do not
    /// become valid. To enable the user, set to `true`. To disable the user,
    /// set to `false`. Default is `true`.
    #[builder(default, setter(into))]
    pub enabled: Option<bool>,

    /// List of federated objects associated with a user. Each object in the
    /// list contains the `idp_id` and `protocols`. `protocols` is a list of
    /// objects, each of which contains `protocol_id` and `unique_id` of the
    /// protocol and user respectively. For example:
    ///
    /// ```text
    /// "federated": [
    ///   {
    ///     "idp_id": "efbab5a6acad4d108fec6c63d9609d83",
    ///     "protocols": [
    ///       {"protocol_id": mapped, "unique_id": "test@example.com"}
    ///     ]
    ///   }
    /// ]
    /// ```
    #[builder(default, setter(into))]
    pub federated: Option<Vec<Federated>>,

    /// The new name for the user. Must be unique within the owning domain.
    #[builder(default, setter(into))]
    pub name: Option<String>,

    /// The resource options for the user. Available resource options are
    /// `ignore_change_password_upon_first_use`, `ignore_password_expiry`,
    /// `ignore_lockout_failure_attempts`, `lock_password`,
    /// `multi_factor_auth_enabled`, and `multi_factor_auth_rules`
    /// `ignore_user_inactivity`.
    #[builder(default, setter(into))]
    pub options: Option<Options>,

    /// The new password for the user.
    #[builder(default, setter(into))]
    pub password: Option<Option<String>>,
}

impl TryFrom<&User> for openstack_sdk::api::identity::v3::user::set::UserBuilder<'_> {
    type Error = Report;
    fn try_from(value: &User) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.default_project_id {
            ep_builder.default_project_id(val.clone().map(Into::into));
        }
        if let Some(val) = &value.description {
            ep_builder.description(val.clone().map(Into::into));
        }
        if let Some(val) = &value.domain_id {
            ep_builder.domain_id(val.clone());
        }
        if let Some(val) = &value.enabled {
            ep_builder.enabled(*val);
        }
        if let Some(val) = &value.federated {
            ep_builder.federated(
                val.iter()
                    .flat_map(TryFrom::try_from)
                    .collect::<Vec<openstack_sdk::api::identity::v3::user::set::Federated>>(),
            );
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.options {
            ep_builder.options(TryInto::<
                openstack_sdk::api::identity::v3::user::set::Options,
            >::try_into(val)?);
        }
        if let Some(val) = &value.password {
            ep_builder.password(val.clone().map(Into::into));
        }
        Ok(ep_builder)
    }
}
impl TryFrom<&User> for openstack_sdk::api::identity::v3::user::set::User<'_> {
    type Error = Report;
    fn try_from(value: &User) -> Result<Self, Self::Error> {
        let ep_builder: openstack_sdk::api::identity::v3::user::set::UserBuilder =
            TryFrom::try_from(value)?;
        ep_builder
            .build()
            .wrap_err("cannot prepare request element `User`")
    }
}

impl fmt::Display for IdentityUserSet {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        parts.push(format!(
            "name/id: {}",
            self.name.clone().unwrap_or(self.id.clone())
        ));
        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&IdentityUserSet> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &IdentityUserSet) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        ep_builder.id(value.id.clone());
        ep_builder.user(
            TryInto::<openstack_sdk::api::identity::v3::user::set::User>::try_into(&value.user)?,
        );

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for IdentityUserSet {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponseData {
            request: request.clone(),
            data: ep.query_async(session).await?,
        })?;
        Ok(())
    }
}

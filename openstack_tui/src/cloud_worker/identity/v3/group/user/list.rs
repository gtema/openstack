// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use crate::utils::OutputConfig;
use crate::utils::StructTable;
use openstack_sdk::api::identity::v3::group::user::list::RequestBuilder;
use openstack_sdk::{AsyncOpenStack, api::QueryAsync};
use serde_json::Value;
use structable_derive::StructTable;

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct IdentityGroupUserList {
    pub group_id: String,
    #[builder(default)]
    pub group_name: Option<String>,
    #[builder(default)]
    pub password_expires_at: Option<String>,
}

impl fmt::Display for IdentityGroupUserList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        parts.push(format!(
            "group: {}",
            self.group_name.clone().unwrap_or(self.group_id.clone())
        ));
        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&IdentityGroupUserList> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &IdentityGroupUserList) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        ep_builder.group_id(value.group_id.clone());
        if let Some(val) = &value.password_expires_at {
            ep_builder.password_expires_at(val.clone());
        }

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for IdentityGroupUserList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: ep.query_async(session).await?,
        })?;
        Ok(())
    }
}
/// IdentityGroupUser response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
pub struct IdentityGroupUser {
    /// The ID of the default project for the user.
    ///
    #[serde(default)]
    #[structable(optional, title = "DEFAULT_PROJECT_ID", wide)]
    pub default_project_id: Option<String>,

    /// The resource description.
    ///
    #[serde(default)]
    #[structable(optional, title = "DESCRIPTION", wide)]
    pub description: Option<String>,

    /// The ID of the domain.
    ///
    #[serde(default)]
    #[structable(optional, title = "DOMAIN_ID", wide)]
    pub domain_id: Option<String>,

    /// If the user is enabled, this value is `true`. If the user is disabled,
    /// this value is `false`.
    ///
    #[serde(default)]
    #[structable(optional, title = "ENABLED", wide)]
    pub enabled: Option<bool>,

    /// List of federated objects associated with a user. Each object in the
    /// list contains the `idp_id` and `protocols`. `protocols` is a list of
    /// objects, each of which contains `protocol_id` and `unique_id` of the
    /// protocol and user respectively. For example:
    ///
    /// ```text
    /// "federated": [
    ///   {
    ///     "idp_id": "efbab5a6acad4d108fec6c63d9609d83",
    ///     "protocols": [
    ///       {"protocol_id": "mapped", "unique_id": "test@example.com"}
    ///     ]
    ///   }
    /// ]
    ///
    /// ```
    ///
    #[serde(default)]
    #[structable(optional, title = "FEDERATED", wide)]
    pub federated: Option<Value>,

    /// The user ID.
    ///
    #[serde(default)]
    #[structable(optional, title = "ID", wide)]
    pub id: Option<String>,

    /// The user name. Must be unique within the owning domain.
    ///
    #[serde(default)]
    #[structable(optional, title = "NAME")]
    pub name: Option<String>,

    /// The resource options for the user. Available resource options are
    /// `ignore_change_password_upon_first_use`, `ignore_password_expiry`,
    /// `ignore_lockout_failure_attempts`, `lock_password`,
    /// `multi_factor_auth_enabled`, and `multi_factor_auth_rules`
    /// `ignore_user_inactivity`.
    ///
    #[serde(default)]
    #[structable(optional, title = "OPTIONS", wide)]
    pub options: Option<Value>,

    /// The date and time when the password expires. The time zone is UTC.
    ///
    /// This is a response object attribute; not valid for requests. A `null`
    /// value indicates that the password never expires.
    ///
    /// **New in version 3.7**
    ///
    #[serde(default)]
    #[structable(optional, title = "PASSWORD_EXPIRES_AT", wide)]
    pub password_expires_at: Option<String>,
}

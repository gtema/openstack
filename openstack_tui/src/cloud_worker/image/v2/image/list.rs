// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use crate::utils::OutputConfig;
use crate::utils::StructTable;
use openstack_sdk::api::image::v2::image::list::RequestBuilder;
use openstack_sdk::api::{Pagination, paged};
use openstack_sdk::{AsyncOpenStack, api::QueryAsync};
use serde_json::Value;
use structable_derive::StructTable;

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct ImageImageList {
    #[builder(default)]
    pub created_at: Option<String>,
    #[builder(default)]
    pub id: Option<String>,
    #[builder(default)]
    pub limit: Option<i32>,
    #[builder(default)]
    pub marker: Option<String>,
    #[builder(default)]
    pub member_status: Option<String>,
    #[builder(default)]
    pub name: Option<String>,
    #[builder(default)]
    pub os_hidden: Option<bool>,
    #[builder(default)]
    pub owner: Option<String>,
    #[builder(default)]
    pub protected: Option<bool>,
    #[builder(default)]
    pub size_max: Option<String>,
    #[builder(default)]
    pub size_min: Option<String>,
    #[builder(default)]
    pub sort: Option<String>,
    #[builder(default)]
    pub sort_dir: Option<String>,
    #[builder(default)]
    pub sort_key: Option<String>,
    #[builder(default)]
    pub status: Option<String>,
    #[builder(default)]
    pub tag: Option<Vec<String>>,
    #[builder(default)]
    pub updated_at: Option<String>,
    #[builder(default)]
    pub visibility: Option<String>,
}

impl fmt::Display for ImageImageList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        if self.id.is_some() || self.name.is_some() {
            parts.push(format!(
                "name/id: {}",
                self.name
                    .as_ref()
                    .or(self.id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&ImageImageList> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &ImageImageList) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.marker {
            ep_builder.marker(val.clone());
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.id {
            ep_builder.id(val.clone());
        }
        if let Some(val) = &value.owner {
            ep_builder.owner(val.clone());
        }
        if let Some(val) = &value.protected {
            ep_builder.protected(*val);
        }
        if let Some(val) = &value.status {
            ep_builder.status(val.clone());
        }
        if let Some(val) = &value.tag {
            ep_builder.tag(val.iter().cloned());
        }
        if let Some(val) = &value.visibility {
            ep_builder.visibility(val.clone());
        }
        if let Some(val) = &value.os_hidden {
            ep_builder.os_hidden(*val);
        }
        if let Some(val) = &value.member_status {
            ep_builder.member_status(val.clone());
        }
        if let Some(val) = &value.size_max {
            ep_builder.size_max(val.clone());
        }
        if let Some(val) = &value.size_min {
            ep_builder.size_min(val.clone());
        }
        if let Some(val) = &value.created_at {
            ep_builder.created_at(val.clone());
        }
        if let Some(val) = &value.updated_at {
            ep_builder.updated_at(val.clone());
        }
        if let Some(val) = &value.sort_dir {
            ep_builder.sort_dir(val.clone());
        }
        if let Some(val) = &value.sort_key {
            ep_builder.sort_key(val.clone());
        }
        if let Some(val) = &value.sort {
            ep_builder.sort(val.clone());
        }

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for ImageImageList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}
/// ImageImage response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
pub struct ImageImage {
    /// md5 hash of image contents.
    ///
    #[serde(default)]
    #[structable(optional, title = "CHECKSUM", wide)]
    pub checksum: Option<String>,

    /// Format of the container
    ///
    #[serde(default)]
    #[structable(optional, title = "CONTAINER_FORMAT", wide)]
    pub container_format: Option<Value>,

    /// Date and time of image registration
    ///
    #[serde(default)]
    #[structable(optional, title = "CREATED_AT")]
    pub created_at: Option<String>,

    /// URL to access the image file kept in external store
    ///
    #[serde(default)]
    #[structable(optional, title = "DIRECT_URL", wide)]
    pub direct_url: Option<String>,

    /// Format of the disk
    ///
    #[serde(default)]
    #[structable(optional, title = "DISK_FORMAT", wide)]
    pub disk_format: Option<Value>,

    /// An image file url
    ///
    #[serde(default)]
    #[structable(optional, title = "FILE", wide)]
    pub file: Option<String>,

    /// An identifier for the image
    ///
    #[serde(default)]
    #[structable(optional, title = "ID", wide)]
    pub id: Option<String>,

    /// A set of URLs to access the image file kept in external store
    ///
    #[serde(default)]
    #[structable(optional, title = "LOCATIONS", wide)]
    pub locations: Option<Value>,

    /// Amount of disk space (in GB) required to boot image.
    ///
    #[serde(default)]
    #[structable(optional, title = "MIN_DISK", wide)]
    pub min_disk: Option<i32>,

    /// Amount of ram (in MB) required to boot image.
    ///
    #[serde(default)]
    #[structable(optional, title = "MIN_RAM", wide)]
    pub min_ram: Option<i32>,

    /// Descriptive name for the image
    ///
    #[serde(default)]
    #[structable(optional, title = "NAME")]
    pub name: Option<String>,

    /// Algorithm to calculate the os_hash_value
    ///
    #[serde(default)]
    #[structable(optional, title = "OS_HASH_ALGO", wide)]
    pub os_hash_algo: Option<String>,

    /// Hexdigest of the image contents using the algorithm specified by the
    /// os_hash_algo
    ///
    #[serde(default)]
    #[structable(optional, title = "OS_HASH_VALUE", wide)]
    pub os_hash_value: Option<String>,

    /// If true, image will not appear in default image list response.
    ///
    #[serde(default)]
    #[structable(optional, title = "OS_HIDDEN", wide)]
    pub os_hidden: Option<bool>,

    /// Owner of the image
    ///
    #[serde(default)]
    #[structable(optional, title = "OWNER", wide)]
    pub owner: Option<String>,

    /// If true, image will not be deletable.
    ///
    #[serde(default)]
    #[structable(optional, title = "PROTECTED", wide)]
    pub protected: Option<bool>,

    /// An image schema url
    ///
    #[serde(default)]
    #[structable(optional, title = "SCHEMA", wide)]
    pub schema: Option<String>,

    /// An image self url
    ///
    #[serde(default, rename = "self")]
    #[structable(optional, title = "SELF", wide)]
    pub _self: Option<String>,

    /// Size of image file in bytes
    ///
    #[serde(default)]
    #[structable(optional, title = "SIZE", wide)]
    pub size: Option<i64>,

    /// Status of the image
    ///
    #[serde(default)]
    #[structable(optional, title = "STATUS")]
    pub status: Option<Value>,

    /// Store in which image data resides. Only present when the operator has
    /// enabled multiple stores. May be a comma-separated list of store
    /// identifiers.
    ///
    #[serde(default)]
    #[structable(optional, title = "STORES", wide)]
    pub stores: Option<String>,

    /// List of strings related to the image
    ///
    #[serde(default)]
    #[structable(optional, title = "TAGS", wide)]
    pub tags: Option<Value>,

    /// Date and time of the last image modification
    ///
    #[serde(default)]
    #[structable(optional, title = "UPDATED_AT")]
    pub updated_at: Option<String>,

    /// Virtual size of image in bytes
    ///
    #[serde(default)]
    #[structable(optional, title = "VIRTUAL_SIZE", wide)]
    pub virtual_size: Option<i64>,

    /// Scope of image accessibility
    ///
    #[serde(default)]
    #[structable(optional, title = "VISIBILITY", wide)]
    pub visibility: Option<Value>,
}

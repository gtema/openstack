// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use openstack_sdk::api::image::v2::image::list::RequestBuilder;
use openstack_sdk::api::{paged, Pagination};
use openstack_sdk::{api::QueryAsync, AsyncOpenStack};

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct ImageImageList {
    #[builder(default)]
    pub created_at: Option<String>,
    #[builder(default)]
    pub id: Option<String>,
    #[builder(default)]
    pub limit: Option<i32>,
    #[builder(default)]
    pub marker: Option<String>,
    #[builder(default)]
    pub member_status: Option<String>,
    #[builder(default)]
    pub name: Option<String>,
    #[builder(default)]
    pub os_hidden: Option<bool>,
    #[builder(default)]
    pub owner: Option<String>,
    #[builder(default)]
    pub protected: Option<bool>,
    #[builder(default)]
    pub size_max: Option<String>,
    #[builder(default)]
    pub size_min: Option<String>,
    #[builder(default)]
    pub sort: Option<String>,
    #[builder(default)]
    pub sort_dir: Option<String>,
    #[builder(default)]
    pub sort_key: Option<String>,
    #[builder(default)]
    pub status: Option<String>,
    #[builder(default)]
    pub tag: Option<Vec<String>>,
    #[builder(default)]
    pub updated_at: Option<String>,
    #[builder(default)]
    pub visibility: Option<String>,
}

impl fmt::Display for ImageImageList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        if self.id.is_some() || self.name.is_some() {
            parts.push(format!(
                "name/id: {}",
                self.name
                    .as_ref()
                    .or(self.id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        write!(f, "{}", parts.join(","))
    }
}

impl From<&ImageImageList> for RequestBuilder<'_> {
    fn from(value: &ImageImageList) -> Self {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.marker {
            ep_builder.marker(val.clone());
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.id {
            ep_builder.id(val.clone());
        }
        if let Some(val) = &value.owner {
            ep_builder.owner(val.clone());
        }
        if let Some(val) = &value.protected {
            ep_builder.protected(*val);
        }
        if let Some(val) = &value.status {
            ep_builder.status(val.clone());
        }
        if let Some(val) = &value.tag {
            ep_builder.tag(val.iter().cloned());
        }
        if let Some(val) = &value.visibility {
            ep_builder.visibility(val.clone());
        }
        if let Some(val) = &value.os_hidden {
            ep_builder.os_hidden(*val);
        }
        if let Some(val) = &value.member_status {
            ep_builder.member_status(val.clone());
        }
        if let Some(val) = &value.size_max {
            ep_builder.size_max(val.clone());
        }
        if let Some(val) = &value.size_min {
            ep_builder.size_min(val.clone());
        }
        if let Some(val) = &value.created_at {
            ep_builder.created_at(val.clone());
        }
        if let Some(val) = &value.updated_at {
            ep_builder.updated_at(val.clone());
        }
        if let Some(val) = &value.sort_dir {
            ep_builder.sort_dir(val.clone());
        }
        if let Some(val) = &value.sort_key {
            ep_builder.sort_key(val.clone());
        }
        if let Some(val) = &value.sort {
            ep_builder.sort(val.clone());
        }
        ep_builder
    }
}

impl ExecuteApiRequest for ImageImageList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = Into::<RequestBuilder>::into(self)
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}

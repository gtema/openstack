// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use crate::utils::OutputConfig;
use crate::utils::StructTable;
use openstack_sdk::api::network::v2::network::list::RequestBuilder;
use openstack_sdk::api::{Pagination, paged};
use openstack_sdk::types::BoolString;
use openstack_sdk::types::IntString;
use openstack_sdk::{AsyncOpenStack, api::QueryAsync};
use serde_json::Value;
use structable_derive::StructTable;

#[derive(Builder, Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[builder(setter(strip_option))]
pub struct NetworkNetworkList {
    #[builder(default)]
    pub admin_state_up: Option<bool>,
    #[builder(default)]
    pub description: Option<String>,
    #[builder(default)]
    pub id: Option<String>,
    #[builder(default)]
    pub is_default: Option<bool>,
    #[builder(default)]
    pub limit: Option<i32>,
    #[builder(default)]
    pub marker: Option<String>,
    #[builder(default)]
    pub mtu: Option<i32>,
    #[builder(default)]
    pub name: Option<String>,
    #[builder(default)]
    pub not_tags: Option<Vec<String>>,
    #[builder(default)]
    pub not_tags_any: Option<Vec<String>>,
    #[builder(default)]
    pub page_reverse: Option<bool>,
    #[builder(default)]
    pub provider_network_type: Option<String>,
    #[builder(default)]
    pub provider_physical_network: Option<String>,
    #[builder(default)]
    pub provider_segmentation_id: Option<i32>,
    #[builder(default)]
    pub provider_segmentation_name: Option<i32>,
    #[builder(default)]
    pub revision_number: Option<String>,
    #[builder(default)]
    pub router_external: Option<bool>,
    #[builder(default)]
    pub shared: Option<bool>,
    #[builder(default)]
    pub sort_dir: Option<Vec<String>>,
    #[builder(default)]
    pub sort_key: Option<Vec<String>>,
    #[builder(default)]
    pub status: Option<String>,
    #[builder(default)]
    pub tags: Option<Vec<String>>,
    #[builder(default)]
    pub tags_any: Option<Vec<String>>,
    #[builder(default)]
    pub tenant_id: Option<String>,
    #[builder(default)]
    pub tenant_name: Option<String>,
}

impl fmt::Display for NetworkNetworkList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut parts: Vec<String> = Vec::new();
        if self.id.is_some() || self.name.is_some() {
            parts.push(format!(
                "name/id: {}",
                self.name
                    .as_ref()
                    .or(self.id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        if self.provider_segmentation_id.is_some() || self.provider_segmentation_name.is_some() {
            parts.push(format!(
                "provider_segmentation: {}",
                self.provider_segmentation_name
                    .as_ref()
                    .or(self.provider_segmentation_id.as_ref())
                    .unwrap_or(&i32::default())
            ));
        }

        if self.tenant_id.is_some() || self.tenant_name.is_some() {
            parts.push(format!(
                "tenant: {}",
                self.tenant_name
                    .as_ref()
                    .or(self.tenant_id.as_ref())
                    .unwrap_or(&String::default())
            ));
        }

        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&NetworkNetworkList> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &NetworkNetworkList) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.id {
            ep_builder.id(val.clone());
        }
        if let Some(val) = &value.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &value.admin_state_up {
            ep_builder.admin_state_up(*val);
        }
        if let Some(val) = &value.status {
            ep_builder.status(val.clone());
        }
        if let Some(val) = &value.tenant_id {
            ep_builder.tenant_id(val.clone());
        }
        if let Some(val) = &value.shared {
            ep_builder.shared(*val);
        }
        if let Some(val) = &value.router_external {
            ep_builder.router_external(*val);
        }
        if let Some(val) = &value.mtu {
            ep_builder.mtu(*val);
        }
        if let Some(val) = &value.provider_network_type {
            ep_builder.provider_network_type(val.clone());
        }
        if let Some(val) = &value.provider_physical_network {
            ep_builder.provider_physical_network(val.clone());
        }
        if let Some(val) = &value.provider_segmentation_id {
            ep_builder.provider_segmentation_id(*val);
        }
        if let Some(val) = &value.revision_number {
            ep_builder.revision_number(val.clone());
        }
        if let Some(val) = &value.tags {
            ep_builder.tags(val.iter().cloned());
        }
        if let Some(val) = &value.tags_any {
            ep_builder.tags_any(val.iter().cloned());
        }
        if let Some(val) = &value.not_tags {
            ep_builder.not_tags(val.iter().cloned());
        }
        if let Some(val) = &value.not_tags_any {
            ep_builder.not_tags_any(val.iter().cloned());
        }
        if let Some(val) = &value.is_default {
            ep_builder.is_default(*val);
        }
        if let Some(val) = &value.description {
            ep_builder.description(val.clone());
        }
        if let Some(val) = &value.sort_key {
            ep_builder.sort_key(val.iter().cloned());
        }
        if let Some(val) = &value.sort_dir {
            ep_builder.sort_dir(val.iter().cloned());
        }
        if let Some(val) = &value.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &value.marker {
            ep_builder.marker(val.clone());
        }
        if let Some(val) = &value.page_reverse {
            ep_builder.page_reverse(*val);
        }

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for NetworkNetworkList {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponsesData {
            request: request.clone(),
            data: paged(ep, Pagination::All).query_async(session).await?,
        })?;
        Ok(())
    }
}
/// NetworkNetwork response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
pub struct NetworkNetwork {
    /// The administrative state of the network, which is up (`true`) or down
    /// (`false`).
    ///
    #[serde(default)]
    #[structable(optional, title = "ADMIN_STATE_UP", wide)]
    pub admin_state_up: Option<BoolString>,

    /// The availability zone candidate for the network.
    ///
    #[serde(default)]
    #[structable(optional, title = "AVAILABILITY_ZONE_HINTS", wide)]
    pub availability_zone_hints: Option<Value>,

    /// The availability zone for the network.
    ///
    #[serde(default)]
    #[structable(optional, title = "AVAILABILITY_ZONES", wide)]
    pub availability_zones: Option<Value>,

    /// Time at which the resource has been created (in UTC ISO8601 format).
    ///
    #[serde(default)]
    #[structable(optional, title = "CREATED_AT")]
    pub created_at: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "DESCRIPTION", wide)]
    pub description: Option<String>,

    /// A valid DNS domain.
    ///
    #[serde(default)]
    #[structable(optional, title = "DNS_DOMAIN", wide)]
    pub dns_domain: Option<String>,

    /// The ID of the network.
    ///
    #[serde(default)]
    #[structable(optional, title = "ID", wide)]
    pub id: Option<String>,

    /// The ID of the IPv4 address scope that the network is associated with.
    ///
    #[serde(default)]
    #[structable(optional, title = "IPV4_ADDRESS_SCOPE", wide)]
    pub ipv4_address_scope: Option<String>,

    /// The ID of the IPv6 address scope that the network is associated with.
    ///
    #[serde(default)]
    #[structable(optional, title = "IPV6_ADDRESS_SCOPE", wide)]
    pub ipv6_address_scope: Option<String>,

    /// The network is default pool or not.
    ///
    #[serde(default)]
    #[structable(optional, title = "IS_DEFAULT", wide)]
    pub is_default: Option<BoolString>,

    /// Indicates whether L2 connectivity is available throughout the
    /// `network`.
    ///
    #[serde(default)]
    #[structable(optional, title = "L2_ADJACENCY", wide)]
    pub l2_adjacency: Option<String>,

    /// The maximum transmission unit (MTU) value to address fragmentation.
    /// Minimum value is 68 for IPv4, and 1280 for IPv6.
    ///
    #[serde(default)]
    #[structable(optional, title = "MTU", wide)]
    pub mtu: Option<IntString>,

    /// Human-readable name of the network.
    ///
    #[serde(default)]
    #[structable(optional, title = "NAME")]
    pub name: Option<String>,

    /// The port security status of the network. Valid values are enabled
    /// (`true`) and disabled (`false`). This value is used as the default
    /// value of `port_security_enabled` field of a newly created port.
    ///
    #[serde(default)]
    #[structable(optional, title = "PORT_SECURITY_ENABLED", wide)]
    pub port_security_enabled: Option<BoolString>,

    #[serde(default, rename = "provider:network_type")]
    #[structable(optional, title = "PROVIDER:NETWORK_TYPE", wide)]
    pub provider_network_type: Option<String>,

    #[serde(default, rename = "provider:physical_network")]
    #[structable(optional, title = "PROVIDER:PHYSICAL_NETWORK", wide)]
    pub provider_physical_network: Option<String>,

    #[serde(default, rename = "provider:segmentation_id")]
    #[structable(optional, title = "PROVIDER:SEGMENTATION_ID", wide)]
    pub provider_segmentation_id: Option<IntString>,

    /// The ID of the QoS policy associated with the network.
    ///
    #[serde(default)]
    #[structable(optional, title = "QOS_POLICY_ID", wide)]
    pub qos_policy_id: Option<String>,

    /// The revision number of the resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "REVISION_NUMBER", wide)]
    pub revision_number: Option<i32>,

    /// Defines whether the network may be used for creation of floating IPs.
    /// Only networks with this flag may be an external gateway for routers.
    /// The network must have an external routing facility that is not managed
    /// by the networking service. If the network is updated from external to
    /// internal the unused floating IPs of this network are automatically
    /// deleted when extension `floatingip-autodelete-internal` is present.
    ///
    #[serde(default, rename = "router:external")]
    #[structable(optional, title = "ROUTER:EXTERNAL", wide)]
    pub router_external: Option<BoolString>,

    /// A list of provider `segment` objects.
    ///
    #[serde(default)]
    #[structable(optional, title = "SEGMENTS", wide)]
    pub segments: Option<Value>,

    /// Indicates whether this network is shared across all tenants. By
    /// default, only administrative users can change this value.
    ///
    #[serde(default)]
    #[structable(optional, title = "SHARED", wide)]
    pub shared: Option<BoolString>,

    /// The network status. Values are `ACTIVE`, `DOWN`, `BUILD` or `ERROR`.
    ///
    #[serde(default)]
    #[structable(optional, title = "STATUS")]
    pub status: Option<String>,

    /// The associated subnets.
    ///
    #[serde(default)]
    #[structable(optional, title = "SUBNETS", wide)]
    pub subnets: Option<Value>,

    /// The list of tags on the resource.
    ///
    #[serde(default)]
    #[structable(optional, title = "TAGS", wide)]
    pub tags: Option<Value>,

    /// The ID of the project.
    ///
    #[serde(default)]
    #[structable(optional, title = "TENANT_ID", wide)]
    pub tenant_id: Option<String>,

    /// Time at which the resource has been updated (in UTC ISO8601 format).
    ///
    #[serde(default)]
    #[structable(optional, title = "UPDATED_AT")]
    pub updated_at: Option<String>,
}

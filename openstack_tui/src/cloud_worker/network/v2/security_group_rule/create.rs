// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
use derive_builder::Builder;
use eyre::{Report, Result, WrapErr, eyre};
use serde::{Deserialize, Serialize};
use std::fmt;
use tokio::sync::mpsc::UnboundedSender;

use crate::action::Action;
use crate::cloud_worker::common::CloudWorkerError;
use crate::cloud_worker::types::{ApiRequest, ExecuteApiRequest};

use openstack_sdk::api::network::v2::security_group_rule::create::RequestBuilder;
use openstack_sdk::{AsyncOpenStack, api::QueryAsync};

#[derive(Builder, Clone, Debug, Default, Deserialize, PartialEq, Eq, Serialize)]
#[builder(setter(strip_option))]
pub struct NetworkSecurityGroupRuleCreate {
    /// A `security_group_rule` object.
    security_group_rule: SecurityGroupRule,
}

#[derive(Clone, Debug, Deserialize, Eq, Ord, PartialEq, PartialOrd, Serialize)]
pub enum Direction {
    #[serde(rename = "egress")]
    Egress,
    #[serde(rename = "ingress")]
    Ingress,
}

impl TryFrom<String> for Direction {
    type Error = Report;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        match value.as_str() {
            "egress" => Ok(Self::Egress),
            "ingress" => Ok(Self::Ingress),
            other => Err(eyre!("'{}' is not a valid Direction", other)),
        }
    }
}

impl From<Direction> for openstack_sdk::api::network::v2::security_group_rule::create::Direction {
    fn from(value: Direction) -> Self {
        match value {
            Direction::Egress => Self::Egress,
            Direction::Ingress => Self::Ingress,
        }
    }
}

#[derive(Clone, Debug, Deserialize, Eq, Ord, PartialEq, PartialOrd, Serialize)]
pub enum Ethertype {
    #[serde(rename = "IPv4")]
    Ipv4,
    #[serde(rename = "IPv6")]
    Ipv6,
}

impl TryFrom<String> for Ethertype {
    type Error = Report;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        match value.as_str() {
            "IPv4" => Ok(Self::Ipv4),
            "IPv6" => Ok(Self::Ipv6),
            other => Err(eyre!("'{}' is not a valid Ethertype", other)),
        }
    }
}

impl From<Ethertype> for openstack_sdk::api::network::v2::security_group_rule::create::Ethertype {
    fn from(value: Ethertype) -> Self {
        match value {
            Ethertype::Ipv4 => Self::Ipv4,
            Ethertype::Ipv6 => Self::Ipv6,
        }
    }
}

/// SecurityGroupRule data
#[derive(Builder, Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
#[builder(setter(strip_option))]
pub struct SecurityGroupRule {
    /// A human-readable description for the resource. Default is an empty
    /// string.
    #[builder(default, setter(into))]
    pub description: Option<String>,

    /// Ingress or egress, which is the direction in which the security group
    /// rule is applied.
    #[builder(default)]
    pub direction: Option<Direction>,

    /// Must be IPv4 or IPv6, and addresses represented in CIDR must match the
    /// ingress or egress rules.
    #[builder(default)]
    pub ethertype: Option<Ethertype>,

    /// The maximum port number in the range that is matched by the security
    /// group rule. If the protocol is TCP, UDP, DCCP, SCTP or UDP-Lite this
    /// value must be greater than or equal to the `port_range_min` attribute
    /// value. If the protocol is ICMP, this value must be an ICMP code.
    #[builder(default, setter(into))]
    pub port_range_max: Option<Option<i32>>,

    /// The minimum port number in the range that is matched by the security
    /// group rule. If the protocol is TCP, UDP, DCCP, SCTP or UDP-Lite this
    /// value must be less than or equal to the `port_range_max` attribute
    /// value. If the protocol is ICMP, this value must be an ICMP type.
    #[builder(default, setter(into))]
    pub port_range_min: Option<Option<i32>>,

    /// The IP protocol can be represented by a string, an integer, or `null`.
    /// Valid string or integer values are `any` or `0`, `ah` or `51`, `dccp`
    /// or `33`, `egp` or `8`, `esp` or `50`, `gre` or `47`, `icmp` or `1`,
    /// `icmpv6` or `58`, `igmp` or `2`, `ipip` or `4`, `ipv6-encap` or `41`,
    /// `ipv6-frag` or `44`, `ipv6-icmp` or `58`, `ipv6-nonxt` or `59`,
    /// `ipv6-opts` or `60`, `ipv6-route` or `43`, `ospf` or `89`, `pgm` or
    /// `113`, `rsvp` or `46`, `sctp` or `132`, `tcp` or `6`, `udp` or `17`,
    /// `udplite` or `136`, `vrrp` or `112`. Additionally, any integer value
    /// between [0-255] is also valid. The string `any` (or integer `0`) means
    /// `all` IP protocols. See the constants in `neutron_lib.constants` for
    /// the most up-to-date list of supported strings.
    #[builder(default, setter(into))]
    pub protocol: Option<String>,

    #[builder(default, setter(into))]
    pub remote_address_group_id: Option<String>,

    /// The remote group UUID to associate with this security group rule. You
    /// can specify either the `remote_group_id` or `remote_ip_prefix`
    /// attribute in the request body.
    #[builder(default, setter(into))]
    pub remote_group_id: Option<String>,

    /// The remote IP prefix that is matched by this security group rule.
    #[builder(default, setter(into))]
    pub remote_ip_prefix: Option<String>,

    /// The security group ID to associate with this security group rule.
    #[builder(default, setter(into))]
    pub security_group_id: Option<String>,

    #[builder(default, setter(into))]
    pub tenant_id: Option<String>,
}

impl TryFrom<&SecurityGroupRule>
    for openstack_sdk::api::network::v2::security_group_rule::create::SecurityGroupRuleBuilder<'_>
{
    type Error = Report;
    fn try_from(value: &SecurityGroupRule) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        if let Some(val) = &value.description {
            ep_builder.description(val.clone());
        }
        if let Some(val) = &value.direction {
            ep_builder.direction(val.clone().into());
        }
        if let Some(val) = &value.ethertype {
            ep_builder.ethertype(val.clone().into());
        }
        if let Some(val) = &value.port_range_max {
            ep_builder.port_range_max(*val);
        }
        if let Some(val) = &value.port_range_min {
            ep_builder.port_range_min(*val);
        }
        if let Some(val) = &value.protocol {
            ep_builder.protocol(val.clone());
        }
        if let Some(val) = &value.remote_address_group_id {
            ep_builder.remote_address_group_id(val.clone());
        }
        if let Some(val) = &value.remote_group_id {
            ep_builder.remote_group_id(val.clone());
        }
        if let Some(val) = &value.remote_ip_prefix {
            ep_builder.remote_ip_prefix(val.clone());
        }
        if let Some(val) = &value.security_group_id {
            ep_builder.security_group_id(val.clone());
        }
        if let Some(val) = &value.tenant_id {
            ep_builder.tenant_id(val.clone());
        }
        Ok(ep_builder)
    }
}
impl TryFrom<&SecurityGroupRule>
    for openstack_sdk::api::network::v2::security_group_rule::create::SecurityGroupRule<'_>
{
    type Error = Report;
    fn try_from(value: &SecurityGroupRule) -> Result<Self, Self::Error> {
        let ep_builder: openstack_sdk::api::network::v2::security_group_rule::create::SecurityGroupRuleBuilder = TryFrom::try_from(value)?;
        ep_builder
            .build()
            .wrap_err("cannot prepare request element `SecurityGroupRule`")
    }
}

impl fmt::Display for NetworkSecurityGroupRuleCreate {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let parts: Vec<String> = Vec::new();
        write!(f, "{}", parts.join(","))
    }
}

impl TryFrom<&NetworkSecurityGroupRuleCreate> for RequestBuilder<'_> {
    type Error = Report;
    fn try_from(value: &NetworkSecurityGroupRuleCreate) -> Result<Self, Self::Error> {
        let mut ep_builder = Self::default();
        ep_builder.security_group_rule(TryInto::<
            openstack_sdk::api::network::v2::security_group_rule::create::SecurityGroupRule,
        >::try_into(&value.security_group_rule)?);

        Ok(ep_builder)
    }
}

impl ExecuteApiRequest for NetworkSecurityGroupRuleCreate {
    async fn execute_request(
        &self,
        session: &mut AsyncOpenStack,
        request: &ApiRequest,
        app_tx: &UnboundedSender<Action>,
    ) -> Result<(), CloudWorkerError> {
        let ep = TryInto::<RequestBuilder>::try_into(self)?
            .build()
            .wrap_err("Cannot prepare request")?;
        app_tx.send(Action::ApiResponseData {
            request: request.clone(),
            data: ep.query_async(session).await?,
        })?;
        Ok(())
    }
}

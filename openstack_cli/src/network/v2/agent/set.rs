// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set Agent command
//!
//! Wraps invoking of the `v2.0/agents/{id}` with `PUT` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use crate::common::BoolString;
use openstack_sdk::api::network::v2::agent::set;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Updates an agent.
///
/// Normal response codes: 200
///
/// Error response codes: 400, 401, 403, 404
///
#[derive(Args)]
#[command(about = "Update agent")]
pub struct AgentCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    agent: Agent,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.0/agents/{id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Agent Body data
#[derive(Args, Clone)]
struct Agent {
    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`). Default is `true`.
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    admin_state_up: Option<bool>,

    /// A human-readable description for the resource. Default is an empty
    /// string.
    ///
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,
}

/// Agent response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`).
    ///
    #[serde()]
    #[structable(optional)]
    admin_state_up: Option<BoolString>,

    /// The type of agent such as `Open vSwitch agent` or `DHCP agent`.
    ///
    #[serde()]
    #[structable(optional)]
    agent_type: Option<String>,

    /// Indicates the agent is alive and running.
    ///
    #[serde()]
    #[structable(optional)]
    alive: Option<bool>,

    /// The availability zone of the agent.
    ///
    #[serde()]
    #[structable(optional)]
    availability_zone: Option<String>,

    /// The executable command used to start the agent such as
    /// `neutron-openvswitch-agent` or `neutron-dhcp-agent`.
    ///
    #[serde()]
    #[structable(optional)]
    binary: Option<String>,

    /// An object containing configuration specific key/value pairs; the
    /// semantics of which are determined by the binary name and type.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    configurations: Option<Value>,

    /// Time at which the resource has been created (in UTC ISO8601 format).
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// Time at which the last heartbeat was received.
    ///
    #[serde()]
    #[structable(optional)]
    heartbeat_timestamp: Option<String>,

    /// The hostname of the system the agent is running on.
    ///
    #[serde()]
    #[structable(optional)]
    host: Option<String>,

    /// The ID of the resource.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The value `null` means no resource view synchronization to Placement
    /// was attempted. `true` / `false` values signify the success of the last
    /// synchronization attempt. Therefore the relevant resources in Placement
    /// can only be considered up to date if this attribute is `true`. This
    /// attribute is read-only, it is only supposed to be updated internally,
    /// but it is readable for debugging purposes. Not all agent types track
    /// resources via Placement, therefore the value `null` does not
    /// necessarily means there is an error in the system.
    ///
    #[serde()]
    #[structable(optional)]
    resources_synced: Option<String>,

    /// Time at which the agent was started.
    ///
    #[serde()]
    #[structable(optional)]
    started_at: Option<String>,

    /// The name of AMQP topic the agent is listening on such as `dhcp_agent`.
    /// A special value of `N/A` is used when the agent doesnâ€™t use an AMQP
    /// topic.
    ///
    #[serde()]
    #[structable(optional)]
    topic: Option<String>,
}

impl AgentCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set Agent");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = set::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.agent data
        let args = &self.agent;
        let mut agent_builder = set::AgentBuilder::default();
        if let Some(val) = &args.admin_state_up {
            agent_builder.admin_state_up(*val);
        }

        if let Some(val) = &args.description {
            agent_builder.description(Some(val.into()));
        }

        ep_builder.agent(agent_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

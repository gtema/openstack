// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List MinimumBandwidthRules command
//!
//! Wraps invoking of the `v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::network::v2::qos::policy::minimum_bandwidth_rule::list;
use openstack_sdk::api::QueryAsync;
use structable_derive::StructTable;

/// Lists all minimum bandwidth rules for a QoS policy.
///
/// The list might be empty.
///
/// Standard query parameters are supported on the URI. For more information,
/// see [Filtering and Column Selection](#filtering).
///
/// Use the `fields` query parameter to control which fields are returned in
/// the response body. For more information, see [Fields](#fields).
///
/// Pagination query parameters are supported if Neutron configuration supports
/// it by overriding `allow_pagination=false`. For more information, see
/// [Pagination](#pagination).
///
/// Sorting query parameters are supported if Neutron configuration supports it
/// with `allow_sorting=true`. For more information, see [Sorting](#sorting).
///
/// Normal response codes: 200
///
/// Error response codes: 401, 404
///
#[derive(Args)]
#[command(about = "List minimum bandwidth rules for QoS policy")]
pub struct MinimumBandwidthRulesCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    /// direction query parameter for
    /// /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
    ///
    #[arg(help_heading = "Query parameters", long, value_parser = ["egress","ingress"])]
    direction: Option<String>,

    /// id query parameter for
    /// /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    id: Option<String>,

    /// min_kbps query parameter for
    /// /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    min_kbps: Option<f32>,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// policy_id parameter for
    /// /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_policy_id",
        value_name = "POLICY_ID"
    )]
    policy_id: String,
}
/// MinimumBandwidthRules response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The direction of the traffic to which the QoS rule is applied, as seen
    /// from the point of view of the `port`. Valid values are `egress` and
    /// `ingress`. Default value is `egress`.
    ///
    #[serde()]
    #[structable(optional, wide)]
    direction: Option<String>,

    /// The ID of the QoS minimum bandwidth rule.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The minimum KBPS (kilobits per second) value which should be available
    /// for port.
    ///
    #[serde()]
    #[structable(optional, wide)]
    min_kbps: Option<f32>,
}

impl MinimumBandwidthRulesCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List MinimumBandwidthRules");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        ep_builder.policy_id(&self.path.policy_id);
        // Set query parameters
        if let Some(val) = &self.query.id {
            ep_builder.id(val);
        }
        if let Some(val) = &self.query.min_kbps {
            ep_builder.min_kbps(*val);
        }
        if let Some(val) = &self.query.direction {
            ep_builder.direction(val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = ep.query_async(client).await?;

        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

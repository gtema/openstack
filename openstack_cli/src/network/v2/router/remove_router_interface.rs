// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action Router command
//!
//! Wraps invoking of the `v2.0/routers/{id}/remove_router_interface` with `PUT` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::network::v2::router::remove_router_interface;
use openstack_types::network::v2::router::response::remove_router_interface::RouterResponse;

/// Request body
#[derive(Args)]
#[command(about = "Remove interface from router")]
pub struct RouterCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The ID of the port. One of subnet_id or port_id must be specified.
    #[arg(help_heading = "Body parameters", long)]
    port_id: Option<String>,

    /// The ID of the subnet. One of subnet_id or port_id must be specified.
    #[arg(help_heading = "Body parameters", long)]
    subnet_id: Option<String>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.0/routers/{id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

impl RouterCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action Router");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("network.router"),
            Some("remove_router_interface"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = remove_router_interface::Request::builder();

        ep_builder.id(&self.path.id);

        // Set body parameters
        // Set Request.port_id data
        if let Some(arg) = &self.port_id {
            ep_builder.port_id(arg);
        }

        // Set Request.subnet_id data
        if let Some(arg) = &self.subnet_id {
            ep_builder.subnet_id(arg);
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<RouterResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

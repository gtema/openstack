// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set ServiceProfile command
//!
//! Wraps invoking of the `v2.0/service_profiles/{id}` with `PUT` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::network::v2::service_profile::set;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::types::BoolString;
use structable_derive::StructTable;

/// Updates a service profile.
///
/// Normal response codes: 200
///
/// Error response codes: 400, 401, 403, 404
///
#[derive(Args)]
#[command(about = "Update service profile")]
pub struct ServiceProfileCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `service_profile` object.
    ///
    #[command(flatten)]
    service_profile: ServiceProfile,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// ServiceProfile Body data
#[derive(Args, Clone)]
struct ServiceProfile {
    /// The human-readable description for the service profile.
    ///
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Provider driver to use for this profile.
    ///
    #[arg(help_heading = "Body parameters", long)]
    driver: Option<String>,

    /// Indicates whether this service profile is enabled or not. Default is
    /// `true`.
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    enabled: Option<Option<bool>>,

    /// JSON-formatted meta information of the service profile.
    ///
    #[arg(help_heading = "Body parameters", long)]
    metainfo: Option<String>,
}

/// ServiceProfile response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The human-readable description for the service profile.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// Provider driver to use for this profile.
    ///
    #[serde()]
    #[structable(optional)]
    driver: Option<String>,

    /// Indicates whether this service profile is enabled or not. Default is
    /// `true`.
    ///
    #[serde()]
    #[structable(optional)]
    enabled: Option<BoolString>,

    /// The UUID of the service profile.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// JSON-formatted meta information of the service profile.
    ///
    #[serde()]
    #[structable(optional)]
    metainfo: Option<String>,
}

impl ServiceProfileCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set ServiceProfile");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = set::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.service_profile data
        let args = &self.service_profile;
        let mut service_profile_builder = set::ServiceProfileBuilder::default();
        if let Some(val) = &args.description {
            service_profile_builder.description(Some(val.into()));
        }

        if let Some(val) = &args.driver {
            service_profile_builder.driver(val);
        }

        if let Some(val) = &args.metainfo {
            service_profile_builder.metainfo(val);
        }

        if let Some(val) = &args.enabled {
            service_profile_builder.enabled(*val);
        }

        ep_builder.service_profile(service_profile_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create ServiceProfile command
//!
//! Wraps invoking of the `v2.0/service_profiles` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::network::v2::service_profile::create;
use openstack_types::network::v2::service_profile::response::create::ServiceProfileResponse;

/// Creates a service profile.
///
/// This operation establishes a new service profile that can be associated
/// with one or more flavors.
///
/// Either metadata or a driver is required.
///
/// If a driver is specified but does not exist, call will return a
/// `Not found 404` error with the response body explaining that the driver
/// could not be found.
///
/// Creation currently limited to administrators. Other users will receive a
/// `Forbidden 403` response code with a response body NeutronError message
/// expressing that creation is disallowed by policy.
///
/// If the API cannot fulfill the request due to insufficient data or data that
/// is not valid, the service returns the HTTP `Bad Request (400)` response
/// code with information about the failure in the response body. Validation
/// errors require that you correct the error and submit the request again.
///
/// Normal response codes: 201
///
/// Error response codes: 400, 401, 403, 404
#[derive(Args)]
#[command(about = "Create service profile")]
pub struct ServiceProfileCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `service_profile` object.
    #[command(flatten)]
    service_profile: ServiceProfile,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// ServiceProfile Body data
#[derive(Args, Clone)]
struct ServiceProfile {
    /// The human-readable description for the service profile.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Set explicit NULL for the description
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "description")]
    no_description: bool,

    /// Provider driver to use for this profile.
    #[arg(help_heading = "Body parameters", long)]
    driver: Option<String>,

    /// Indicates whether this service profile is enabled or not. Default is
    /// `true`.
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    enabled: Option<Option<bool>>,

    /// JSON-formatted meta information of the service profile.
    #[arg(help_heading = "Body parameters", long)]
    metainfo: Option<String>,
}

impl ServiceProfileCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create ServiceProfile");

        let op =
            OutputProcessor::from_args_with_resource_key(parsed_args, "network.service_profile");
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.service_profile data
        let args = &self.service_profile;
        let mut service_profile_builder = create::ServiceProfileBuilder::default();
        if let Some(val) = &args.description {
            service_profile_builder.description(Some(val.into()));
        } else if args.no_description {
            service_profile_builder.description(None);
        }

        if let Some(val) = &args.driver {
            service_profile_builder.driver(val);
        }

        if let Some(val) = &args.metainfo {
            service_profile_builder.metainfo(val);
        }

        if let Some(val) = &args.enabled {
            service_profile_builder.enabled(*val);
        }

        ep_builder.service_profile(service_profile_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ServiceProfileResponse>(data)?;
        Ok(())
    }
}

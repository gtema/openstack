// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Get Details command
//!
//! Wraps invoking of the `v2.0/quotas/{id}/details` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::network::v2::quota::details::get;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Command without description in OpenAPI
///
#[derive(Args)]
pub struct DetailsCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.0/quotas/{id}/details API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Details response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The number of floating IP addresses allowed for each project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    floatingip: Option<Value>,

    /// The number of networks allowed for each project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    network: Option<Value>,

    /// The number of ports allowed for each project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    port: Option<Value>,

    /// The number of role-based access control (RBAC) policies for each
    /// project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    rbac_policy: Option<Value>,

    /// The number of routers allowed for each project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    router: Option<Value>,

    /// The number of security groups allowed for each project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    security_group: Option<Value>,

    /// The number of security group rules allowed for each project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    security_group_rule: Option<Value>,

    /// The number of subnets allowed for each project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    subnet: Option<Value>,

    /// The number of subnet pools allowed for each project.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    subnetpool: Option<Value>,
}

impl DetailsCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Get Details");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = get::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

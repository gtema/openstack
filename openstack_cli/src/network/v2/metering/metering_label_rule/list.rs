// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List MeteringLabelRules command
//!
//! Wraps invoking of the `v2.0/metering/metering-label-rules` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use crate::common::BoolString;
use openstack_sdk::api::network::v2::metering::metering_label_rule::list;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::{paged, Pagination};
use structable_derive::StructTable;

/// Lists a summary of all L3 metering label rules that belong to the project.
///
/// The list shows the ID for each metering label rule.
///
/// Standard query parameters are supported on the URI. For more information,
/// see [Filtering and Column Selection](#filtering).
///
/// Use the `fields` query parameter to control which fields are returned in
/// the response body. For more information, see [Fields](#fields).
///
/// Pagination query parameters are supported if Neutron configuration supports
/// it by overriding `allow_pagination=false`. For more information, see
/// [Pagination](#pagination).
///
/// Sorting query parameters are supported if Neutron configuration supports it
/// with `allow_sorting=true`. For more information, see [Sorting](#sorting).
///
/// Normal response codes: 200
///
/// Error response codes: 401
///
#[derive(Args)]
#[command(about = "List metering label rules")]
pub struct MeteringLabelRulesCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Total limit of entities count to return. Use this when there are too many entries.
    #[arg(long, default_value_t = 10000)]
    max_items: usize,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    /// The destination IP prefix that the metering rule is associated with; in
    /// this context, destination IP prefix represents the destination IP of
    /// the network packet. Therefore, for an ingress rule, the destination IP
    /// is the internal IP associated with some OpenStack VM. On the other
    /// hand, for an egress rule, the destination IP prefix is the IP of some
    /// external system that an application running inside some OpenStack
    /// virtual machine is trying to access. Moreover, instead of an IP, one
    /// can also use a CIDR as the destination IP prefix.
    ///
    #[arg(help_heading = "Query parameters", long)]
    destination_ip_prefix: Option<String>,

    /// direction query parameter for /v2.0/metering/metering-label-rules API
    ///
    #[arg(help_heading = "Query parameters", long, value_parser = ["egress","ingress"])]
    direction: Option<String>,

    /// excluded query parameter for /v2.0/metering/metering-label-rules API
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    excluded: Option<bool>,

    /// id query parameter for /v2.0/metering/metering-label-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    id: Option<String>,

    /// Requests a page size of items. Returns a number of items up to a limit
    /// value. Use the limit parameter to make an initial limited request and
    /// use the ID of the last-seen item from the response as the marker
    /// parameter value in a subsequent limited request.
    ///
    #[arg(help_heading = "Query parameters", long)]
    limit: Option<i32>,

    /// The ID of the last-seen item. Use the limit parameter to make an
    /// initial limited request and use the ID of the last-seen item from the
    /// response as the marker parameter value in a subsequent limited request.
    ///
    #[arg(help_heading = "Query parameters", long)]
    marker: Option<String>,

    /// metering_label_id query parameter for
    /// /v2.0/metering/metering-label-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    metering_label_id: Option<String>,

    /// Reverse the page direction
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    page_reverse: Option<bool>,

    /// remote_ip_prefix query parameter for
    /// /v2.0/metering/metering-label-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    remote_ip_prefix: Option<String>,

    /// Sort direction. This is an optional feature and may be silently ignored
    /// by the server.
    ///
    #[arg(help_heading = "Query parameters", long, value_parser = ["asc","desc"])]
    sort_dir: Option<String>,

    /// Sort results by the attribute. This is an optional feature and may be
    /// silently ignored by the server.
    ///
    #[arg(help_heading = "Query parameters", long)]
    sort_key: Option<String>,

    /// The source IP prefix that the metering rule is associated with; in this
    /// context, source IP prefix represents the source IP of the network
    /// packet. Therefore, for an ingress rule, the source IP is the IP of the
    /// system accessing something inside OpenStack. On the other hand, for an
    /// egress rule, the source IP is the internal IP associated with some
    /// OpenStack VM. Moreover, instead of an IP, one can also use a CIDR as
    /// the source IP prefix.
    ///
    #[arg(help_heading = "Query parameters", long)]
    source_ip_prefix: Option<String>,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// MeteringLabelRules response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    #[serde()]
    #[structable(optional, wide)]
    destination_ip_prefix: Option<String>,

    /// Ingress or egress, which is the direction in which the metering rule is
    /// applied.
    ///
    #[serde()]
    #[structable(optional, wide)]
    direction: Option<String>,

    /// Indicates whether to count the traffic of a specific IP address with
    /// the `remote_ip_prefix`, `source_ip_prefix`, or `destination_ip_prefix`
    /// values.
    ///
    #[serde()]
    #[structable(optional, wide)]
    excluded: Option<BoolString>,

    /// The ID of the metering label rule.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The metering label ID associated with this metering rule.
    ///
    #[serde()]
    #[structable(optional, wide)]
    metering_label_id: Option<String>,

    /// (deprecated) The source IP prefix that is matched by this metering
    /// rule. By source IP prefix, one should read the internal/private IPs
    /// used in OpenStack.
    ///
    #[serde()]
    #[structable(optional, wide)]
    remote_ip_prefix: Option<String>,

    #[serde()]
    #[structable(optional, wide)]
    source_ip_prefix: Option<String>,

    #[serde()]
    #[structable(optional, wide)]
    tenant_id: Option<String>,
}

impl MeteringLabelRulesCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List MeteringLabelRules");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        // Set query parameters
        if let Some(val) = &self.query.id {
            ep_builder.id(val);
        }
        if let Some(val) = &self.query.metering_label_id {
            ep_builder.metering_label_id(val);
        }
        if let Some(val) = &self.query.direction {
            ep_builder.direction(val);
        }
        if let Some(val) = &self.query.excluded {
            ep_builder.excluded(*val);
        }
        if let Some(val) = &self.query.remote_ip_prefix {
            ep_builder.remote_ip_prefix(val);
        }
        if let Some(val) = &self.query.source_ip_prefix {
            ep_builder.source_ip_prefix(val);
        }
        if let Some(val) = &self.query.destination_ip_prefix {
            ep_builder.destination_ip_prefix(val);
        }
        if let Some(val) = &self.query.sort_key {
            ep_builder.sort_key(val);
        }
        if let Some(val) = &self.query.sort_dir {
            ep_builder.sort_dir(val);
        }
        if let Some(val) = &self.query.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &self.query.marker {
            ep_builder.marker(val);
        }
        if let Some(val) = &self.query.page_reverse {
            ep_builder.page_reverse(*val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = paged(ep, Pagination::Limit(self.max_items))
            .query_async(client)
            .await?;

        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

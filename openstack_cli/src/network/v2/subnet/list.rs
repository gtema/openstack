// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List Subnets command
//!
//! Wraps invoking of the `v2.0/subnets` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use anyhow::Result;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use crate::common::BoolString;
use openstack_sdk::api::network::v2::subnet::list;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Lists subnets that the project has access to.
///
/// Default policy settings return only subnets owned by the project of the
/// user submitting the request, unless the user has administrative role. You
/// can control which attributes are returned by using the fields query
/// parameter. You can filter results by using query string parameters.
///
/// Use the `fields` query parameter to control which fields are returned in
/// the response body. Additionally, you can filter results by using query
/// string parameters. For information, see
/// [Filtering and Column Selection](https://wiki.openstack.org/wiki/Neutron/APIv2-specification#Filtering_and_Column_Selection).
///
/// Normal response codes: 200
///
/// Error response codes: 401
///
#[derive(Args)]
#[command(about = "List subnets")]
pub struct SubnetsCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    /// cidr query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    cidr: Option<String>,

    /// description query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    description: Option<String>,

    /// enable_dhcp query parameter for /v2.0/subnets API
    ///
    #[arg(action=clap::ArgAction::Set, long)]
    enable_dhcp: Option<bool>,

    /// gateway_ip query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    gateway_ip: Option<String>,

    /// id query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    id: Option<String>,

    /// ip_version query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    ip_version: Option<i32>,

    /// ipv6_address_mode query parameter for /v2.0/subnets API
    ///
    #[arg(long, value_parser = ["dhcpv6-stateful","dhcpv6-stateless","slaac"])]
    ipv6_address_mode: Option<String>,

    /// ipv6_ra_mode query parameter for /v2.0/subnets API
    ///
    #[arg(long, value_parser = ["dhcpv6-stateful","dhcpv6-stateless","slaac"])]
    ipv6_ra_mode: Option<String>,

    /// name query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    name: Option<String>,

    /// network_id query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    network_id: Option<String>,

    /// not-tags query parameter for /v2.0/subnets API
    ///
    #[arg(action=clap::ArgAction::Append, long)]
    not_tags: Option<Vec<String>>,

    /// not-tags-any query parameter for /v2.0/subnets API
    ///
    #[arg(action=clap::ArgAction::Append, long)]
    not_tags_any: Option<Vec<String>>,

    /// revision_number query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    revision_number: Option<String>,

    /// segment_id query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    segment_id: Option<String>,

    /// shared query parameter for /v2.0/subnets API
    ///
    #[arg(action=clap::ArgAction::Set, long)]
    shared: Option<bool>,

    /// subnetpool_id query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    subnetpool_id: Option<String>,

    /// tags query parameter for /v2.0/subnets API
    ///
    #[arg(action=clap::ArgAction::Append, long)]
    tags: Option<Vec<String>>,

    /// tags-any query parameter for /v2.0/subnets API
    ///
    #[arg(action=clap::ArgAction::Append, long)]
    tags_any: Option<Vec<String>>,

    /// tenant_id query parameter for /v2.0/subnets API
    ///
    #[arg(long)]
    tenant_id: Option<String>,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Subnets response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// Allocation pools with `start` and `end` IP addresses for this subnet.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    allocation_pools: Option<Value>,

    /// The CIDR of the subnet.
    ///
    #[serde()]
    #[structable(optional, wide)]
    cidr: Option<String>,

    /// Time at which the resource has been created (in UTC ISO8601 format).
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[serde()]
    #[structable(optional, wide)]
    description: Option<String>,

    /// List of dns name servers associated with the subnet.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    dns_nameservers: Option<Value>,

    /// Whether to publish DNS records for IPs from this subnet.
    ///
    #[serde()]
    #[structable(optional, wide)]
    dns_publish_fixed_ip: Option<BoolString>,

    /// Indicates whether dhcp is enabled or disabled for the subnet.
    ///
    #[serde()]
    #[structable(optional, wide)]
    enable_dhcp: Option<BoolString>,

    /// Gateway IP of this subnet. If the value is `null` that implies no
    /// gateway is associated with the subnet.
    ///
    #[serde()]
    #[structable(optional, wide)]
    gateway_ip: Option<String>,

    /// Additional routes for the subnet. A list of dictionaries with
    /// `destination` and `nexthop` parameters.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    host_routes: Option<Value>,

    /// The ID of the subnet.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The IP protocol version. Value is `4` or `6`.
    ///
    #[serde()]
    #[structable(optional, wide)]
    ip_version: Option<i32>,

    /// The IPv6 address modes specifies mechanisms for assigning IP addresses.
    /// Value is `slaac`, `dhcpv6-stateful`, `dhcpv6-stateless` or `null`.
    ///
    #[serde()]
    #[structable(optional, wide)]
    ipv6_address_mode: Option<String>,

    /// The IPv6 router advertisement specifies whether the networking service
    /// should transmit ICMPv6 packets, for a subnet. Value is `slaac`,
    /// `dhcpv6-stateful`, `dhcpv6-stateless` or `null`.
    ///
    #[serde()]
    #[structable(optional, wide)]
    ipv6_ra_mode: Option<String>,

    /// Human-readable name of the resource.
    ///
    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    /// The ID of the network to which the subnet belongs.
    ///
    #[serde()]
    #[structable(optional, wide)]
    network_id: Option<String>,

    /// The revision number of the resource.
    ///
    #[serde()]
    #[structable(optional, wide)]
    revision_number: Option<i32>,

    /// The ID of a network segment the subnet is associated with. It is
    /// available when `segment` extension is enabled.
    ///
    #[serde()]
    #[structable(optional, wide)]
    segment_id: Option<String>,

    /// The service types associated with the subnet.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    service_types: Option<Value>,

    /// The ID of the subnet pool associated with the subnet.
    ///
    #[serde()]
    #[structable(optional, wide)]
    subnetpool_id: Option<String>,

    /// The list of tags on the resource.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    tags: Option<Value>,

    /// The ID of the project.
    ///
    #[serde()]
    #[structable(optional, wide)]
    tenant_id: Option<String>,

    /// Time at which the resource has been updated (in UTC ISO8601 format).
    ///
    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,
}

impl SubnetsCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List Subnets");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        // Set query parameters
        if let Some(val) = &self.query.id {
            ep_builder.id(val);
        }
        if let Some(val) = &self.query.name {
            ep_builder.name(val);
        }
        if let Some(val) = &self.query.ip_version {
            ep_builder.ip_version(*val);
        }
        if let Some(val) = &self.query.network_id {
            ep_builder.network_id(val);
        }
        if let Some(val) = &self.query.subnetpool_id {
            ep_builder.subnetpool_id(val);
        }
        if let Some(val) = &self.query.cidr {
            ep_builder.cidr(val);
        }
        if let Some(val) = &self.query.gateway_ip {
            ep_builder.gateway_ip(val);
        }
        if let Some(val) = &self.query.tenant_id {
            ep_builder.tenant_id(val);
        }
        if let Some(val) = &self.query.enable_dhcp {
            ep_builder.enable_dhcp(*val);
        }
        if let Some(val) = &self.query.ipv6_ra_mode {
            ep_builder.ipv6_ra_mode(val);
        }
        if let Some(val) = &self.query.ipv6_address_mode {
            ep_builder.ipv6_address_mode(val);
        }
        if let Some(val) = &self.query.shared {
            ep_builder.shared(*val);
        }
        if let Some(val) = &self.query.revision_number {
            ep_builder.revision_number(val);
        }
        if let Some(val) = &self.query.tags {
            ep_builder.tags(val.iter());
        }
        if let Some(val) = &self.query.tags_any {
            ep_builder.tags_any(val.iter());
        }
        if let Some(val) = &self.query.not_tags {
            ep_builder.not_tags(val.iter());
        }
        if let Some(val) = &self.query.not_tags_any {
            ep_builder.not_tags_any(val.iter());
        }
        if let Some(val) = &self.query.description {
            ep_builder.description(val);
        }
        if let Some(val) = &self.query.segment_id {
            ep_builder.segment_id(val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = ep.query_async(client).await?;

        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

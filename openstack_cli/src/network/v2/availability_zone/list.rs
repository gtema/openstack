// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List AvailabilityZones command
//!
//! Wraps invoking of the `v2.0/availability_zones` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use anyhow::Result;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::network::v2::availability_zone::list;
use openstack_sdk::api::QueryAsync;
use structable_derive::StructTable;

/// Lists all availability zones.
///
/// Normal response codes: 200
///
/// Error response codes: 401
#[derive(Args)]
#[command(about = "List all availability zones")]
pub struct AvailabilityZonesCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
pub struct QueryParameters {
    /// name query parameter for /v2.0/availability_zones API
    #[arg(long)]
    name: Option<String>,

    /// resource query parameter for /v2.0/availability_zones API
    #[arg(long)]
    resource: Option<String>,

    /// state query parameter for /v2.0/availability_zones API
    #[arg(long)]
    state: Option<String>,
}

/// Path parameters
#[derive(Args)]
pub struct PathParameters {}
/// AvailabilityZones response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
pub struct ResponseData {
    /// Human-readable name of the resource.
    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    /// The resource type of the availability zone. The supported resource
    /// types
    /// are `network` and `router`.
    #[serde()]
    #[structable(optional)]
    resource: Option<String>,

    /// The state of the availability zone, which is either `available` or
    /// `unavailable`.
    #[serde()]
    #[structable(optional)]
    state: Option<String>,
}

impl AvailabilityZonesCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List AvailabilityZones");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        // Set query parameters
        if let Some(val) = &self.query.name {
            ep_builder.name(val.clone());
        }
        if let Some(val) = &self.query.resource {
            ep_builder.resource(val.clone());
        }
        if let Some(val) = &self.query.state {
            ep_builder.state(val.clone());
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = ep.query_async(client).await?;

        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

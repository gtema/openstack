// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create LocalIp command
//!
//! Wraps invoking of the `v2.0/local-ips` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::network::v2::local_ip::create;
use structable_derive::StructTable;

/// Command without description in OpenAPI
///
#[derive(Args)]
pub struct LocalIpCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    local_ip: LocalIp,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum IpMode {
    Passthrough,
    Translate,
}

/// LocalIp Body data
#[derive(Args, Clone)]
struct LocalIp {
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    ip_mode: Option<IpMode>,

    #[arg(help_heading = "Body parameters", long)]
    local_ip_address: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    local_port_id: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    network_id: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    project_id: Option<String>,
}

/// LocalIp response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    #[serde()]
    #[structable(optional)]
    ip_mode: Option<String>,

    #[serde()]
    #[structable(optional)]
    local_ip_address: Option<String>,

    #[serde()]
    #[structable(optional)]
    local_port_id: Option<String>,

    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    #[serde()]
    #[structable(optional)]
    network_id: Option<String>,

    #[serde()]
    #[structable(optional)]
    project_id: Option<String>,

    #[serde()]
    #[structable(optional)]
    revision_number: Option<i32>,

    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,
}

impl LocalIpCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create LocalIp");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.local_ip data
        let args = &self.local_ip;
        let mut local_ip_builder = create::LocalIpBuilder::default();
        if let Some(val) = &args.name {
            local_ip_builder.name(val);
        }

        if let Some(val) = &args.description {
            local_ip_builder.description(val);
        }

        if let Some(val) = &args.project_id {
            local_ip_builder.project_id(val);
        }

        if let Some(val) = &args.local_port_id {
            local_ip_builder.local_port_id(val);
        }

        if let Some(val) = &args.network_id {
            local_ip_builder.network_id(val);
        }

        if let Some(val) = &args.local_ip_address {
            local_ip_builder.local_ip_address(val);
        }

        if let Some(val) = &args.ip_mode {
            let tmp = match val {
                IpMode::Passthrough => create::IpMode::Passthrough,
                IpMode::Translate => create::IpMode::Translate,
            };
            local_ip_builder.ip_mode(tmp);
        }

        ep_builder.local_ip(local_ip_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

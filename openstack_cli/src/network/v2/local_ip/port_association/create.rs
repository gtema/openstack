// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create PortAssociation command
//!
//! Wraps invoking of the `v2.0/local_ips/{local_ip_id}/port_associations` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::network::v2::local_ip::port_association::create;
use openstack_types::network::v2::local_ip::port_association::response::create::PortAssociationResponse;

/// Creates a Local IP association with a given Port. If a Port has multiple
/// fixed IPs user must specify which IP to use for association.
///
/// The operation returns the `Conflict (409)` response code for one of
/// reasons:
///
/// Normal response codes: 201
///
/// Error response codes: 400, 401, 404, 409
#[derive(Args)]
#[command(about = "Create Local IP Association")]
pub struct PortAssociationCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    port_association: PortAssociation,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// local_ip_id parameter for
    /// /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_local_ip_id",
        value_name = "LOCAL_IP_ID"
    )]
    local_ip_id: String,
}
/// PortAssociation Body data
#[derive(Args, Clone)]
struct PortAssociation {
    /// The requested IP of the port associated with the Local IP.
    #[arg(help_heading = "Body parameters", long)]
    fixed_ip: Option<String>,

    /// Set explicit NULL for the fixed_ip
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "fixed_ip")]
    no_fixed_ip: bool,

    /// The requested ID of the port associated with the Local IP.
    #[arg(help_heading = "Body parameters", long)]
    fixed_port_id: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    project_id: Option<String>,
}

impl PortAssociationCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create PortAssociation");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("network.local_ip/port_association"),
            Some("create"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        ep_builder.local_ip_id(&self.path.local_ip_id);

        // Set body parameters
        // Set Request.port_association data
        let args = &self.port_association;
        let mut port_association_builder = create::PortAssociationBuilder::default();
        if let Some(val) = &args.fixed_ip {
            port_association_builder.fixed_ip(Some(val.into()));
        } else if args.no_fixed_ip {
            port_association_builder.fixed_ip(None);
        }

        if let Some(val) = &args.fixed_port_id {
            port_association_builder.fixed_port_id(val);
        }

        if let Some(val) = &args.project_id {
            port_association_builder.project_id(val);
        }

        ep_builder.port_association(port_association_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<PortAssociationResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List SecurityGroupRules command
//!
//! Wraps invoking of the `v2.0/security-group-rules` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::network::v2::security_group_rule::list;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::{paged, Pagination};
use openstack_sdk::types::BoolString;
use structable_derive::StructTable;

/// Lists a summary of all OpenStack Networking security group rules that the
/// project can access.
///
/// The list provides the ID for each security group rule.
///
/// Standard query parameters are supported on the URI. For more information,
/// see [Filtering and Column Selection](#filtering).
///
/// Use the `fields` query parameter to control which fields are returned in
/// the response body. For more information, see [Fields](#fields).
///
/// Pagination query parameters are supported if Neutron configuration supports
/// it by overriding `allow_pagination=false`. For more information, see
/// [Pagination](#pagination).
///
/// Sorting query parameters are supported if Neutron configuration supports it
/// with `allow_sorting=true`. For more information, see [Sorting](#sorting).
///
/// Normal response codes: 200
///
/// Error response codes: 401
///
#[derive(Args)]
#[command(about = "List security group rules")]
pub struct SecurityGroupRulesCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Total limit of entities count to return. Use this when there are too many entries.
    #[arg(long, default_value_t = 10000)]
    max_items: usize,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    /// belongs_to_default_sg query parameter for /v2.0/security-group-rules
    /// API
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    belongs_to_default_sg: Option<bool>,

    /// description query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    description: Option<String>,

    /// direction query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long, value_parser = ["egress","ingress"])]
    direction: Option<String>,

    /// ethertype query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long, value_parser = ["IPv4","IPv6"])]
    ethertype: Option<String>,

    /// id query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    id: Option<String>,

    /// Requests a page size of items. Returns a number of items up to a limit
    /// value. Use the limit parameter to make an initial limited request and
    /// use the ID of the last-seen item from the response as the marker
    /// parameter value in a subsequent limited request.
    ///
    #[arg(help_heading = "Query parameters", long)]
    limit: Option<i32>,

    /// The ID of the last-seen item. Use the limit parameter to make an
    /// initial limited request and use the ID of the last-seen item from the
    /// response as the marker parameter value in a subsequent limited request.
    ///
    #[arg(help_heading = "Query parameters", long)]
    marker: Option<String>,

    /// normalized_cidr query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    normalized_cidr: Option<String>,

    /// Reverse the page direction
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    page_reverse: Option<bool>,

    /// port_range_max query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    port_range_max: Option<i32>,

    /// port_range_min query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    port_range_min: Option<i32>,

    /// protocol query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    protocol: Option<String>,

    /// remote_address_group_id query parameter for /v2.0/security-group-rules
    /// API
    ///
    #[arg(help_heading = "Query parameters", long)]
    remote_address_group_id: Option<String>,

    /// remote_group_id query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    remote_group_id: Option<String>,

    /// remote_ip_prefix query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    remote_ip_prefix: Option<String>,

    /// revision_number query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    revision_number: Option<String>,

    /// security_group_id query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    security_group_id: Option<String>,

    /// Sort direction. This is an optional feature and may be silently ignored
    /// by the server.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Query parameters", long)]
    sort_dir: Option<Vec<String>>,

    /// Sort results by the attribute. This is an optional feature and may be
    /// silently ignored by the server.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Query parameters", long)]
    sort_key: Option<Vec<String>>,

    /// tenant_id query parameter for /v2.0/security-group-rules API
    ///
    #[arg(help_heading = "Query parameters", long)]
    tenant_id: Option<String>,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// SecurityGroupRules response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// Indicates if the security group rule belongs to the default security
    /// group of the project or not.
    ///
    #[serde()]
    #[structable(optional, wide)]
    belongs_to_default_sg: Option<BoolString>,

    /// Time at which the resource has been created (in UTC ISO8601 format).
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[serde()]
    #[structable(optional, wide)]
    description: Option<String>,

    /// Ingress or egress, which is the direction in which the security group
    /// rule is applied.
    ///
    #[serde()]
    #[structable(optional, wide)]
    direction: Option<String>,

    /// Must be IPv4 or IPv6, and addresses represented in CIDR must match the
    /// ingress or egress rules.
    ///
    #[serde()]
    #[structable(optional, wide)]
    ethertype: Option<String>,

    /// The ID of the security group rule.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    #[serde()]
    #[structable(optional, wide)]
    normalized_cidr: Option<String>,

    /// The maximum port number in the range that is matched by the security
    /// group rule. If the protocol is TCP, UDP, DCCP, SCTP or UDP-Lite this
    /// value must be greater than or equal to the `port_range_min` attribute
    /// value. If the protocol is ICMP, this value must be an ICMP code.
    ///
    #[serde()]
    #[structable(optional, wide)]
    port_range_max: Option<i32>,

    /// The minimum port number in the range that is matched by the security
    /// group rule. If the protocol is TCP, UDP, DCCP, SCTP or UDP-Lite this
    /// value must be less than or equal to the `port_range_max` attribute
    /// value. If the protocol is ICMP, this value must be an ICMP type.
    ///
    #[serde()]
    #[structable(optional, wide)]
    port_range_min: Option<i32>,

    /// The IP protocol can be represented by a string, an integer, or `null`.
    /// Valid string or integer values are `any` or `0`, `ah` or `51`, `dccp`
    /// or `33`, `egp` or `8`, `esp` or `50`, `gre` or `47`, `icmp` or `1`,
    /// `icmpv6` or `58`, `igmp` or `2`, `ipip` or `4`, `ipv6-encap` or `41`,
    /// `ipv6-frag` or `44`, `ipv6-icmp` or `58`, `ipv6-nonxt` or `59`,
    /// `ipv6-opts` or `60`, `ipv6-route` or `43`, `ospf` or `89`, `pgm` or
    /// `113`, `rsvp` or `46`, `sctp` or `132`, `tcp` or `6`, `udp` or `17`,
    /// `udplite` or `136`, `vrrp` or `112`. Additionally, any integer value
    /// between [0-255] is also valid. The string `any` (or integer `0`) means
    /// `all` IP protocols. See the constants in `neutron_lib.constants` for
    /// the most up-to-date list of supported strings.
    ///
    #[serde()]
    #[structable(optional, wide)]
    protocol: Option<String>,

    /// The remote address group UUID that is associated with this security
    /// group rule.
    ///
    #[serde()]
    #[structable(optional, wide)]
    remote_address_group_id: Option<String>,

    /// The remote group UUID to associate with this security group rule. You
    /// can specify either the `remote_group_id` or `remote_ip_prefix`
    /// attribute in the request body.
    ///
    #[serde()]
    #[structable(optional, wide)]
    remote_group_id: Option<String>,

    /// The remote IP prefix that is matched by this security group rule.
    ///
    #[serde()]
    #[structable(optional, wide)]
    remote_ip_prefix: Option<String>,

    /// The revision number of the resource.
    ///
    #[serde()]
    #[structable(optional, wide)]
    revision_number: Option<i32>,

    /// The security group ID to associate with this security group rule.
    ///
    #[serde()]
    #[structable(optional, wide)]
    security_group_id: Option<String>,

    /// The ID of the project.
    ///
    #[serde()]
    #[structable(optional, wide)]
    tenant_id: Option<String>,

    /// Time at which the resource has been updated (in UTC ISO8601 format).
    ///
    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,
}

impl SecurityGroupRulesCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List SecurityGroupRules");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        // Set query parameters
        if let Some(val) = &self.query.id {
            ep_builder.id(val);
        }
        if let Some(val) = &self.query.security_group_id {
            ep_builder.security_group_id(val);
        }
        if let Some(val) = &self.query.remote_group_id {
            ep_builder.remote_group_id(val);
        }
        if let Some(val) = &self.query.direction {
            ep_builder.direction(val);
        }
        if let Some(val) = &self.query.protocol {
            ep_builder.protocol(val);
        }
        if let Some(val) = &self.query.port_range_min {
            ep_builder.port_range_min(*val);
        }
        if let Some(val) = &self.query.port_range_max {
            ep_builder.port_range_max(*val);
        }
        if let Some(val) = &self.query.ethertype {
            ep_builder.ethertype(val);
        }
        if let Some(val) = &self.query.remote_ip_prefix {
            ep_builder.remote_ip_prefix(val);
        }
        if let Some(val) = &self.query.tenant_id {
            ep_builder.tenant_id(val);
        }
        if let Some(val) = &self.query.revision_number {
            ep_builder.revision_number(val);
        }
        if let Some(val) = &self.query.description {
            ep_builder.description(val);
        }
        if let Some(val) = &self.query.normalized_cidr {
            ep_builder.normalized_cidr(val);
        }
        if let Some(val) = &self.query.remote_address_group_id {
            ep_builder.remote_address_group_id(val);
        }
        if let Some(val) = &self.query.belongs_to_default_sg {
            ep_builder.belongs_to_default_sg(*val);
        }
        if let Some(val) = &self.query.sort_key {
            ep_builder.sort_key(val.iter());
        }
        if let Some(val) = &self.query.sort_dir {
            ep_builder.sort_dir(val.iter());
        }
        if let Some(val) = &self.query.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &self.query.marker {
            ep_builder.marker(val);
        }
        if let Some(val) = &self.query.page_reverse {
            ep_builder.page_reverse(*val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = paged(ep, Pagination::Limit(self.max_items))
            .query_async(client)
            .await?;

        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

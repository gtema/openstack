// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Upgrade command
//!
//! Wraps invoking of the `v1/clusters/actions/upgrade` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::container_infrastructure_management::v1::cluster::action::upgrade::create;
use openstack_sdk::api::QueryAsync;
use openstack_types::container_infrastructure_management::v1::cluster::action::upgrade::response::create::UpgradeResponse;

/// Command without description in OpenAPI
#[derive(Args)]
pub struct UpgradeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[arg(help_heading = "Body parameters", long)]
    cluster_template: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    created_at: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    max_batch_size: Option<i32>,

    #[arg(help_heading = "Body parameters", long)]
    nodegroup: Option<String>,

    #[arg(help_heading = "Body parameters", long)]
    updated_at: Option<String>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

impl UpgradeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Upgrade");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("container-infrastructure-management.cluster/action/upgrade"),
            Some("create"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set body parameters
        // Set Request.cluster_template data
        if let Some(arg) = &self.cluster_template {
            ep_builder.cluster_template(arg);
        }

        // Set Request.created_at data
        if let Some(arg) = &self.created_at {
            ep_builder.created_at(arg);
        }

        // Set Request.max_batch_size data
        if let Some(arg) = &self.max_batch_size {
            ep_builder.max_batch_size(*arg);
        }

        // Set Request.nodegroup data
        if let Some(arg) = &self.nodegroup {
            ep_builder.nodegroup(arg);
        }

        // Set Request.updated_at data
        if let Some(arg) = &self.updated_at {
            ep_builder.updated_at(arg);
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<UpgradeResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

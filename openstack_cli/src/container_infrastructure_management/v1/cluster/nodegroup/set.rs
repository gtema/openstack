// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set Nodegroup command
//!
//! Wraps invoking of the `v1/clusters/nodegroups/{nodegroup_id}` with `PATCH` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::container_infrastructure_management::v1::cluster::nodegroup::find;
use openstack_sdk::api::container_infrastructure_management::v1::cluster::nodegroup::set;
use openstack_sdk::api::find;
use openstack_types::container_infrastructure_management::v1::cluster::nodegroup::response::set::NodegroupResponse;

/// Update NodeGroup.
///
/// | param cluster_id: | | | --- | --- | | | cluster id. |
///
/// System Message: WARNING/2 (<string>, line 4)
///
/// Field list ends without a blank line; unexpected unindent.
///
/// :param : resource name. :param values: a json document to update a
/// nodegroup.
#[derive(Args)]
pub struct NodegroupCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[arg(help_heading = "Body parameters", long)]
    op: Op,

    #[arg(help_heading = "Body parameters", long)]
    path: String,

    #[arg(help_heading = "Body parameters", long)]
    value: Option<String>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// nodegroup_id parameter for /v1/clusters/nodegroups/{nodegroup_id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Op {
    Add,
    Remove,
    Replace,
}

impl NodegroupCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set Nodegroup");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut find_builder = find::Request::builder();

        find_builder.id(&self.path.id);
        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;

        let mut ep_builder = set::Request::builder();

        // Set path parameters
        let resource_id = find_data["id"]
            .as_str()
            .expect("Resource ID is a string")
            .to_string();
        ep_builder.id(resource_id.clone());
        // Set query parameters
        // Set body parameters
        // Set Request.op data
        let tmp = match &self.op {
            Op::Add => set::Op::Add,
            Op::Remove => set::Op::Remove,
            Op::Replace => set::Op::Replace,
        };
        ep_builder.op(tmp);

        // Set Request.path data
        ep_builder.path(&self.path);

        // Set Request.value data
        if let Some(arg) = &self.value {
            ep_builder.value(arg);
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<NodegroupResponse>(data)?;
        Ok(())
    }
}

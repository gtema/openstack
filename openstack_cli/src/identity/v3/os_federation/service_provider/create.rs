// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create ServiceProvider command
//!
//! Wraps invoking of the `v3/OS-FEDERATION/service_providers/{service_provider_id}` with `PUT` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::os_federation::service_provider::create;
use openstack_types::identity::v3::os_federation::service_provider::response::create::ServiceProviderResponse;

/// Create a service provider.
///
/// PUT /OS-FEDERATION/service_providers/{service_provider_id}
#[derive(Args)]
pub struct ServiceProviderCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    service_provider: ServiceProvider,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// service_provider_id parameter for
    /// /v3/OS-FEDERATION/service_providers/{service_provider_id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// ServiceProvider Body data
#[derive(Args, Clone)]
struct ServiceProvider {
    /// The URL to authenticate against
    #[arg(help_heading = "Body parameters", long)]
    auth_url: String,

    /// The description of the service provider
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Set explicit NULL for the description
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "description")]
    no_description: bool,

    /// Whether the service provider is enabled or not
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    enabled: Option<bool>,

    /// The prefix of the RelayState SAML attribute
    #[arg(help_heading = "Body parameters", long)]
    relay_state_prefix: Option<String>,

    /// Set explicit NULL for the relay_state_prefix
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "relay_state_prefix")]
    no_relay_state_prefix: bool,

    /// The service provider's URL
    #[arg(help_heading = "Body parameters", long)]
    sp_url: String,
}

impl ServiceProviderCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create ServiceProvider");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("identity.OS_FEDERATION/service_provider"),
            Some("None"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.service_provider data
        let args = &self.service_provider;
        let mut service_provider_builder = create::ServiceProviderBuilder::default();

        service_provider_builder.auth_url(&args.auth_url);

        if let Some(val) = &args.description {
            service_provider_builder.description(Some(val.into()));
        } else if args.no_description {
            service_provider_builder.description(None);
        }

        if let Some(val) = &args.enabled {
            service_provider_builder.enabled(*val);
        }

        if let Some(val) = &args.relay_state_prefix {
            service_provider_builder.relay_state_prefix(Some(val.into()));
        } else if args.no_relay_state_prefix {
            service_provider_builder.relay_state_prefix(None);
        }

        service_provider_builder.sp_url(&args.sp_url);

        ep_builder.service_provider(service_provider_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ServiceProviderResponse>(data)?;
        Ok(())
    }
}

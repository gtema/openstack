// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set Mapping command
//!
//! Wraps invoking of the `v3/OS-FEDERATION/mappings/{mapping_id}` with `PATCH` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::os_federation::mapping::set;
use openstack_types::identity::v3::os_federation::mapping::response::set::MappingResponse;
use serde_json::Value;

/// Update an attribute mapping for identity federation.
///
/// PATCH /OS-FEDERATION/mappings/{mapping_id}
#[derive(Args)]
pub struct MappingCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    mapping: Mapping,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Mapping Body data
#[derive(Args, Clone)]
struct Mapping {
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long, value_name="JSON", value_parser=crate::common::parse_json)]
    rules: Vec<Value>,

    /// Mapping schema version
    #[arg(help_heading = "Body parameters", long)]
    schema_version: Option<String>,
}

impl MappingCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set Mapping");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("identity.OS_FEDERATION/mapping"),
            Some("set"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = set::Request::builder();

        ep_builder.id(&self.path.id);

        // Set body parameters
        // Set Request.mapping data
        let args = &self.mapping;
        let mut mapping_builder = set::MappingBuilder::default();

        let rules_builder: Vec<set::Rules> = args
            .rules
            .iter()
            .flat_map(|v| serde_json::from_value::<set::Rules>(v.to_owned()))
            .collect::<Vec<set::Rules>>();
        mapping_builder.rules(rules_builder);

        if let Some(val) = &args.schema_version {
            mapping_builder.schema_version(val);
        }

        ep_builder.mapping(mapping_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<MappingResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

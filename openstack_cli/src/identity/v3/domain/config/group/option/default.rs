// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Show Option command
//!
//! Wraps invoking of the `v3/domains/config/{group}/{option}/default` with `GET` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::domain::config::group::option::default;
use openstack_types::identity::v3::domain::config::group::option::response::default::OptionResponse;

/// Reads the default configuration setting for an option within a group.
///
/// The API supports only the `identity` and `ldap` groups. For the `ldap`
/// group, a valid value is `url` or `user_tree_dn`. For the `identity` group,
/// a valid value is `driver`.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/domain_config_default`
#[derive(Args)]
#[command(about = "Show default option for a group")]
pub struct OptionCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// group parameter for /v3/domains/config/{group}/{option}/default API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_group",
        value_name = "GROUP"
    )]
    group: String,

    /// option parameter for /v3/domains/config/{group}/{option}/default API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_option",
        value_name = "OPTION"
    )]
    option: String,
}

impl OptionCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Show Option");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("identity.domain/config/group/option"),
            Some("None"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = default::Request::builder();

        // Set path parameters
        ep_builder.group(&self.path.group);
        ep_builder.option(&self.path.option);
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<OptionResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List Domains command
//!
//! Wraps invoking of the `v3/domains` with `GET` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::domain::list;
use openstack_sdk::api::{Pagination, paged};
use openstack_types::identity::v3::domain::response::list::DomainResponse;

/// Lists all domains.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/domains`
#[derive(Args)]
#[command(about = "List domains")]
pub struct DomainsCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Total limit of entities count to return. Use this when there are too many entries.
    #[arg(long, default_value_t = 10000)]
    max_items: usize,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    /// If set to true, then only domains that are enabled will be returned, if
    /// set to false only that are disabled will be returned. Any value other
    /// than 0, including no value, will be interpreted as true.
    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    enabled: Option<bool>,

    #[arg(help_heading = "Query parameters", long)]
    limit: Option<i32>,

    /// ID of the last fetched entry
    #[arg(help_heading = "Query parameters", long)]
    marker: Option<String>,

    /// The resource name.
    #[arg(help_heading = "Query parameters", long)]
    name: Option<String>,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

impl DomainsCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List Domains");

        let op = OutputProcessor::from_args_with_resource_key(parsed_args, "identity.domain");
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        // Set query parameters
        if let Some(val) = &self.query.enabled {
            ep_builder.enabled(*val);
        }
        if let Some(val) = &self.query.name {
            ep_builder.name(val);
        }
        if let Some(val) = &self.query.marker {
            ep_builder.marker(val);
        }
        if let Some(val) = &self.query.limit {
            ep_builder.limit(*val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = paged(ep, Pagination::Limit(self.max_items))
            .query_async(client)
            .await?;
        op.output_list::<DomainResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Show Limit command
//!
//! Wraps invoking of the `v3/limits/{limit_id}` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::limit::get;
use serde_json::Value;
use structable_derive::StructTable;

/// Shows details for a limit.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/limit`
///
#[derive(Args)]
#[command(about = "Show Limit Details")]
pub struct LimitCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// limit_id parameter for /v3/limits/{limit_id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Limit response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The limit description.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// The ID of the domain.
    ///
    #[serde()]
    #[structable(optional)]
    domain_id: Option<String>,

    /// The limit ID.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The link to the resources in question.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    links: Option<Value>,

    /// The ID for the project.
    ///
    #[serde()]
    #[structable(optional)]
    project_id: Option<String>,

    /// The ID of the region that contains the service endpoint. The value can
    /// be None.
    ///
    #[serde()]
    #[structable(optional)]
    region_id: Option<String>,

    /// The override limit.
    ///
    #[serde()]
    #[structable(optional)]
    resource_limit: Option<i32>,

    /// The resource name.
    ///
    #[serde()]
    #[structable(optional)]
    resource_name: Option<String>,

    /// The UUID of the service to which the limit belongs.
    ///
    #[serde()]
    #[structable(optional)]
    service_id: Option<String>,
}

impl LimitCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Show Limit");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = get::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

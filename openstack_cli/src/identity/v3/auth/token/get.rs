// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Get Token command
//!
//! Wraps invoking of the `v3/auth/tokens` with `GET` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::auth::token::get;
use openstack_types::identity::v3::auth::token::response::get::TokenResponse;

/// Validates and shows information for a token, including its expiration date
/// and authorization scope.
///
/// Pass your own token in the `X-Auth-Token` request header.
///
/// Pass the token that you want to validate in the `X-Subject-Token` request
/// header.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/auth_tokens`
#[derive(Args)]
#[command(about = "Validate and show information for token")]
pub struct TokenCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Request Headers parameters
    #[command(flatten)]
    headers: HeaderParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Header parameters
#[derive(Args)]
struct HeaderParameters {
    /// The authentication token. An authentication response returns the token
    /// ID in this header rather than in the response body.
    #[arg()]
    x_subject_token: String,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

impl TokenCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Get Token");

        let op = OutputProcessor::from_args(parsed_args, Some("identity.auth/token"), Some("get"));
        op.validate_args(parsed_args)?;

        let mut ep_builder = get::Request::builder();
        // Set path parameters

        // Set header parameters

        ep_builder.header(
            http::header::HeaderName::from_static("X-Subject-Token"),
            http::header::HeaderValue::from_str(&self.headers.x_subject_token)?,
        );

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<TokenResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

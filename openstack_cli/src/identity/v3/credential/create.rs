// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Credential command
//!
//! Wraps invoking of the `v3/credentials` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::credential::create;
use openstack_types::identity::v3::credential::response::create::CredentialResponse;

/// Creates a credential.
///
/// The following example shows how to create an EC2-style credential. The
/// credential blob is a string that contains a JSON-serialized dictionary with
/// the `access` and `secret` keys. This format is required when you specify
/// the `ec2` type. To specify other credentials, such as `access_key`, change
/// the type and contents of the data blob.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/credentials`
#[derive(Args)]
#[command(about = "Create credential")]
pub struct CredentialCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `credential` object.
    #[command(flatten)]
    credential: Credential,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Credential Body data
#[derive(Args, Clone)]
struct Credential {
    /// The credential itself, as a serialized blob.
    #[arg(help_heading = "Body parameters", long)]
    blob: String,

    /// The UUID for the credential.
    #[arg(help_heading = "Body parameters", long)]
    id: Option<String>,

    /// The ID for the project.
    #[arg(help_heading = "Body parameters", long)]
    project_id: Option<String>,

    /// Set explicit NULL for the project_id
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "project_id")]
    no_project_id: bool,

    /// The credential type, such as `ec2` or `cert`. The implementation
    /// determines the list of supported types.
    #[arg(help_heading = "Body parameters", long)]
    _type: String,

    /// The ID of the user who owns the credential.
    #[arg(help_heading = "Body parameters", long)]
    user_id: String,
}

impl CredentialCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Credential");

        let op = OutputProcessor::from_args_with_resource_key(parsed_args, "identity.credential");
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.credential data
        let args = &self.credential;
        let mut credential_builder = create::CredentialBuilder::default();
        if let Some(val) = &args.id {
            credential_builder.id(val);
        }

        credential_builder.blob(&args.blob);

        if let Some(val) = &args.project_id {
            credential_builder.project_id(Some(val.into()));
        } else if args.no_project_id {
            credential_builder.project_id(None);
        }

        credential_builder._type(&args._type);

        credential_builder.user_id(&args.user_id);

        ep_builder.credential(credential_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<CredentialResponse>(data)?;
        Ok(())
    }
}

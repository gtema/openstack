// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Project command
//!
//! Wraps invoking of the `v3/projects` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::project::create;
use openstack_types::identity::v3::project::response::create::ProjectResponse;

/// Creates a project, where the project may act as a domain.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/projects`
#[derive(Args)]
#[command(about = "Create project")]
pub struct ProjectCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `project` object
    #[command(flatten)]
    project: Project,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Options Body data
#[derive(Args, Clone)]
#[group(required = false, multiple = true)]
struct Options {
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    immutable: Option<bool>,
}

/// Project Body data
#[derive(Args, Clone)]
struct Project {
    /// The description of the project.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Set explicit NULL for the description
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "description")]
    no_description: bool,

    /// The ID of the domain for the project.
    ///
    /// For projects acting as a domain, the `domain_id` must not be specified,
    /// it will be generated by the Identity service implementation.
    ///
    /// For regular projects (i.e. those not acing as a domain), if `domain_id`
    /// is not specified, but `parent_id` is specified, then the domain ID of
    /// the parent will be used. If neither `domain_id` or `parent_id` is
    /// specified, the Identity service implementation will default to the
    /// domain to which the client’s token is scoped. If both `domain_id` and
    /// `parent_id` are specified, and they do not indicate the same domain, an
    /// `Bad Request (400)` will be returned.
    #[arg(help_heading = "Body parameters", long)]
    domain_id: Option<String>,

    /// Set explicit NULL for the domain_id
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "domain_id")]
    no_domain_id: bool,

    /// If set to `true`, project is enabled. If set to `false`, project is
    /// disabled. The default is `true`.
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    enabled: Option<bool>,

    /// If set to `true`, project is enabled. If set to `false`, project is
    /// disabled. The default is `true`.
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    is_domain: Option<bool>,

    /// The name of the project, which must be unique within the owning domain.
    /// A project can have the same name as its domain.
    #[arg(help_heading = "Body parameters", long)]
    name: String,

    /// The resource options for the project. Available resource options are
    /// `immutable`.
    #[command(flatten)]
    options: Option<Options>,

    /// The ID of the parent of the project.
    ///
    /// If specified on project creation, this places the project within a
    /// hierarchy and implicitly defines the owning domain, which will be the
    /// same domain as the parent specified. If `parent_id` is not specified
    /// and `is_domain` is `false`, then the project will use its owning domain
    /// as its parent. If `is_domain` is `true` (i.e. the project is acting as
    /// a domain), then `parent_id` must not specified (or if it is, it must be
    /// `null`) since domains have no parents.
    ///
    /// `parent_id` is immutable, and can’t be updated after the project is
    /// created - hence a project cannot be moved within the hierarchy.
    ///
    /// **New in version 3.4**
    #[arg(help_heading = "Body parameters", long)]
    parent_id: Option<String>,

    /// Set explicit NULL for the parent_id
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "parent_id")]
    no_parent_id: bool,

    /// A list of simple strings assigned to a project. Tags can be used to
    /// classify projects into groups.
    ///
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    tags: Option<Vec<String>>,
}

impl ProjectCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Project");

        let op = OutputProcessor::from_args_with_resource_key(parsed_args, "identity.project");
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.project data
        let args = &self.project;
        let mut project_builder = create::ProjectBuilder::default();
        if let Some(val) = &args.description {
            project_builder.description(Some(val.into()));
        } else if args.no_description {
            project_builder.description(None);
        }

        if let Some(val) = &args.domain_id {
            project_builder.domain_id(Some(val.into()));
        } else if args.no_domain_id {
            project_builder.domain_id(None);
        }

        if let Some(val) = &args.enabled {
            project_builder.enabled(*val);
        }

        if let Some(val) = &args.is_domain {
            project_builder.is_domain(*val);
        }

        project_builder.name(&args.name);

        if let Some(val) = &args.options {
            let mut options_builder = create::OptionsBuilder::default();
            if let Some(val) = &val.immutable {
                options_builder.immutable(*val);
            }
            project_builder.options(options_builder.build().expect("A valid object"));
        }

        if let Some(val) = &args.parent_id {
            project_builder.parent_id(Some(val.into()));
        } else if args.no_parent_id {
            project_builder.parent_id(None);
        }

        if let Some(val) = &args.tags {
            project_builder.tags(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        ep_builder.project(project_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ProjectResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set Group command
//!
//! Wraps invoking of the `v3/groups/{group_id}` with `PATCH` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::find;
use openstack_sdk::api::identity::v3::group::find;
use openstack_sdk::api::identity::v3::group::set;
use openstack_types::identity::v3::group::response::set::GroupResponse;

/// Updates a group.
///
/// If the back-end driver does not support this functionality, the call
/// returns the `Not Implemented (501)` response code.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/group`
#[derive(Args)]
#[command(about = "Update group")]
pub struct GroupCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `group` object
    #[command(flatten)]
    group: Group,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// group_id parameter for /v3/groups/{group_id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Group Body data
#[derive(Args, Clone)]
struct Group {
    /// The new description of the group.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Set explicit NULL for the description
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "description")]
    no_description: bool,

    /// The new name of the group.
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,
}

impl GroupCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set Group");

        let op = OutputProcessor::from_args(parsed_args, Some("identity.group"), Some("None"));
        op.validate_args(parsed_args)?;

        let mut find_builder = find::Request::builder();

        find_builder.id(&self.path.id);
        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;

        let mut ep_builder = set::Request::builder();

        // Set path parameters
        let resource_id = find_data["id"]
            .as_str()
            .expect("Resource ID is a string")
            .to_string();
        ep_builder.id(resource_id.clone());
        // Set query parameters
        // Set body parameters
        // Set Request.group data
        let args = &self.group;
        let mut group_builder = set::GroupBuilder::default();
        if let Some(val) = &args.description {
            group_builder.description(Some(val.into()));
        } else if args.no_description {
            group_builder.description(None);
        }

        if let Some(val) = &args.name {
            group_builder.name(val);
        }

        ep_builder.group(group_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<GroupResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List Users command
//!
//! Wraps invoking of the `v3/groups/{group_id}/users` with `GET` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::group::user::list;
use openstack_types::identity::v3::group::user::response::list::UserResponse;

/// Lists the users that belong to a group.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/group_users`
#[derive(Args)]
#[command(about = "List users in group")]
pub struct UsersCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    /// Filter results based on which user passwords have expired. The query
    /// should include an operator and a timestamp with a colon (:) separating
    /// the two, for example: `password_expires_at={operator}:{timestamp}`.
    /// Valid operators are: `lt`, `lte`, `gt`, `gte`, `eq`, and `neq`. Valid
    /// timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
    #[arg(help_heading = "Query parameters", long)]
    password_expires_at: Option<String>,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// group_id parameter for /v3/groups/{group_id}/users/{user_id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_group_id",
        value_name = "GROUP_ID"
    )]
    group_id: String,
}

impl UsersCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List Users");

        let op = OutputProcessor::from_args(parsed_args, Some("identity.group/user"), Some("None"));
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        ep_builder.group_id(&self.path.group_id);
        // Set query parameters
        if let Some(val) = &self.query.password_expires_at {
            ep_builder.password_expires_at(val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = ep.query_async(client).await?;
        op.output_list::<UserResponse>(data)?;
        Ok(())
    }
}

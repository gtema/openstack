// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Endpoint command
//!
//! Wraps invoking of the `v3/endpoints` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use anyhow::Result;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use clap::ValueEnum;
use openstack_sdk::api::identity::v3::endpoint::create;
use openstack_sdk::api::QueryAsync;
use structable_derive::StructTable;

/// Creates an endpoint.
///
/// Relationship: `https://docs.openstack.org/api/openstack-
/// identity/3/rel/endpoints`
#[derive(Args)]
#[command(about = "Create endpoint")]
pub struct EndpointCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    endpoint: Endpoint,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Interface {
    Admin,
    Internal,
    Public,
}

/// Endpoint Body data
#[derive(Args)]
struct Endpoint {
    /// Defines whether the endpoint appears in the
    /// service catalog: - `false`. The endpoint does not appear in the
    /// service catalog. - `true`. The endpoint appears in the service
    /// catalog. Default is `true`.
    #[arg(action=clap::ArgAction::Set, long)]
    enabled: Option<bool>,

    /// The interface type, which describes the
    /// visibility of the endpoint. Value is: - `public`. Visible by
    /// end users on a publicly available network interface. -
    /// `internal`. Visible by end users on an unmetered internal
    /// network interface. - `admin`. Visible by administrative users
    /// on a secure network interface.
    #[arg(long)]
    interface: Interface,

    /// The geographic location of the service endpoint.
    #[arg(long)]
    region: Option<String>,

    /// (Since v3.2) The ID of the region that contains
    /// the service endpoint.
    #[arg(long)]
    region_id: Option<String>,

    /// The UUID of the service to which the endpoint
    /// belongs.
    #[arg(long)]
    service_id: String,

    /// The endpoint URL.
    #[arg(long)]
    url: String,
}

/// Endpoint response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// Indicates whether the endpoint appears in the
    /// service catalog: - `false`. The endpoint does not appear in the
    /// service catalog. - `true`. The endpoint appears in the service
    /// catalog.
    #[serde()]
    #[structable(optional)]
    enabled: Option<bool>,

    /// The endpoint ID.
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The interface type, which describes the
    /// visibility of the endpoint. Value is: - `public`. Visible by
    /// end users on a publicly available network interface. -
    /// `internal`. Visible by end users on an unmetered internal
    /// network interface. - `admin`. Visible by administrative users
    /// on a secure network interface.
    #[serde()]
    #[structable(optional)]
    interface: Option<String>,

    /// (Deprecated in v3.2) The geographic location of
    /// the service endpoint.
    #[serde()]
    #[structable(optional)]
    region: Option<String>,

    /// (Since v3.2) The ID of the region that contains
    /// the service endpoint.
    #[serde()]
    #[structable(optional)]
    region_id: Option<String>,

    /// The UUID of the service to which the endpoint
    /// belongs.
    #[serde()]
    #[structable(optional)]
    service_id: Option<String>,

    /// The endpoint URL.
    #[serde()]
    #[structable(optional)]
    url: Option<String>,
}

impl EndpointCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Endpoint");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.endpoint data
        let args = &self.endpoint;
        let mut endpoint_builder = create::EndpointBuilder::default();
        if let Some(val) = &args.enabled {
            endpoint_builder.enabled(*val);
        }

        let tmp = match &args.interface {
            Interface::Admin => create::Interface::Admin,
            Interface::Internal => create::Interface::Internal,
            Interface::Public => create::Interface::Public,
        };
        endpoint_builder.interface(tmp);

        if let Some(val) = &args.region {
            endpoint_builder.region(val.clone());
        }

        if let Some(val) = &args.region_id {
            endpoint_builder.region_id(val.clone());
        }

        endpoint_builder.service_id(args.service_id.clone());

        endpoint_builder.url(args.url.clone());

        ep_builder.endpoint(endpoint_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

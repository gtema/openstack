// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set EndpointGroup command
//!
//! Wraps invoking of the `v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}` with `PATCH` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use clap::ValueEnum;
use openstack_sdk::api::identity::v3::os_ep_filter::endpoint_group::set;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Update existing endpoint groups
///
/// PATCH /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
///
#[derive(Args)]
pub struct EndpointGroupCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    endpoint_group: EndpointGroup,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// endpoint_group_id parameter for
    /// /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Interface {
    Admin,
    Internal,
    Public,
}

/// Filters Body data
#[derive(Args, Clone)]
#[group(required = false, multiple = true)]
struct Filters {
    /// Indicates whether the endpoint appears in the service catalog -false.
    /// The endpoint does not appear in the service catalog. -true. The
    /// endpoint appears in the service catalog.
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    enabled: Option<bool>,

    /// The interface type, which describes the visibility of the endpoint.
    /// Value is: -public. Visible by end users on a publicly available network
    /// interface. -internal. Visible by end users on an unmetered internal
    /// network interface. -admin. Visible by administrative users on a secure
    /// network interface.
    ///
    #[arg(help_heading = "Body parameters", long)]
    interface: Option<Interface>,

    /// (Since v3.2) The ID of the region that contains the service endpoint.
    ///
    #[arg(help_heading = "Body parameters", long)]
    region_id: Option<String>,

    /// The UUID of the service to which the endpoint belongs
    ///
    #[arg(help_heading = "Body parameters", long)]
    service_id: Option<String>,
}

/// EndpointGroup Body data
#[derive(Args, Clone)]
struct EndpointGroup {
    /// The endpoint group description.
    ///
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Describes the filtering performed by the endpoint group. The filter
    /// used must be an endpoint property, such as interface, service_id,
    /// region, and enabled. Note that if using interface as a filter, the only
    /// available values are public, internal, and admin.
    ///
    #[command(flatten)]
    filters: Option<Filters>,

    /// The name of the endpoint group.
    ///
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,
}

/// EndpointGroup response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The endpoint group description.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// Describes the filtering performed by the endpoint group. The filter
    /// used must be an endpoint property, such as interface, service_id,
    /// region, and enabled. Note that if using interface as a filter, the only
    /// available values are public, internal, and admin.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    filters: Option<Value>,

    /// The endpoint group ID
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The link to the resources in question.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    links: Option<Value>,

    /// The name of the endpoint group.
    ///
    #[serde()]
    #[structable(optional)]
    name: Option<String>,
}

impl EndpointGroupCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set EndpointGroup");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = set::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.endpoint_group data
        let args = &self.endpoint_group;
        let mut endpoint_group_builder = set::EndpointGroupBuilder::default();
        if let Some(val) = &args.description {
            endpoint_group_builder.description(Some(val.into()));
        }

        if let Some(val) = &args.filters {
            let mut filters_builder = set::FiltersBuilder::default();
            if let Some(val) = &val.interface {
                let tmp = match val {
                    Interface::Admin => set::Interface::Admin,
                    Interface::Internal => set::Interface::Internal,
                    Interface::Public => set::Interface::Public,
                };
                filters_builder.interface(tmp);
            }
            if let Some(val) = &val.service_id {
                filters_builder.service_id(val);
            }
            if let Some(val) = &val.region_id {
                filters_builder.region_id(Some(val.into()));
            }
            if let Some(val) = &val.enabled {
                filters_builder.enabled(*val);
            }
            endpoint_group_builder.filters(filters_builder.build().expect("A valid object"));
        }

        if let Some(val) = &args.name {
            endpoint_group_builder.name(val);
        }

        ep_builder.endpoint_group(endpoint_group_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Role command
//!
//! Wraps invoking of the `v3/roles` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::role::create;
use openstack_types::identity::v3::role::response::create::RoleResponse;

/// Creates a role.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/roles`
#[derive(Args)]
#[command(about = "Create role")]
pub struct RoleCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `role` object
    #[command(flatten)]
    role: Role,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Options Body data
#[derive(Args, Clone)]
#[group(required = false, multiple = true)]
struct Options {
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    immutable: Option<bool>,
}

/// Role Body data
#[derive(Args, Clone)]
struct Role {
    /// Add description about the role.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Set explicit NULL for the description
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "description")]
    no_description: bool,

    /// The ID of the domain of the role.
    #[arg(help_heading = "Body parameters", long)]
    domain_id: Option<String>,

    /// Set explicit NULL for the domain_id
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "domain_id")]
    no_domain_id: bool,

    /// The role name.
    #[arg(help_heading = "Body parameters", long)]
    name: String,

    /// The resource options for the role. Available resource options are
    /// `immutable`.
    #[command(flatten)]
    options: Option<Options>,
}

impl RoleCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Role");

        let op = OutputProcessor::from_args(parsed_args, Some("identity.role"), Some("create"));
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set body parameters
        // Set Request.role data
        let args = &self.role;
        let mut role_builder = create::RoleBuilder::default();
        if let Some(val) = &args.description {
            role_builder.description(Some(val.into()));
        } else if args.no_description {
            role_builder.description(None);
        }

        if let Some(val) = &args.domain_id {
            role_builder.domain_id(Some(val.into()));
        } else if args.no_domain_id {
            role_builder.domain_id(None);
        }

        role_builder.name(&args.name);

        if let Some(val) = &args.options {
            let mut options_builder = create::OptionsBuilder::default();
            if let Some(val) = &val.immutable {
                options_builder.immutable(*val);
            }
            role_builder.options(options_builder.build().expect("A valid object"));
        }

        ep_builder.role(role_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<RoleResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Service command
//!
//! Wraps invoking of the `v3/services` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::identity::v3::service::create;
use openstack_types::identity::v3::service::response::create::ServiceResponse;

/// Creates a service.
///
/// Relationship:
/// `https://docs.openstack.org/api/openstack-identity/3/rel/services`
#[derive(Args)]
#[command(about = "Create service")]
pub struct ServiceCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `service` object.
    #[command(flatten)]
    service: Service,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Service Body data
#[derive(Args, Clone)]
struct Service {
    /// Defines whether the service and its endpoints appear in the service
    /// catalog: - `false`. The service and its endpoints do not appear in the
    /// service catalog. - `true`. The service and its endpoints appear in the
    /// service catalog.
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    enabled: Option<bool>,

    /// The service name.
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// The service type, which describes the API implemented by the service.
    /// Value is `compute`, `ec2`, `identity`, `image`, `network`, or `volume`.
    #[arg(help_heading = "Body parameters", long)]
    _type: String,
}

impl ServiceCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Service");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.service data
        let args = &self.service;
        let mut service_builder = create::ServiceBuilder::default();
        if let Some(val) = &args.enabled {
            service_builder.enabled(*val);
        }

        service_builder._type(&args._type);

        if let Some(val) = &args.name {
            service_builder.name(val);
        }

        ep_builder.service(service_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ServiceResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create OsVolumeTransfer command
//!
//! Wraps invoking of the `v3/os-volume-transfer` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use anyhow::Result;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::block_storage::v3::os_volume_transfer::create;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Create a new volume transfer.
///
#[derive(Args)]
pub struct OsVolumeTransferCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The volume transfer object.
    ///
    #[command(flatten)]
    transfer: Transfer,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Transfer Body data
#[derive(Args, Clone)]
struct Transfer {
    /// The name of the object.
    ///
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// The UUID of the volume.
    ///
    #[arg(help_heading = "Body parameters", long)]
    volume_id: String,
}

/// OsVolumeTransfer response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The date and time when the resource was created.
    ///
    /// The date and time stamp format is
    /// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601):
    ///
    /// ```text
    /// CCYY-MM-DDThh:mm:ss±hh:mm
    ///
    /// ```
    ///
    /// For example, `2015-08-27T09:49:58-05:00`.
    ///
    /// The `±hh:mm` value, if included, is the time zone as an offset from
    /// UTC.
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// The UUID of the object.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// Links for the message.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    links: Option<Value>,

    /// The name of the object.
    ///
    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    /// The UUID of the volume.
    ///
    #[serde()]
    #[structable(optional)]
    volume_id: Option<String>,
}

impl OsVolumeTransferCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create OsVolumeTransfer");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.transfer data
        let args = &self.transfer;
        let mut transfer_builder = create::TransferBuilder::default();

        transfer_builder.volume_id(&args.volume_id);

        if let Some(val) = &args.name {
            transfer_builder.name(Some(val.into()));
        }

        ep_builder.transfer(transfer_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

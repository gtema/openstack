// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action Volume command [microversion = 3.68]
//!
//! Wraps invoking of the `v3/volumes/{id}/action` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::volume::os_reimage_368;

/// Command without description in OpenAPI
#[derive(Args)]
pub struct VolumeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    os_reimage: OsReimage,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v3/volumes/{id}/action API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// OsReimage Body data
#[derive(Args, Clone)]
struct OsReimage {
    #[arg(help_heading = "Body parameters", long)]
    image_id: String,

    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    reimage_reserved: Option<bool>,
}

impl VolumeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action Volume");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("block-storage.volume"),
            Some("os-reimage"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = os_reimage_368::Request::builder();
        ep_builder.header("OpenStack-API-Version", "volume 3.68");

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.os_reimage data
        let args = &self.os_reimage;
        let mut os_reimage_builder = os_reimage_368::OsReimageBuilder::default();

        os_reimage_builder.image_id(&args.image_id);

        if let Some(val) = &args.reimage_reserved {
            os_reimage_builder.reimage_reserved(*val);
        }

        ep_builder.os_reimage(os_reimage_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        openstack_sdk::api::ignore(ep).query_async(client).await?;
        Ok(())
    }
}

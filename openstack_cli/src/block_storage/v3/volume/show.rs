// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Show Volume command
//!
//! Wraps invoking of the `v3/volumes/{id}` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::block_storage::v3::volume::find;
use openstack_sdk::api::find;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Return data about the given volume.
///
#[derive(Args)]
pub struct VolumeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v3/volumes/{id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Volume response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// Instance attachment information. If this volume is attached to a server
    /// instance, the attachments list includes the UUID of the attached
    /// server, an attachment UUID, the name of the attached host, if any, the
    /// volume UUID, the device, and the device UUID. Otherwise, this list is
    /// empty.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    attachments: Option<Value>,

    /// The name of the availability zone.
    ///
    #[serde()]
    #[structable(optional)]
    availability_zone: Option<String>,

    /// The cluster name of volume backend.
    ///
    #[serde()]
    #[structable(optional)]
    cluster_name: Option<String>,

    /// The UUID of the consistency group.
    ///
    #[serde()]
    #[structable(optional)]
    consistencygroup_id: Option<String>,

    /// Whether this resource consumes quota or not. Resources that not counted
    /// for quota usage are usually temporary internal resources created to
    /// perform an operation.
    ///
    #[serde()]
    #[structable(optional)]
    consumes_quota: Option<bool>,

    /// The date and time when the resource was created.
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// The volume description.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// If true, this volume is encrypted.
    ///
    #[serde()]
    #[structable(optional)]
    encrypted: Option<bool>,

    /// The ID of the group.
    ///
    #[serde()]
    #[structable(optional)]
    group_id: Option<String>,

    /// The UUID of the volume.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// Links to the resources in question. See
    /// [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html)
    /// for more info.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    links: Option<Value>,

    /// A metadata object. Contains one or more metadata key and value pairs
    /// that are associated with the resource.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    metadata: Option<Value>,

    /// The volume migration status. Admin only.
    ///
    #[serde()]
    #[structable(optional)]
    migration_status: Option<String>,

    /// If true, this volume can attach to more than one instance.
    ///
    #[serde()]
    #[structable(optional)]
    multiattach: Option<bool>,

    /// The volume name.
    ///
    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    /// The provider ID for the volume. The value is either a string set by the
    /// driver or null if the driver doesn’t use the field or if it hasn’t
    /// created it yet. Only returned for administrators.
    ///
    #[serde()]
    #[structable(optional)]
    provider_id: Option<String>,

    /// The volume replication status.
    ///
    #[serde()]
    #[structable(optional)]
    replication_status: Option<String>,

    /// A unique identifier that’s used to indicate what node the
    /// volume-service for a particular volume is being serviced by.
    ///
    #[serde()]
    #[structable(optional)]
    service_uuid: Option<String>,

    /// An indicator whether the host connecting the volume should lock for the
    /// whole attach/detach process or not. true means only is iSCSI initiator
    /// running on host doesn’t support manual scans, false means never use
    /// locks, and null means to always use locks. Look at os-brick’s
    /// guard_connection context manager. Default=True.
    ///
    #[serde()]
    #[structable(optional)]
    shared_targets: Option<bool>,

    /// The size of the volume, in gibibytes (GiB).
    ///
    #[serde()]
    #[structable(optional)]
    size: Option<i64>,

    /// To create a volume from an existing snapshot, specify the UUID of the
    /// volume snapshot. The volume is created in same availability zone and
    /// with same size as the snapshot.
    ///
    #[serde()]
    #[structable(optional)]
    snapshot_id: Option<String>,

    /// The UUID of the source volume. The API creates a new volume with the
    /// same size as the source volume unless a larger size is requested.
    ///
    #[serde()]
    #[structable(optional)]
    source_volid: Option<String>,

    /// The volume status.
    ///
    #[serde()]
    #[structable(optional)]
    status: Option<String>,

    /// The date and time when the resource was updated.
    ///
    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,

    /// The UUID of the user.
    ///
    #[serde()]
    #[structable(optional)]
    user_id: Option<String>,

    /// The associated volume type name for the volume.
    ///
    #[serde()]
    #[structable(optional)]
    volume_type: Option<String>,

    /// The associated volume type ID for the volume.
    ///
    #[serde()]
    #[structable(optional)]
    volume_type_id: Option<String>,
}

impl VolumeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Show Volume");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut find_builder = find::Request::builder();

        find_builder.id(&self.path.id);
        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;

        op.output_single::<ResponseData>(find_data)?;
        Ok(())
    }
}

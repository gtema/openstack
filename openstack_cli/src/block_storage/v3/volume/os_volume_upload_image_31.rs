// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action Volume command [microversion = 3.1]
//!
//! Wraps invoking of the `v3/volumes/{id}/action` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::volume::os_volume_upload_image_31;

/// Command without description in OpenAPI
#[derive(Args)]
pub struct VolumeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    os_volume_upload_image: OsVolumeUploadImage,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v3/volumes/{id}/action API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum DiskFormat {
    Ploop,
    Qcow2,
    Raw,
    Vdi,
    Vhd,
    Vhdx,
    Vmdk,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Visibility {
    Community,
    Private,
    Public,
    Shared,
}

/// OsVolumeUploadImage Body data
#[derive(Args, Clone)]
struct OsVolumeUploadImage {
    #[arg(help_heading = "Body parameters", long)]
    container_format: Option<String>,

    /// Set explicit NULL for the container_format
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "container_format")]
    no_container_format: bool,

    #[arg(help_heading = "Body parameters", long)]
    disk_format: Option<DiskFormat>,

    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    force: Option<bool>,

    #[arg(help_heading = "Body parameters", long)]
    image_name: String,

    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    protected: Option<bool>,

    #[arg(help_heading = "Body parameters", long)]
    visibility: Option<Visibility>,
}

impl VolumeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action Volume");

        let op = OutputProcessor::from_args_with_resource_key(parsed_args, "block-storage.volume");
        op.validate_args(parsed_args)?;

        let mut ep_builder = os_volume_upload_image_31::Request::builder();
        ep_builder.header("OpenStack-API-Version", "volume 3.1");

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.os_volume_upload_image data
        let args = &self.os_volume_upload_image;
        let mut os_volume_upload_image_builder =
            os_volume_upload_image_31::OsVolumeUploadImageBuilder::default();
        if let Some(val) = &args.container_format {
            os_volume_upload_image_builder.container_format(Some(val.into()));
        } else if args.no_container_format {
            os_volume_upload_image_builder.container_format(None);
        }

        if let Some(val) = &args.disk_format {
            let tmp = match val {
                DiskFormat::Ploop => os_volume_upload_image_31::DiskFormat::Ploop,
                DiskFormat::Qcow2 => os_volume_upload_image_31::DiskFormat::Qcow2,
                DiskFormat::Raw => os_volume_upload_image_31::DiskFormat::Raw,
                DiskFormat::Vdi => os_volume_upload_image_31::DiskFormat::Vdi,
                DiskFormat::Vhd => os_volume_upload_image_31::DiskFormat::Vhd,
                DiskFormat::Vhdx => os_volume_upload_image_31::DiskFormat::Vhdx,
                DiskFormat::Vmdk => os_volume_upload_image_31::DiskFormat::Vmdk,
            };
            os_volume_upload_image_builder.disk_format(tmp);
        }

        if let Some(val) = &args.force {
            os_volume_upload_image_builder.force(*val);
        }

        os_volume_upload_image_builder.image_name(&args.image_name);

        if let Some(val) = &args.protected {
            os_volume_upload_image_builder.protected(*val);
        }

        if let Some(val) = &args.visibility {
            let tmp = match val {
                Visibility::Community => os_volume_upload_image_31::Visibility::Community,
                Visibility::Private => os_volume_upload_image_31::Visibility::Private,
                Visibility::Public => os_volume_upload_image_31::Visibility::Public,
                Visibility::Shared => os_volume_upload_image_31::Visibility::Shared,
            };
            os_volume_upload_image_builder.visibility(tmp);
        }

        ep_builder.os_volume_upload_image(os_volume_upload_image_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        openstack_sdk::api::ignore(ep).query_async(client).await?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Attachment command [microversion = 3.54]
//!
//! Wraps invoking of the `v3/attachments` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use crate::common::parse_key_val;
use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::attachment::create_354;
use openstack_types::block_storage::v3::attachment::response::create::AttachmentResponse;
use serde_json::Value;

/// Create an attachment.
///
/// This method can be used to create an empty attachment (reserve) or to
/// create and initialize a volume attachment based on the provided input
/// parameters.
///
/// If the caller does not yet have the connector information but needs to
/// reserve an attachment for the volume (ie Nova BootFromVolume) the create
/// can be called with just the volume-uuid and the server identifier. This
/// will reserve an attachment, mark the volume as reserved and prevent any new
/// attachment_create calls from being made until the attachment is updated
/// (completed).
///
/// The alternative is that the connection can be reserved and initialized all
/// at once with a single call if the caller has all of the required
/// information (connector data) at the time of the call.
///
/// NOTE: In Nova terms server == instance, the server_id parameter referenced
/// below is the UUID of the Instance, for non-nova consumers this can be a
/// server UUID or some other arbitrary unique identifier.
///
/// Starting from microversion 3.54, we can pass the attach mode as argument in
/// the request body.
///
/// Expected format of the input parameter 'body':
///
/// ```text
/// {
///     "attachment":
///     {
///         "volume_uuid": "volume-uuid",
///         "instance_uuid": "null|nova-server-uuid",
///         "connector": "null|<connector-object>",
///         "mode": "null|rw|ro"
///     }
/// }
/// ```
///
/// Example connector:
///
/// ```text
/// {
///     "connector":
///     {
///         "initiator": "iqn.1993-08.org.debian:01:cad181614cec",
///         "ip": "192.168.1.20",
///         "platform": "x86_64",
///         "host": "tempest-1",
///         "os_type": "linux2",
///         "multipath": false,
///         "mountpoint": "/dev/vdb",
///         "mode": "null|rw|ro"
///     }
/// }
/// ```
///
/// NOTE all that's required for a reserve is volume_uuid and an instance_uuid.
///
/// returns: A summary view of the attachment object
#[derive(Args)]
pub struct AttachmentCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// An attachment object.
    #[command(flatten)]
    attachment: Attachment,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Mode {
    Ro,
    Rw,
}

/// Attachment Body data
#[derive(Args, Clone)]
struct Attachment {
    /// The `connector` object.
    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val::<String, Value>)]
    connector: Option<Vec<(String, Value)>>,

    /// The UUID of the volume which the attachment belongs to.
    #[arg(help_heading = "Body parameters", long)]
    instance_uuid: Option<String>,

    /// The attach mode of attachment, acceptable values are read-only (‘ro’)
    /// and read-and-write (‘rw’).
    ///
    /// **New in version 3.54**
    #[arg(help_heading = "Body parameters", long)]
    mode: Option<Mode>,

    /// The UUID of the volume which the attachment belongs to.
    #[arg(help_heading = "Body parameters", long)]
    volume_uuid: String,
}

impl AttachmentCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Attachment");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("block-storage.attachment"),
            Some("create"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create_354::Request::builder();
        ep_builder.header(
            http::header::HeaderName::from_static("openstack-api-version"),
            http::header::HeaderValue::from_static("volume 3.54"),
        );

        // Set body parameters
        // Set Request.attachment data
        let args = &self.attachment;
        let mut attachment_builder = create_354::AttachmentBuilder::default();
        if let Some(val) = &args.connector {
            attachment_builder.connector(val.iter().cloned());
        }

        if let Some(val) = &args.instance_uuid {
            attachment_builder.instance_uuid(val);
        }

        if let Some(val) = &args.mode {
            let tmp = match val {
                Mode::Ro => create_354::Mode::Ro,
                Mode::Rw => create_354::Mode::Rw,
            };
            attachment_builder.mode(tmp);
        }

        attachment_builder.volume_uuid(&args.volume_uuid);

        ep_builder.attachment(attachment_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<AttachmentResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

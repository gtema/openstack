// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create ManageableVolume command
//!
//! Wraps invoking of the `v3/manageable_volumes` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use crate::common::parse_json;
use crate::common::parse_key_val;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::manageable_volume::create;
use serde_json::Value;
use structable_derive::StructTable;

/// Instruct Cinder to manage a storage object.
///
/// Manages an existing backend storage object (e.g. a Linux logical volume or
/// a SAN disk) by creating the Cinder objects required to manage it, and
/// possibly renaming the backend storage object (driver dependent)
///
/// From an API perspective, this operation behaves very much like a volume
/// creation operation, except that properties such as image, snapshot and
/// volume references don't make sense, because we are taking an existing
/// storage object into Cinder management.
///
/// Required HTTP Body:
///
/// ```text
///
/// {
///   "volume": {
///     "host": "<Cinder host on which the existing storage resides>",
///     "cluster": "<Cinder cluster on which the storage resides>",
///     "ref": "<Driver-specific reference to existing storage object>"
///   }
/// }
///
/// ```
///
/// See the appropriate Cinder drivers' implementations of the manage_volume
/// method to find out the accepted format of 'ref'.
///
/// This API call will return with an error if any of the above elements are
/// missing from the request, or if the 'host' element refers to a cinder host
/// that is not registered.
///
/// The volume will later enter the error state if it is discovered that 'ref'
/// is bad.
///
/// Optional elements to 'volume' are:
///
/// ```text
///
/// name               A name for the new volume.
/// description        A description for the new volume.
/// volume_type        ID or name of a volume type to associate with
///                    the new Cinder volume. Does not necessarily
///                    guarantee that the managed volume will have the
///                    properties described in the volume_type. The
///                    driver may choose to fail if it identifies that
///                    the specified volume_type is not compatible with
///                    the backend storage object.
/// metadata           Key/value pairs to be associated with the new
///                    volume.
/// availability_zone  The availability zone to associate with the new
///                    volume.
/// bootable           If set to True, marks the volume as bootable.
///
/// ```
///
#[derive(Args)]
pub struct ManageableVolumeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `volume` object.
    ///
    #[command(flatten)]
    volume: Volume,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Volume Body data
#[derive(Args, Clone)]
struct Volume {
    /// The volume name.
    ///
    #[arg(help_heading = "Body parameters", long)]
    availability_zone: Option<String>,

    /// Enables or disables the bootable attribute. You can boot an instance
    /// from a bootable volume. See
    /// [valid boolean values](#valid-boolean-values)
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    bootable: Option<bool>,

    /// The volume description.
    ///
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// The OpenStack Block Storage host where the existing resource resides.
    /// Optional only if cluster field is provided.
    ///
    #[arg(help_heading = "Body parameters", long)]
    host: Option<String>,

    /// One or more metadata key and value pairs to be associated with the new
    /// volume.
    ///
    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val::<String, String>)]
    metadata: Option<Vec<(String, String)>>,

    /// The volume name.
    ///
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// A reference to the existing volume. The internal structure of this
    /// reference depends on the volume driver implementation. For details
    /// about the required elements in the structure, see the documentation for
    /// the volume driver.
    ///
    #[arg(help_heading = "Body parameters", long, value_name="JSON", value_parser=parse_json)]
    _ref: Value,

    /// The volume name.
    ///
    #[arg(help_heading = "Body parameters", long)]
    volume_type: Option<String>,
}

/// ManageableVolume response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// Instance attachment information. If this volume is attached to a server
    /// instance, the attachments list includes the UUID of the attached
    /// server, an attachment UUID, the name of the attached host, if any, the
    /// volume UUID, the device, and the device UUID. Otherwise, this list is
    /// empty. For example:
    ///
    /// ```text
    /// [
    ///   {
    ///     'server_id': '6c8cf6e0-4c8f-442f-9196-9679737feec6',
    ///     'attachment_id': '3dafcac4-1cb9-4b60-a227-d729baa10cf6',
    ///     'attached_at': '2019-09-30T19:30:34.000000',
    ///     'host_name': null,
    ///     'volume_id': '5d95d5ee-4bdd-4452-b9d7-d44ca10d3d53',
    ///     'device': '/dev/vda',
    ///     'id': '5d95d5ee-4bdd-4452-b9d7-d44ca10d3d53'
    ///   }
    /// ]
    ///
    /// ```
    ///
    #[serde()]
    #[structable(pretty)]
    attachments: Value,

    /// The name of the availability zone.
    ///
    #[serde()]
    #[structable(optional)]
    availability_zone: Option<String>,

    /// Enables or disables the bootable attribute. You can boot an instance
    /// from a bootable volume.
    ///
    #[serde()]
    #[structable()]
    bootable: String,

    /// The cluster name of volume backend.
    ///
    #[serde()]
    #[structable(optional)]
    cluster_name: Option<String>,

    /// The UUID of the consistency group.
    ///
    #[serde()]
    #[structable(optional)]
    consistencygroup_id: Option<String>,

    /// Whether this resource consumes quota or not. Resources that not counted
    /// for quota usage are usually temporary internal resources created to
    /// perform an operation.
    ///
    #[serde()]
    #[structable(optional)]
    consumes_quota: Option<bool>,

    /// The date and time when the resource was created.
    ///
    /// The date and time stamp format is
    /// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601):
    ///
    /// ```text
    /// CCYY-MM-DDThh:mm:ss±hh:mm
    ///
    /// ```
    ///
    /// For example, `2015-08-27T09:49:58-05:00`.
    ///
    /// The `±hh:mm` value, if included, is the time zone as an offset from
    /// UTC.
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// The volume description.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// If true, this volume is encrypted.
    ///
    #[serde()]
    #[structable()]
    encrypted: bool,

    /// The ID of the group.
    ///
    #[serde()]
    #[structable(optional)]
    group_id: Option<String>,

    /// The UUID of the volume.
    ///
    #[serde()]
    #[structable()]
    id: String,

    /// The volume links.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    links: Option<Value>,

    /// A `metadata` object. Contains one or more metadata key and value pairs
    /// that are associated with the volume.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    metadata: Option<Value>,

    /// The volume migration status. Admin only.
    ///
    #[serde()]
    #[structable()]
    migration_status: String,

    /// If true, this volume can attach to more than one instance.
    ///
    #[serde()]
    #[structable(optional)]
    multiattach: Option<bool>,

    /// The volume name.
    ///
    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    /// The provider ID for the volume. The value is either a string set by the
    /// driver or null if the driver doesn’t use the field or if it hasn’t
    /// created it yet. Only returned for administrators.
    ///
    #[serde()]
    #[structable(optional)]
    provider_id: Option<String>,

    /// The volume replication status.
    ///
    #[serde()]
    #[structable()]
    replication_status: String,

    /// A unique identifier that’s used to indicate what node the
    /// volume-service for a particular volume is being serviced by.
    ///
    #[serde()]
    #[structable(optional)]
    service_uuid: Option<String>,

    /// An indicator whether the host connecting the volume should lock for the
    /// whole attach/detach process or not. true means only is iSCSI initiator
    /// running on host doesn’t support manual scans, false means never use
    /// locks, and null means to always use locks. Look at os-brick’s
    /// guard_connection context manager. Default=True.
    ///
    #[serde()]
    #[structable(optional)]
    shared_targets: Option<bool>,

    /// The size of the volume, in gibibytes (GiB).
    ///
    #[serde()]
    #[structable()]
    size: i64,

    /// To create a volume from an existing snapshot, specify the UUID of the
    /// volume snapshot. The volume is created in same availability zone and
    /// with same size as the snapshot.
    ///
    #[serde()]
    #[structable(optional)]
    snapshot_id: Option<String>,

    /// The UUID of the source volume. The API creates a new volume with the
    /// same size as the source volume unless a larger size is requested.
    ///
    #[serde()]
    #[structable(optional)]
    source_volid: Option<String>,

    /// The volume status.
    ///
    #[serde()]
    #[structable()]
    status: String,

    /// The date and time when the resource was updated.
    ///
    /// The date and time stamp format is
    /// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601):
    ///
    /// ```text
    /// CCYY-MM-DDThh:mm:ss±hh:mm
    ///
    /// ```
    ///
    /// For example, `2015-08-27T09:49:58-05:00`.
    ///
    /// The `±hh:mm` value, if included, is the time zone as an offset from
    /// UTC. In the previous example, the offset value is `-05:00`.
    ///
    /// If the `updated_at` date and time stamp is not set, its value is
    /// `null`.
    ///
    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,

    /// The UUID of the user.
    ///
    #[serde()]
    #[structable()]
    user_id: String,

    /// A `volume_type` object.
    ///
    #[serde()]
    #[structable(optional)]
    volume_type: Option<String>,

    /// The associated volume type ID for the volume.
    ///
    #[serde()]
    #[structable(optional)]
    volume_type_id: Option<String>,
}

impl ManageableVolumeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create ManageableVolume");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.volume data
        let args = &self.volume;
        let mut volume_builder = create::VolumeBuilder::default();
        if let Some(val) = &args.description {
            volume_builder.description(Some(val.into()));
        }

        if let Some(val) = &args.availability_zone {
            volume_builder.availability_zone(Some(val.into()));
        }

        if let Some(val) = &args.bootable {
            volume_builder.bootable(*val);
        }

        if let Some(val) = &args.volume_type {
            volume_builder.volume_type(Some(val.into()));
        }

        if let Some(val) = &args.name {
            volume_builder.name(Some(val.into()));
        }

        if let Some(val) = &args.host {
            volume_builder.host(Some(val.into()));
        }

        volume_builder._ref(args._ref.clone());

        if let Some(val) = &args.metadata {
            volume_builder.metadata(val.iter().cloned());
        }

        ep_builder.volume(volume_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

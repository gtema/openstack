// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create GroupType command [microversion = 3.11]
//!
//! Wraps invoking of the `v3/group_types` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use crate::common::parse_key_val;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::group_type::create_311;
use openstack_types::block_storage::v3::group_type::response::create::GroupTypeResponse;

/// Creates a new group type.
#[derive(Args)]
pub struct GroupTypeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `group_type` object.
    #[command(flatten)]
    group_type: GroupType,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// GroupType Body data
#[derive(Args, Clone)]
struct GroupType {
    /// The group type description.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Set explicit NULL for the description
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "description")]
    no_description: bool,

    /// A set of key and value pairs that contains the specifications for a
    /// group type.
    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val::<String, String>)]
    group_specs: Option<Vec<(String, String)>>,

    /// Whether the group type is publicly visible. See
    /// [valid boolean values](#valid-boolean-values)
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    is_public: Option<bool>,

    /// The group type name.
    #[arg(help_heading = "Body parameters", long)]
    name: String,
}

impl GroupTypeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create GroupType");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("block-storage.group_type"),
            Some("create"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create_311::Request::builder();
        ep_builder.header(
            http::header::HeaderName::from_static("openstack-api-version"),
            http::header::HeaderValue::from_static("volume 3.11"),
        );

        // Set body parameters
        // Set Request.group_type data
        let args = &self.group_type;
        let mut group_type_builder = create_311::GroupTypeBuilder::default();
        if let Some(val) = &args.description {
            group_type_builder.description(Some(val.into()));
        } else if args.no_description {
            group_type_builder.description(None);
        }

        if let Some(val) = &args.group_specs {
            group_type_builder.group_specs(val.iter().cloned());
        }

        if let Some(val) = &args.is_public {
            group_type_builder.is_public(*val);
        }

        group_type_builder.name(&args.name);

        ep_builder.group_type(group_type_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<GroupTypeResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action VolumeTransfer command
//!
//! Wraps invoking of the `v3/volume-transfers/{id}/accept` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::volume_transfer::accept;
use serde_json::Value;
use structable_derive::StructTable;

/// Accept a new volume transfer.
///
#[derive(Args)]
pub struct VolumeTransferCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    accept: Accept,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v3/volume-transfers/{id}/accept API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Accept Body data
#[derive(Args, Clone)]
struct Accept {
    #[arg(help_heading = "Body parameters", long)]
    auth_key: String,
}

/// VolumeTransfer response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// Records if this transfer was accepted or not.
    ///
    /// **New in version 3.57**
    ///
    #[serde()]
    #[structable(optional)]
    accepted: Option<bool>,

    /// The date and time when the resource was created.
    ///
    /// The date and time stamp format is
    /// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601):
    ///
    /// ```text
    /// CCYY-MM-DDThh:mm:ss±hh:mm
    ///
    /// ```
    ///
    /// For example, `2015-08-27T09:49:58-05:00`.
    ///
    /// The `±hh:mm` value, if included, is the time zone as an offset from
    /// UTC.
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// Records the destination project_id after volume transfer.
    ///
    /// **New in version 3.57**
    ///
    #[serde()]
    #[structable(optional)]
    destination_project_id: Option<String>,

    /// The UUID of the object.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// Links for the message.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    links: Option<Value>,

    /// The name of the object.
    ///
    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    /// Transfer volume without snapshots. Defaults to False if not specified.
    ///
    /// **New in version 3.55**
    ///
    #[serde()]
    #[structable(optional)]
    no_snapshots: Option<bool>,

    /// Records the source project_id before volume transfer.
    ///
    /// **New in version 3.57**
    ///
    #[serde()]
    #[structable(optional)]
    source_project_id: Option<String>,

    /// The UUID of the volume.
    ///
    #[serde()]
    #[structable(optional)]
    volume_id: Option<String>,
}

impl VolumeTransferCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action VolumeTransfer");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = accept::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.accept data
        let args = &self.accept;
        let mut accept_builder = accept::AcceptBuilder::default();

        accept_builder.auth_key(&args.auth_key);

        ep_builder.accept(accept_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

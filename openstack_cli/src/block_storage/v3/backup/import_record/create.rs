// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create ImportRecord command
//!
//! Wraps invoking of the `v3/backups/import_record` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::backup::import_record::create;
use openstack_types::block_storage::v3::backup::import_record::response::create::ImportRecordResponse;

/// Import a backup.
#[derive(Args)]
pub struct ImportRecordCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// An object recording volume backup metadata, including `backup_service`
    /// and `backup_url`.
    #[command(flatten)]
    backup_record: BackupRecord,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// BackupRecord Body data
#[derive(Args, Clone)]
struct BackupRecord {
    /// The service used to perform the backup.
    #[arg(help_heading = "Body parameters", long)]
    backup_service: String,

    /// An identifier string to locate the backup.
    #[arg(help_heading = "Body parameters", long)]
    backup_url: String,
}

impl ImportRecordCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create ImportRecord");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("block-storage.backup/import_record"),
            Some("None"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.backup_record data
        let args = &self.backup_record;
        let mut backup_record_builder = create::BackupRecordBuilder::default();

        backup_record_builder.backup_service(&args.backup_service);

        backup_record_builder.backup_url(&args.backup_url);

        ep_builder.backup_record(backup_record_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ImportRecordResponse>(data)?;
        Ok(())
    }
}

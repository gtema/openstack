// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Restore command
//!
//! Wraps invoking of the `v3/backups/{id}/restore` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::backup::restore::create;
use openstack_types::block_storage::v3::backup::restore::response::create::RestoreResponse;

/// Restore an existing backup to a volume.
#[derive(Args)]
pub struct RestoreCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    restore: Option<Restore>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v3/backups/{id}/restore API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Restore Body data
#[derive(Args, Clone)]
struct Restore {
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// Set explicit NULL for the name
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "name")]
    no_name: bool,

    #[arg(help_heading = "Body parameters", long)]
    volume_id: Option<String>,

    /// Set explicit NULL for the volume_id
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "volume_id")]
    no_volume_id: bool,
}

impl RestoreCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Restore");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("block-storage.backup/restore"),
            Some("create"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        ep_builder.id(&self.path.id);

        // Set body parameters
        // Set Request.restore data
        if let Some(lrestore) = &self.restore {
            let mut restore_builder = create::RestoreBuilder::default();
            if let Some(val) = &lrestore.name {
                restore_builder.name(Some(val.into()));
            }
            if let Some(val) = &lrestore.volume_id {
                restore_builder.volume_id(Some(val.into()));
            }
            ep_builder.restore(restore_builder.build().expect("A valid object"));
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<RestoreResponse>(data)?;
        Ok(())
    }
}

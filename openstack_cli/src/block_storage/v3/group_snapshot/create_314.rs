// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create GroupSnapshot command [microversion = 3.14]
//!
//! Wraps invoking of the `v3/group_snapshots` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::group_snapshot::create_314;
use openstack_types::block_storage::v3::group_snapshot::response::create::GroupSnapshotResponse;

/// Create a new group_snapshot.
#[derive(Args)]
pub struct GroupSnapshotCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The group snapshot.
    #[command(flatten)]
    group_snapshot: GroupSnapshot,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// GroupSnapshot Body data
#[derive(Args, Clone)]
struct GroupSnapshot {
    /// The group snapshot description.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Set explicit NULL for the description
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "description")]
    no_description: bool,

    /// The ID of the group.
    #[arg(help_heading = "Body parameters", long)]
    group_id: String,

    /// The group snapshot name.
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// Set explicit NULL for the name
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "name")]
    no_name: bool,
}

impl GroupSnapshotCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create GroupSnapshot");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("block-storage.group_snapshot"),
            Some("create"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create_314::Request::builder();
        ep_builder.header(
            http::header::HeaderName::from_static("openstack-api-version"),
            http::header::HeaderValue::from_static("volume 3.14"),
        );

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.group_snapshot data
        let args = &self.group_snapshot;
        let mut group_snapshot_builder = create_314::GroupSnapshotBuilder::default();
        if let Some(val) = &args.description {
            group_snapshot_builder.description(Some(val.into()));
        } else if args.no_description {
            group_snapshot_builder.description(None);
        }

        group_snapshot_builder.group_id(&args.group_id);

        if let Some(val) = &args.name {
            group_snapshot_builder.name(Some(val.into()));
        } else if args.no_name {
            group_snapshot_builder.name(None);
        }

        ep_builder.group_snapshot(group_snapshot_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<GroupSnapshotResponse>(data)?;
        Ok(())
    }
}

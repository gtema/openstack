// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List Types command
//!
//! Wraps invoking of the `v3/types` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::r#type::list;
use serde_json::Value;
use structable_derive::StructTable;

/// Returns the list of volume types.
///
#[derive(Args)]
pub struct TypesCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Types response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The volume type description.
    ///
    #[serde()]
    #[structable(optional, wide)]
    description: Option<String>,

    /// A key and value pair that contains additional specifications that are
    /// associated with the volume type. Examples include capabilities,
    /// capacity, compression, and so on, depending on the storage driver in
    /// use.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    extra_specs: Option<Value>,

    /// The UUID of the volume type.
    ///
    #[serde()]
    #[structable()]
    id: String,

    /// Whether the volume type is publicly visible.
    ///
    #[serde()]
    #[structable(optional, wide)]
    is_public: Option<bool>,

    /// The name of the volume type.
    ///
    #[serde()]
    #[structable()]
    name: String,

    /// Whether the volume type is publicly visible.
    ///
    #[serde(rename = "os-volume-type-access:is_public")]
    #[structable(optional, title = "os-volume-type-access:is_public", wide)]
    os_volume_type_access_is_public: Option<bool>,

    /// The QoS specifications ID.
    ///
    #[serde()]
    #[structable(optional, wide)]
    qos_specs_id: Option<String>,
}

impl TypesCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List Types");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let ep_builder = list::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = ep.query_async(client).await?;

        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

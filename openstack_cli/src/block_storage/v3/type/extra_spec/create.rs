// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create ExtraSpec command
//!
//! Wraps invoking of the `v3/types/{type_id}/extra_specs` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use crate::common::parse_key_val_opt;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::block_storage::v3::r#type::extra_spec::create;
use openstack_types::block_storage::v3::r#type::extra_spec::response::create::ExtraSpecResponse;

/// Command without description in OpenAPI
#[derive(Args)]
pub struct ExtraSpecCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val_opt::<String, String>)]
    extra_specs: Vec<(String, Option<String>)>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// type_id parameter for /v3/types/{type_id}/extra_specs/{id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_type_id",
        value_name = "TYPE_ID"
    )]
    type_id: String,
}

impl ExtraSpecCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create ExtraSpec");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("block-storage.type/extra_spec"),
            Some("create"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        ep_builder.type_id(&self.path.type_id);

        // Set body parameters
        // Set Request.extra_specs data

        ep_builder.extra_specs(
            self.extra_specs
                .iter()
                .cloned()
                .map(|(k, v)| (k, v.map(Into::into))),
        );

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ExtraSpecResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

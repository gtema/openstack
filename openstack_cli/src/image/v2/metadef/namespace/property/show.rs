// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Show Property command
//!
//! Wraps invoking of the `v2/metadefs/namespaces/{namespace_name}/properties/{property_name}` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::image::v2::metadef::namespace::property::get;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Shows the definition for a property.
///
/// If you use the `resource_type` query parameter, the API removes the prefix
/// of the resource type from the property name before it submits the query.
/// This enables you to look for a property name that starts with a prefix from
/// an associated resource type.
///
/// The response body shows a single property entity.
///
/// Normal response codes: 200
///
/// Error response codes: 401, 403, 404
///
#[derive(Args)]
#[command(about = "Show property definition")]
pub struct PropertyCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// namespace_name parameter for
    /// /v2/metadefs/namespaces/{namespace_name}/properties/{property_name} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_namespace_name",
        value_name = "NAMESPACE_NAME"
    )]
    namespace_name: String,

    /// property_name parameter for
    /// /v2/metadefs/namespaces/{namespace_name}/properties/{property_name} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_property_name",
        value_name = "PROPERTY_NAME"
    )]
    property_name: String,
}
/// Property response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// Describes extra items, if you use tuple typing. If the value of `items`
    /// is an array (tuple typing) and the instance is longer than the list of
    /// schemas in `items`, the additional items are described by the schema in
    /// this property. If this value is `false`, the instance cannot be longer
    /// than the list of schemas in `items`. If this value is `true`, that is
    /// equivalent to the empty schema (anything goes).
    ///
    #[serde(rename = "additionalItems")]
    #[structable(optional, title = "additionalItems")]
    additional_items: Option<bool>,

    #[serde(rename = "default")]
    #[structable(optional, pretty, title = "default")]
    _default: Option<Value>,

    /// Detailed description of the property.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// Enumerated list of property values.
    ///
    #[serde(rename = "enum")]
    #[structable(optional, pretty, title = "enum")]
    _enum: Option<Value>,

    /// Schema for the items in an array.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    items: Option<Value>,

    /// Maximum allowed numerical value.
    ///
    #[serde()]
    #[structable(optional)]
    maximum: Option<f32>,

    /// Maximum allowed string length.
    ///
    #[serde(rename = "maxItems")]
    #[structable(optional, title = "maxItems")]
    max_items: Option<i32>,

    /// Maximum allowed string length.
    ///
    #[serde(rename = "maxLength")]
    #[structable(optional, title = "maxLength")]
    max_length: Option<i32>,

    /// Minimum allowed numerical value.
    ///
    #[serde()]
    #[structable(optional)]
    minimum: Option<f32>,

    /// Minimum allowed string length.
    ///
    #[serde(rename = "minItems")]
    #[structable(optional, title = "minItems")]
    min_items: Option<i32>,

    /// Minimum allowed string length.
    ///
    #[serde(rename = "minLength")]
    #[structable(optional, title = "minLength")]
    min_length: Option<i32>,

    #[serde()]
    #[structable()]
    name: String,

    /// Operators property description.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    operators: Option<Value>,

    /// A regular expression (
    /// [ECMA 262](http://www.ecma-international.org/publications/standards/Ecma-262.htm)
    /// ) that a string value must match.
    ///
    #[serde()]
    #[structable(optional)]
    pattern: Option<String>,

    /// Indicates whether this is a read-only property.
    ///
    #[serde()]
    #[structable(optional)]
    readonly: Option<bool>,

    #[serde()]
    #[structable(optional, pretty)]
    required: Option<Value>,

    /// The title of the property.
    ///
    #[serde()]
    #[structable()]
    title: String,

    /// The property type.
    ///
    #[serde(rename = "type")]
    #[structable(title = "type")]
    _type: String,

    /// Indicates whether all values in the array must be distinct.
    ///
    #[serde(rename = "uniqueItems")]
    #[structable(optional, title = "uniqueItems")]
    unique_items: Option<bool>,
}

impl PropertyCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Show Property");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = get::Request::builder();

        // Set path parameters
        ep_builder.namespace_name(&self.path.namespace_name);
        ep_builder.property_name(&self.path.property_name);
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

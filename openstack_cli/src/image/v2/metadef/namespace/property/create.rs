// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Property command
//!
//! Wraps invoking of the `v2/metadefs/namespaces/{namespace_name}/properties` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use anyhow::Result;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use crate::common::parse_json;
use clap::ValueEnum;
use openstack_sdk::api::image::v2::metadef::namespace::property::create;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Creates a property definition in a namespace.
///
/// The schema is a subset of the JSON property definition schema.
///
/// Normal response codes: 201
///
/// Error response codes: 400, 404
///
#[derive(Args)]
#[command(about = "Create property")]
pub struct PropertyCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Describes extra items, if you use tuple typing. If the value of `items`
    /// is an array (tuple typing) and the instance is longer than the list of
    /// schemas in `items`, the additional items are described by the schema in
    /// this property. If this value is `false`, the instance cannot be longer
    /// than the list of schemas in `items`. If this value is `true`, that is
    /// equivalent to the empty schema (anything goes).
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    additional_items: Option<bool>,

    #[arg(help_heading = "Body parameters", long, value_name="JSON", value_parser=parse_json)]
    _default: Option<Value>,

    /// Detailed description of the property.
    ///
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Enumerated list of property values.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    _enum: Option<Vec<String>>,

    /// Schema for the items in an array.
    ///
    #[arg(help_heading = "Body parameters", long, value_name="JSON", value_parser=parse_json)]
    items: Option<Value>,

    /// Maximum allowed numerical value.
    ///
    #[arg(help_heading = "Body parameters", long)]
    maximum: Option<f32>,

    /// Maximum allowed string length.
    ///
    #[arg(help_heading = "Body parameters", long)]
    max_items: Option<i32>,

    /// Maximum allowed string length.
    ///
    #[arg(help_heading = "Body parameters", long)]
    max_length: Option<i32>,

    /// Minimum allowed numerical value.
    ///
    #[arg(help_heading = "Body parameters", long)]
    minimum: Option<f32>,

    /// Minimum allowed string length.
    ///
    #[arg(help_heading = "Body parameters", long)]
    min_items: Option<i32>,

    /// Minimum allowed string length.
    ///
    #[arg(help_heading = "Body parameters", long)]
    min_length: Option<i32>,

    #[arg(help_heading = "Body parameters", long)]
    name: String,

    /// Operators property description.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    operators: Option<Vec<String>>,

    /// A regular expression (
    /// [ECMA 262](http://www.ecma-international.org/publications/standards/Ecma-262.htm)
    /// ) that a string value must match.
    ///
    #[arg(help_heading = "Body parameters", long)]
    pattern: Option<String>,

    /// Indicates whether this is a read-only property.
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    readonly: Option<bool>,

    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    required: Option<Vec<String>>,

    /// The title of the property.
    ///
    #[arg(help_heading = "Body parameters", long)]
    title: String,

    /// The property type.
    ///
    #[arg(help_heading = "Body parameters", long)]
    _type: Type,

    /// Indicates whether all values in the array must be distinct.
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    unique_items: Option<bool>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// namespace_name parameter for
    /// /v2/metadefs/namespaces/{namespace_name}/properties/{property_name} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_namespace_name",
        value_name = "NAMESPACE_NAME"
    )]
    namespace_name: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Type {
    Array,
    Boolean,
    Integer,
    Number,
    Object,
    String,
}

/// Property response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// Describes extra items, if you use tuple typing. If the value of `items`
    /// is an array (tuple typing) and the instance is longer than the list of
    /// schemas in `items`, the additional items are described by the schema in
    /// this property. If this value is `false`, the instance cannot be longer
    /// than the list of schemas in `items`. If this value is `true`, that is
    /// equivalent to the empty schema (anything goes).
    ///
    #[serde(rename = "additionalItems")]
    #[structable(optional, title = "additionalItems")]
    additional_items: Option<bool>,

    #[serde(rename = "default")]
    #[structable(optional, pretty, title = "default")]
    _default: Option<Value>,

    /// Detailed description of the property.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// Enumerated list of property values.
    ///
    #[serde(rename = "enum")]
    #[structable(optional, pretty, title = "enum")]
    _enum: Option<Value>,

    /// Schema for the items in an array.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    items: Option<Value>,

    /// Maximum allowed numerical value.
    ///
    #[serde()]
    #[structable(optional)]
    maximum: Option<f32>,

    /// Maximum allowed string length.
    ///
    #[serde(rename = "maxItems")]
    #[structable(optional, title = "maxItems")]
    max_items: Option<i32>,

    /// Maximum allowed string length.
    ///
    #[serde(rename = "maxLength")]
    #[structable(optional, title = "maxLength")]
    max_length: Option<i32>,

    /// Minimum allowed numerical value.
    ///
    #[serde()]
    #[structable(optional)]
    minimum: Option<f32>,

    /// Minimum allowed string length.
    ///
    #[serde(rename = "minItems")]
    #[structable(optional, title = "minItems")]
    min_items: Option<i32>,

    /// Minimum allowed string length.
    ///
    #[serde(rename = "minLength")]
    #[structable(optional, title = "minLength")]
    min_length: Option<i32>,

    #[serde()]
    #[structable()]
    name: String,

    /// Operators property description.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    operators: Option<Value>,

    /// A regular expression (
    /// [ECMA 262](http://www.ecma-international.org/publications/standards/Ecma-262.htm)
    /// ) that a string value must match.
    ///
    #[serde()]
    #[structable(optional)]
    pattern: Option<String>,

    /// Indicates whether this is a read-only property.
    ///
    #[serde()]
    #[structable(optional)]
    readonly: Option<bool>,

    #[serde()]
    #[structable(optional, pretty)]
    required: Option<Value>,

    /// The title of the property.
    ///
    #[serde()]
    #[structable()]
    title: String,

    /// The property type.
    ///
    #[serde(rename = "type")]
    #[structable(title = "type")]
    _type: String,

    /// Indicates whether all values in the array must be distinct.
    ///
    #[serde(rename = "uniqueItems")]
    #[structable(optional, title = "uniqueItems")]
    unique_items: Option<bool>,
}

impl PropertyCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Property");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        ep_builder.namespace_name(&self.path.namespace_name);
        // Set query parameters
        // Set body parameters
        // Set Request.additional_items data
        if let Some(arg) = &self.additional_items {
            ep_builder.additional_items(*arg);
        }

        // Set Request._default data
        if let Some(arg) = &self._default {
            ep_builder._default(arg.clone());
        }

        // Set Request.description data
        if let Some(arg) = &self.description {
            ep_builder.description(arg);
        }

        // Set Request._enum data
        if let Some(arg) = &self._enum {
            ep_builder._enum(arg.iter().map(|v| v.into()).collect::<Vec<_>>());
        }

        // Set Request.items data
        if let Some(arg) = &self.items {
            ep_builder.items(serde_json::from_value::<create::Items>(arg.to_owned())?);
        }

        // Set Request.maximum data
        if let Some(arg) = &self.maximum {
            ep_builder.maximum(*arg);
        }

        // Set Request.max_items data
        if let Some(arg) = &self.max_items {
            ep_builder.max_items(*arg);
        }

        // Set Request.max_length data
        if let Some(arg) = &self.max_length {
            ep_builder.max_length(*arg);
        }

        // Set Request.minimum data
        if let Some(arg) = &self.minimum {
            ep_builder.minimum(*arg);
        }

        // Set Request.min_items data
        if let Some(arg) = &self.min_items {
            ep_builder.min_items(*arg);
        }

        // Set Request.min_length data
        if let Some(arg) = &self.min_length {
            ep_builder.min_length(*arg);
        }

        // Set Request.name data
        ep_builder.name(&self.name);

        // Set Request.operators data
        if let Some(arg) = &self.operators {
            ep_builder.operators(arg.iter().map(|v| v.into()).collect::<Vec<_>>());
        }

        // Set Request.pattern data
        if let Some(arg) = &self.pattern {
            ep_builder.pattern(arg);
        }

        // Set Request.readonly data
        if let Some(arg) = &self.readonly {
            ep_builder.readonly(*arg);
        }

        // Set Request.required data
        if let Some(arg) = &self.required {
            ep_builder.required(arg.iter().map(|v| v.into()).collect::<Vec<_>>());
        }

        // Set Request.title data
        ep_builder.title(&self.title);

        // Set Request._type data
        let tmp = match &self._type {
            Type::Array => create::Type::Array,
            Type::Boolean => create::Type::Boolean,
            Type::Integer => create::Type::Integer,
            Type::Number => create::Type::Number,
            Type::Object => create::Type::Object,
            Type::String => create::Type::String,
        };
        ep_builder._type(tmp);

        // Set Request.unique_items data
        if let Some(arg) = &self.unique_items {
            ep_builder.unique_items(*arg);
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Get ResourceType command
//!
//! Wraps invoking of the `v2/metadefs/resource_types` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use structable::StructTableOptions;
use crate::StructTable;

use openstack_sdk::api::image::v2::metadef::resource_type::get;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;


/// Lists all available resource types.
///
/// Using the other API calls in this section, you can create and maintain
/// *resource type associations* between metadata definition namespaces and the
/// resource types that are returned by this call.
///
/// Normal response codes: 200
///
/// Error response codes: 400, 401, 404
///
#[derive(Args)]
#[command(about = "List resource types")]
pub struct ResourceTypeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// ResourceType response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    #[serde()]
    #[structable(optional)]
    first: Option<String>,

    #[serde()]
    #[structable(optional)]
    next: Option<String>,

    #[serde()]
    #[structable(optional, pretty)]
    resource_type_associations: Option<Value>,

    #[serde()]
    #[structable(optional)]
    schema: Option<String>,
}

impl ResourceTypeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Get ResourceType");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let ep_builder = get::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = ep.query_async(client).await?;
        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Task command
//!
//! Wraps invoking of the `v2/tasks` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use crate::common::parse_key_val;
use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::image::v2::task::create;
use openstack_types::image::v2::task::response::create::TaskResponse;
use serde_json::Value;

/// Creates a task.
///
/// Normal response codes: 201
///
/// Error response codes: 401, 413, 415
#[derive(Args)]
#[command(about = "Create task")]
pub struct TaskCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Datetime when this resource was created
    #[arg(help_heading = "Body parameters", long)]
    created_at: Option<String>,

    /// Datetime when this resource would be subject to removal
    #[arg(help_heading = "Body parameters", long)]
    expires_at: Option<String>,

    /// An identifier for the task
    #[arg(help_heading = "Body parameters", long)]
    id: Option<String>,

    /// Image associated with the task
    #[arg(help_heading = "Body parameters", long)]
    image_id: Option<String>,

    /// A JSON object specifying the input parameters to the task. Consult your
    /// cloud providerâ€™s documentation for details.
    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val::<String, Value>)]
    input: Option<Vec<(String, Value)>>,

    /// Human-readable informative message only included when appropriate
    /// (usually on failure)
    #[arg(help_heading = "Body parameters", long)]
    message: Option<String>,

    /// An identifier for the owner of this task
    #[arg(help_heading = "Body parameters", long)]
    owner: Option<String>,

    /// Human-readable informative request-id
    #[arg(help_heading = "Body parameters", long)]
    request_id: Option<String>,

    /// The result of current task, JSON blob
    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val::<String, Value>)]
    result: Option<Vec<(String, Value)>>,

    /// The current status of this task
    #[arg(help_heading = "Body parameters", long)]
    status: Option<Status>,

    /// The type of task represented by this content.
    #[arg(help_heading = "Body parameters", long)]
    _type: Option<Type>,

    /// Datetime when this resource was updated
    #[arg(help_heading = "Body parameters", long)]
    updated_at: Option<String>,

    /// User associated with the task
    #[arg(help_heading = "Body parameters", long)]
    user_id: Option<String>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Type {
    ApiImageImport,
    Import,
    LocationImport,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Status {
    Failure,
    Pending,
    Processing,
    Success,
}

impl TaskCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Task");

        let op = OutputProcessor::from_args_with_resource_key(parsed_args, "image.task");
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.created_at data
        if let Some(arg) = &self.created_at {
            ep_builder.created_at(arg);
        }

        // Set Request.expires_at data
        if let Some(arg) = &self.expires_at {
            ep_builder.expires_at(Some(arg.into()));
        }

        // Set Request.id data
        if let Some(arg) = &self.id {
            ep_builder.id(arg);
        }

        // Set Request.image_id data
        if let Some(arg) = &self.image_id {
            ep_builder.image_id(arg);
        }

        // Set Request.input data
        if let Some(arg) = &self.input {
            ep_builder.input(arg.iter().cloned());
        }

        // Set Request.message data
        if let Some(arg) = &self.message {
            ep_builder.message(arg);
        }

        // Set Request.owner data
        if let Some(arg) = &self.owner {
            ep_builder.owner(arg);
        }

        // Set Request.request_id data
        if let Some(arg) = &self.request_id {
            ep_builder.request_id(arg);
        }

        // Set Request.result data
        if let Some(arg) = &self.result {
            ep_builder.result(arg.iter().cloned());
        }

        // Set Request.status data
        if let Some(arg) = &self.status {
            let tmp = match arg {
                Status::Failure => create::Status::Failure,
                Status::Pending => create::Status::Pending,
                Status::Processing => create::Status::Processing,
                Status::Success => create::Status::Success,
            };
            ep_builder.status(tmp);
        }

        // Set Request._type data
        if let Some(arg) = &self._type {
            let tmp = match arg {
                Type::ApiImageImport => create::Type::ApiImageImport,
                Type::Import => create::Type::Import,
                Type::LocationImport => create::Type::LocationImport,
            };
            ep_builder._type(tmp);
        }

        // Set Request.updated_at data
        if let Some(arg) = &self.updated_at {
            ep_builder.updated_at(arg);
        }

        // Set Request.user_id data
        if let Some(arg) = &self.user_id {
            ep_builder.user_id(arg);
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<TaskResponse>(data)?;
        Ok(())
    }
}

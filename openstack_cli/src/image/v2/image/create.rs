// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Image command
//!
//! Wraps invoking of the `v2/images` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use anyhow::Result;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use crate::common::parse_json;
use crate::common::parse_key_val;
use bytes::Bytes;
use clap::ValueEnum;
use http::Response;
use openstack_sdk::api::image::v2::image::create;
use openstack_sdk::api::RawQueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Creates a catalog record for an operating system disk image. *(Since Image
/// API v2.0)*
///
/// The `Location` response header contains the URI for the image.
///
/// A multiple store backend support is introduced in the Rocky release as a
/// part of the EXPERIMENTAL Image API v2.8. Since Image API v2.8 a new header
/// `OpenStack-image-store-ids` which contains the list of available stores
/// will be included in response. This header is only included if multiple
/// backend stores are supported.
///
/// The response body contains the new image entity.
///
/// Synchronous Postconditions
///
/// Normal response codes: 201
///
/// Error response codes: 400, 401, 403, 409, 413, 415
///
#[derive(Args)]
#[command(about = "Create image")]
pub struct ImageCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[arg(long)]
    container_format: Option<ContainerFormat>,
    #[arg(long)]
    disk_format: Option<DiskFormat>,
    #[arg(long)]
    id: Option<String>,
    #[arg(action=clap::ArgAction::Append, long, value_name="JSON", value_parser=parse_json)]
    locations: Option<Vec<Value>>,
    #[arg(long)]
    min_disk: Option<i32>,
    #[arg(long)]
    min_ram: Option<i32>,
    #[arg(long)]
    name: Option<String>,
    #[arg(action=clap::ArgAction::Set, long)]
    os_hidden: Option<bool>,
    #[arg(long)]
    owner: Option<String>,
    #[arg(action=clap::ArgAction::Set, long)]
    protected: Option<bool>,
    #[arg(action=clap::ArgAction::Append, long)]
    tags: Option<Vec<String>>,
    #[arg(long)]
    visibility: Option<Visibility>,
    /// Additional properties to be sent with the request
    #[arg(long="property", value_name="key=value", value_parser=parse_key_val::<String, String>)]
    properties: Option<Vec<(String, String)>>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Visibility {
    Community,
    Private,
    Public,
    Shared,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum ContainerFormat {
    Aki,
    Ami,
    Ari,
    Bare,
    Compressed,
    Docker,
    Ova,
    Ovf,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum DiskFormat {
    Aki,
    Ami,
    Ari,
    Iso,
    Ploop,
    Qcow2,
    Raw,
    Vdi,
    Vhd,
    Vhdx,
    Vmdk,
}

/// Image response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {}

impl ImageCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Image");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.container_format data
        if let Some(args) = &self.container_format {
            let tmp = match args {
                ContainerFormat::Aki => create::ContainerFormat::Aki,
                ContainerFormat::Ami => create::ContainerFormat::Ami,
                ContainerFormat::Ari => create::ContainerFormat::Ari,
                ContainerFormat::Bare => create::ContainerFormat::Bare,
                ContainerFormat::Compressed => create::ContainerFormat::Compressed,
                ContainerFormat::Docker => create::ContainerFormat::Docker,
                ContainerFormat::Ova => create::ContainerFormat::Ova,
                ContainerFormat::Ovf => create::ContainerFormat::Ovf,
            };
            ep_builder.container_format(tmp);
        }

        // Set Request.disk_format data
        if let Some(args) = &self.disk_format {
            let tmp = match args {
                DiskFormat::Aki => create::DiskFormat::Aki,
                DiskFormat::Ami => create::DiskFormat::Ami,
                DiskFormat::Ari => create::DiskFormat::Ari,
                DiskFormat::Iso => create::DiskFormat::Iso,
                DiskFormat::Ploop => create::DiskFormat::Ploop,
                DiskFormat::Qcow2 => create::DiskFormat::Qcow2,
                DiskFormat::Raw => create::DiskFormat::Raw,
                DiskFormat::Vdi => create::DiskFormat::Vdi,
                DiskFormat::Vhd => create::DiskFormat::Vhd,
                DiskFormat::Vhdx => create::DiskFormat::Vhdx,
                DiskFormat::Vmdk => create::DiskFormat::Vmdk,
            };
            ep_builder.disk_format(tmp);
        }

        // Set Request.id data
        if let Some(args) = &self.id {
            ep_builder.id(args);
        }

        // Set Request.locations data
        if let Some(args) = &self.locations {
            let locations_builder: Vec<create::Locations> = args
                .iter()
                .flat_map(|v| serde_json::from_value::<create::Locations>(v.to_owned()))
                .collect::<Vec<create::Locations>>();
            ep_builder.locations(locations_builder);
        }

        // Set Request.min_disk data
        if let Some(args) = &self.min_disk {
            ep_builder.min_disk(*args);
        }

        // Set Request.min_ram data
        if let Some(args) = &self.min_ram {
            ep_builder.min_ram(*args);
        }

        // Set Request.name data
        if let Some(args) = &self.name {
            ep_builder.name(Some(args.into()));
        }

        // Set Request.os_hidden data
        if let Some(args) = &self.os_hidden {
            ep_builder.os_hidden(*args);
        }

        // Set Request.owner data
        if let Some(args) = &self.owner {
            ep_builder.owner(Some(args.into()));
        }

        // Set Request.protected data
        if let Some(args) = &self.protected {
            ep_builder.protected(*args);
        }

        // Set Request.tags data
        if let Some(args) = &self.tags {
            ep_builder.tags(args.iter().map(|v| v.into()).collect::<Vec<_>>());
        }

        // Set Request.visibility data
        if let Some(args) = &self.visibility {
            let tmp = match args {
                Visibility::Community => create::Visibility::Community,
                Visibility::Private => create::Visibility::Private,
                Visibility::Public => create::Visibility::Public,
                Visibility::Shared => create::Visibility::Shared,
            };
            ep_builder.visibility(tmp);
        }

        if let Some(properties) = &self.properties {
            ep_builder.properties(properties.iter().cloned());
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let _rsp: Response<Bytes> = ep.raw_query_async(client).await?;
        let data = ResponseData {};
        // Maybe output some headers metadata
        op.output_human::<ResponseData>(&data)?;
        Ok(())
    }
}

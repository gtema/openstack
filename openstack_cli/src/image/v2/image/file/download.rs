// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Download File command
//!
//! Wraps invoking of the `v2/images/{image_id}/file` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use anyhow::Result;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use crate::common::download_file;
use openstack_sdk::api::find;
use openstack_sdk::api::image::v2::image::file::download;
use openstack_sdk::api::image::v2::image::find;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::RawQueryAsync;
use structable_derive::StructTable;

/// Downloads binary image data. *(Since Image API v2.0)*
///
/// Example call:
/// `curl -i -X GET -H "X-Auth-Token: $token" $image_url/v2/images/{image_id}/file`
///
/// The response body contains the raw binary data that represents the actual
/// virtual disk. The `Content-Type` header contains the
/// `application/octet-stream` value. The `Content-MD5` header contains an MD5
/// checksum of the image data. Use this checksum to verify the integrity of
/// the image data.
///
/// **Preconditions**
///
/// **Synchronous Postconditions**
///
/// Normal response codes: 200, 204, 206
///
/// Error response codes: 400, 403, 404, 416
///
#[derive(Args)]
#[command(about = "Download binary image data")]
pub struct FileCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Destination filename (using "-" will print object to stdout)
    #[arg(long)]
    file: Option<String>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// image_id parameter for /v2/images/{image_id}/members/{member_id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_image_id",
        value_name = "IMAGE_ID"
    )]
    image_id: String,
}
/// File response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {}

impl FileCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Download File");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;
        let find_ep = find::Request::builder()
            .id(&self.path.image_id)
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let image_data: serde_json::Value = find(find_ep).query_async(client).await?;

        let image_id = image_data["id"]
            .as_str()
            .expect("Image ID is a string")
            .to_string();
        let image_name = image_data["name"]
            .as_str()
            .expect("Image name is a string")
            .to_string();

        let ep = download::Request::builder()
            .image_id(image_id)
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let (headers, data) = ep.download_async(client).await?;

        let size: u64 = headers
            .get("content-length")
            .map(|x| x.to_str().expect("Header is a string"))
            .unwrap_or("0")
            .parse()
            .unwrap();
        download_file(self.file.clone().unwrap_or(image_name), size, data).await?;
        Ok(())
    }
}

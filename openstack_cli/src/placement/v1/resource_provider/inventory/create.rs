// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Inventory command
//!
//! Wraps invoking of the `resource_providers/{uuid}/inventories` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use crate::common::parse_json;
use crate::common::parse_key_val;
use openstack_sdk::api::placement::v1::resource_provider::inventory::create;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use std::fmt;
use structable_derive::StructTable;

/// POST to create one inventory.
///
/// On success return a 201 response, a location header pointing to the newly
/// created inventory and an application/json representation of the inventory.
///
#[derive(Args)]
pub struct InventoryCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A dictionary of inventories keyed by resource classes.
    ///
    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val::<String, Value>)]
    inventories: Vec<(String, Value)>,

    /// A consistent view marker that assists with the management of concurrent
    /// resource provider updates.
    ///
    #[arg(help_heading = "Body parameters", long)]
    resource_provider_generation: i32,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// uuid parameter for
    /// /resource_providers/{uuid}/inventories/{resource_class} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_uuid",
        value_name = "UUID"
    )]
    uuid: String,
}
/// Inventory response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// A dictionary of inventories keyed by resource classes.
    ///
    #[serde()]
    #[structable(pretty)]
    inventories: Value,

    /// A consistent view marker that assists with the management of concurrent
    /// resource provider updates.
    ///
    #[serde()]
    #[structable()]
    resource_provider_generation: i32,
}
/// `struct` response type
#[derive(Default, Clone, Deserialize, Serialize)]
struct ResponseInventories {
    allocation_ratio: Option<f32>,
    max_unit: Option<i32>,
    min_unit: Option<i32>,
    reserved: Option<i32>,
    step_size: Option<i32>,
    total: i32,
}

impl fmt::Display for ResponseInventories {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let data = Vec::from([
            format!(
                "allocation_ratio={}",
                self.allocation_ratio
                    .map_or(String::new(), |v| v.to_string())
            ),
            format!(
                "max_unit={}",
                self.max_unit.map_or(String::new(), |v| v.to_string())
            ),
            format!(
                "min_unit={}",
                self.min_unit.map_or(String::new(), |v| v.to_string())
            ),
            format!(
                "reserved={}",
                self.reserved.map_or(String::new(), |v| v.to_string())
            ),
            format!(
                "step_size={}",
                self.step_size.map_or(String::new(), |v| v.to_string())
            ),
            format!("total={}", self.total),
        ]);
        write!(f, "{}", data.join(";"))
    }
}

impl InventoryCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Inventory");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        ep_builder.uuid(&self.path.uuid);
        // Set query parameters
        // Set body parameters
        // Set Request.inventories data

        ep_builder.inventories(
            &self
                .inventories
                .into_iter()
                .map(|(k, v)| {
                    serde_json::from_value(v.to_owned()).map(|v: create::Inventories| (k, v))
                })
                .collect::<Result<Vec<_>, _>>()?
                .into_iter(),
        );

        // Set Request.resource_provider_generation data
        ep_builder.resource_provider_generation(self.resource_provider_generation);

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

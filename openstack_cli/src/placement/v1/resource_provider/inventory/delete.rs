// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Delete Inventory command
//!
//! Wraps invoking of the `resource_providers/{uuid}/inventories/{resource_class}` with `DELETE` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::placement::v1::resource_provider::inventory::delete;

/// Delete the inventory record of the {resource_class} for the resource
/// provider identified by {uuid}.
///
/// See
/// [Troubleshooting](?expanded=delete-resource-provider-inventories-detail#delete-resource-provider-inventories)
/// section in `Delete resource provider inventories` for a description. In
/// addition, the request returns HTTP 409 when there are allocations for the
/// specified resource provider and resource class.
///
/// Normal Response Codes: 204
///
/// Error response codes: itemNotFound(404), conflict(409)
#[derive(Args)]
#[command(about = "Delete resource provider inventory")]
pub struct InventoryCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// resource_class parameter for
    /// /resource_providers/{uuid}/inventories/{resource_class} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_resource_class",
        value_name = "RESOURCE_CLASS"
    )]
    resource_class: String,

    /// uuid parameter for
    /// /resource_providers/{uuid}/inventories/{resource_class} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_uuid",
        value_name = "UUID"
    )]
    uuid: String,
}

impl InventoryCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Delete Inventory");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("placement.resource_provider/inventory"),
            Some("delete"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = delete::Request::builder();

        ep_builder.resource_class(&self.path.resource_class);
        ep_builder.uuid(&self.path.uuid);

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        openstack_sdk::api::ignore(ep).query_async(client).await?;
        Ok(())
    }
}

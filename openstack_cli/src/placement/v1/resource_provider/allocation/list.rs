// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Show Allocation command
//!
//! Wraps invoking of the `resource_providers/{uuid}/allocations` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::placement::v1::resource_provider::allocation::list;
use serde_json::Value;
use std::fmt;
use structable_derive::StructTable;

/// Return a representation of all allocations made against this resource
/// provider, keyed by consumer uuid. Each allocation includes one or more
/// classes of resource and the amount consumed.
///
/// Normal Response Codes: 200
///
/// Error response codes: itemNotFound(404)
///
#[derive(Args)]
#[command(about = "List resource provider allocations")]
pub struct AllocationCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// uuid parameter for /resource_providers/{uuid}/allocations API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_uuid",
        value_name = "UUID"
    )]
    uuid: String,
}
/// Allocation response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// A dictionary of allocation records keyed by consumer uuid.
    ///
    #[serde()]
    #[structable(pretty)]
    allocations: Value,

    /// A consistent view marker that assists with the management of concurrent
    /// resource provider updates.
    ///
    #[serde()]
    #[structable()]
    resource_provider_generation: i32,
}
/// `struct` response type
#[derive(Default, Clone, Deserialize, Serialize)]
struct ResponseAllocationsItem {
    resources: Value,
}

impl fmt::Display for ResponseAllocationsItem {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let data = Vec::from([format!("resources={}", self.resources)]);
        write!(f, "{}", data.join(";"))
    }
}

impl AllocationCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Show Allocation");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        ep_builder.uuid(&self.path.uuid);
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Allocation command [microversion = 1.38]
//!
//! Wraps invoking of the `allocations` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use crate::common::parse_key_val;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::placement::v1::allocation::create_138;
use serde_json::Value;

/// Create, update or delete allocations for multiple consumers in a single
/// request. This allows a client to atomically set or swap allocations for
/// multiple consumers as may be required during a migration or move type
/// operation.
///
/// The allocations for an individual consumer uuid mentioned in the request
/// can be removed by setting the allocations to an empty object (see the
/// example below).
///
/// **Available as of microversion 1.13.**
///
/// Normal response codes: 204
///
/// Error response codes: badRequest(400), conflict(409)
#[derive(Args)]
#[command(about = "Manage allocations (microversion = 1.38)")]
pub struct AllocationCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[arg(long="property", value_name="key=value", value_parser=parse_key_val::<String, Value>)]
    #[arg(help_heading = "Body parameters")]
    properties: Option<Vec<(String, Value)>>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

impl AllocationCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Allocation");

        let op =
            OutputProcessor::from_args(parsed_args, Some("placement.allocation"), Some("None"));
        op.validate_args(parsed_args)?;

        let mut ep_builder = create_138::Request::builder();
        ep_builder.header("OpenStack-API-Version", "placement 1.38");

        // Set path parameters
        // Set query parameters
        // Set body parameters
        if let Some(properties) = &self.properties {
            ep_builder.properties(
                properties
                    .iter()
                    .map(|(k, v)| {
                        serde_json::from_value(v.to_owned()).map(|v: create_138::Item| (k, v))
                    })
                    .collect::<Result<Vec<_>, _>>()?
                    .into_iter(),
            );
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        openstack_sdk::api::ignore(ep).query_async(client).await?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Aggregate command [microversion = 2.1]
//!
//! Wraps invoking of the `v2.1/os-aggregates` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::aggregate::create_21;
use openstack_types::compute::v2::aggregate::response::create::AggregateResponse;

/// Creates an aggregate. If specifying an option availability_zone, the
/// aggregate is created as an availability zone and the availability zone is
/// visible to normal users.
///
/// Normal response codes: 200
///
/// Error response codes: badRequest(400), unauthorized(401), forbidden(403),
/// conflict(409)
#[derive(Args)]
#[command(about = "Create Aggregate (microversion = 2.1)")]
pub struct AggregateCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The host aggregate object.
    #[command(flatten)]
    aggregate: Aggregate,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Aggregate Body data
#[derive(Args, Clone)]
struct Aggregate {
    /// The availability zone of the host aggregate. You should use a custom
    /// availability zone rather than the default returned by the
    /// os-availability-zone API. The availability zone must not include ‘:’ in
    /// its name.
    #[arg(help_heading = "Body parameters", long)]
    availability_zone: Option<String>,

    /// The name of the host aggregate.
    #[arg(help_heading = "Body parameters", long)]
    name: String,
}

impl AggregateCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Aggregate");

        let op = OutputProcessor::from_args_with_resource_key(parsed_args, "compute.aggregate");
        op.validate_args(parsed_args)?;

        let mut ep_builder = create_21::Request::builder();
        ep_builder.header("OpenStack-API-Version", "compute 2.1");

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.aggregate data
        let args = &self.aggregate;
        let mut aggregate_builder = create_21::AggregateBuilder::default();

        aggregate_builder.name(&args.name);

        if let Some(val) = &args.availability_zone {
            aggregate_builder.availability_zone(Some(val.into()));
        }

        ep_builder.aggregate(aggregate_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<AggregateResponse>(data)?;
        Ok(())
    }
}

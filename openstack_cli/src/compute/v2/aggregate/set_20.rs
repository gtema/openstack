// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set Aggregate command [microversion = 2.0]
//!
//! Wraps invoking of the `v2.1/os-aggregates/{id}` with `PUT` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::aggregate::find;
use openstack_sdk::api::compute::v2::aggregate::set_20;
use openstack_sdk::api::find;
use openstack_types::compute::v2::aggregate::response::set::AggregateResponse;

/// Updates either or both the name and availability zone for an aggregate. If
/// the aggregate to be updated has host that already in the given availability
/// zone, the request will fail with 400 error.
///
/// Normal response codes: 200
///
/// Error response codes: badRequest(400), unauthorized(401), forbidden(403),
/// itemNotFound(404), conflict(409)
#[derive(Args)]
#[command(about = "Update Aggregate (microversion = 2.0)")]
pub struct AggregateCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The host aggregate object.
    #[command(flatten)]
    aggregate: Aggregate,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.1/os-aggregates/{id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Aggregate Body data
#[derive(Args, Clone)]
struct Aggregate {
    /// The availability zone of the host aggregate. You should use a custom
    /// availability zone rather than the default returned by the
    /// os-availability-zone API. The availability zone must not include ‘:’ in
    /// its name.
    ///
    /// Warning
    ///
    /// You should not change or unset the availability zone of an aggregate
    /// when that aggregate has hosts which contain servers in it since that
    /// may impact the ability for those servers to move to another host.
    #[arg(help_heading = "Body parameters", long)]
    availability_zone: Option<String>,

    /// Set explicit NULL for the availability_zone
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "availability_zone")]
    no_availability_zone: bool,

    /// The name of the host aggregate.
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,
}

impl AggregateCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set Aggregate");

        let op = OutputProcessor::from_args_with_resource_key(parsed_args, "compute.aggregate");
        op.validate_args(parsed_args)?;

        let mut find_builder = find::Request::builder();

        find_builder.id(&self.path.id);
        find_builder.header("OpenStack-API-Version", "compute 2.0");
        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;

        let mut ep_builder = set_20::Request::builder();
        ep_builder.header("OpenStack-API-Version", "compute 2.0");

        // Set path parameters
        let resource_id = find_data["id"]
            .as_str()
            .expect("Resource ID is a string")
            .to_string();
        ep_builder.id(resource_id.clone());
        // Set query parameters
        // Set body parameters
        // Set Request.aggregate data
        let args = &self.aggregate;
        let mut aggregate_builder = set_20::AggregateBuilder::default();
        if let Some(val) = &args.name {
            aggregate_builder.name(val);
        }

        if let Some(val) = &args.availability_zone {
            aggregate_builder.availability_zone(Some(val.into()));
        } else if args.no_availability_zone {
            aggregate_builder.availability_zone(None);
        }

        ep_builder.aggregate(aggregate_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<AggregateResponse>(data)?;
        Ok(())
    }
}

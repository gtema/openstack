// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action Server command [microversion = 2.1]
//!
//! Wraps invoking of the `v2.1/servers/{id}/action` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::server::remove_floating_ip_21;

/// Removes, or disassociates, a floating IP address from a server.
///
/// The IP address is returned to the pool of IP addresses that is available
/// for all projects. When you remove a floating IP address and that IP address
/// is still associated with a running instance, it is automatically
/// disassociated from that instance.
///
/// Specify the `removeFloatingIp` action in the request body.
///
/// Normal response codes: 202
///
/// Error response codes: badRequest(400), unauthorized(401), forbidden(403),
/// itemNotFound(404), conflict(409)
#[derive(Args)]
#[command(
    about = "Remove (Disassociate) Floating Ip (removeFloatingIp Action) (DEPRECATED) (microversion = 2.1)"
)]
pub struct ServerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The action to remove or disassociate a floating IP address from the
    /// server.
    #[command(flatten)]
    remove_floating_ip: RemoveFloatingIp,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.1/servers/{id}/action API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// RemoveFloatingIp Body data
#[derive(Args, Clone)]
struct RemoveFloatingIp {
    /// The floating IP address.
    #[arg(help_heading = "Body parameters", long)]
    address: String,
}

impl ServerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action Server");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("compute.server"),
            Some("remove_floating_ip"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = remove_floating_ip_21::Request::builder();
        ep_builder.header(
            http::header::HeaderName::from_static("openstack-api-version"),
            http::header::HeaderValue::from_static("compute 2.1"),
        );

        ep_builder.id(&self.path.id);

        // Set body parameters
        // Set Request.remove_floating_ip data
        let args = &self.remove_floating_ip;
        let mut remove_floating_ip_builder =
            remove_floating_ip_21::RemoveFloatingIpBuilder::default();

        remove_floating_ip_builder.address(&args.address);

        ep_builder.remove_floating_ip(remove_floating_ip_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        openstack_sdk::api::ignore(ep).query_async(client).await?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

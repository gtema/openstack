// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action Server command
//!
//! Wraps invoking of the `v2.1/servers/{id}/action` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use bytes::Bytes;
use clap::ValueEnum;
use http::Response;
use openstack_sdk::api::compute::v2::server::reboot;
use openstack_sdk::api::RawQueryAsync;
use structable_derive::StructTable;

/// Reboots a server.
///
/// Specify the `reboot` action in the request body.
///
/// **Preconditions**
///
/// The preconditions for rebooting a server depend on the type of reboot.
///
/// You can only *SOFT* reboot a server when its status is `ACTIVE`.
///
/// You can only *HARD* reboot a server when its status is one of:
///
/// If the server is locked, you must have administrator privileges to reboot
/// the server.
///
/// **Asynchronous Postconditions**
///
/// After you successfully reboot a server, its status changes to `ACTIVE`.
///
/// Normal response codes: 202
///
/// Error response codes: unauthorized(401), forbidden(403), itemNotFound(404),
/// conflict(409)
///
#[derive(Args)]
#[command(about = "Reboot Server (reboot Action)")]
pub struct ServerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The action to reboot a server.
    ///
    #[command(flatten)]
    reboot: Reboot,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.1/servers/{id}/action API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Type {
    Hard,
    Soft,
}

/// Reboot Body data
#[derive(Args, Clone)]
struct Reboot {
    /// The type of the reboot action. The valid values are `HARD` and `SOFT`.
    /// A `SOFT` reboot attempts a graceful shutdown and restart of the server.
    /// A `HARD` reboot attempts a forced shutdown and restart of the server.
    /// The `HARD` reboot corresponds to the power cycles of the server.
    ///
    #[arg(help_heading = "Body parameters", long)]
    _type: Type,
}

/// Server response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {}

impl ServerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action Server");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = reboot::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.reboot data
        let args = &self.reboot;
        let mut reboot_builder = reboot::RebootBuilder::default();

        let tmp = match &args._type {
            Type::Hard => reboot::Type::Hard,
            Type::Soft => reboot::Type::Soft,
        };
        reboot_builder._type(tmp);

        ep_builder.reboot(reboot_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let _rsp: Response<Bytes> = ep.raw_query_async(client).await?;
        let data = ResponseData {};
        // Maybe output some headers metadata
        op.output_human::<ResponseData>(&data)?;
        Ok(())
    }
}

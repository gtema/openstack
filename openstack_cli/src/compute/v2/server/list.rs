// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List Servers command
//!
//! Wraps invoking of the `v2.1/servers/detail` with `GET` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use eyre::OptionExt;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::server::list_detailed;
use openstack_sdk::api::find_by_name;
use openstack_sdk::api::identity::v3::project::find as find_project;
use openstack_sdk::api::identity::v3::user::find as find_user;
use openstack_sdk::api::{Pagination, paged};
use openstack_types::compute::v2::server::response::list_detailed::ServerResponse;
use tracing::warn;

/// For each server, shows server details including config drive, extended
/// status, and server usage information.
///
/// The extended status information appears in the OS-EXT-STS:vm_state,
/// OS-EXT-STS:power_state, and OS-EXT-STS:task_state attributes.
///
/// The server usage information appears in the OS-SRV-USG:launched_at and
/// OS-SRV-USG:terminated_at attributes.
///
/// HostId is unique per account and is not globally unique.
///
/// Normal response codes: 200
///
/// Error response codes: badRequest(400), unauthorized(401), forbidden(403)
#[derive(Args)]
#[command(about = "List Servers Detailed")]
pub struct ServersCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Total limit of entities count to return. Use this when there are too many entries.
    #[arg(long, default_value_t = 10000)]
    max_items: usize,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    #[arg(help_heading = "Query parameters", long)]
    access_ip_v4: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    access_ip_v6: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    all_tenants: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    auto_disk_config: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    availability_zone: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    block_device_mapping: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    changes_before: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    changes_since: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    config_drive: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    created_at: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    deleted: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    description: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    display_description: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    display_name: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    flavor: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    host: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    hostname: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    image: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    image_ref: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    info_cache: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    ip: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    ip6: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    kernel_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    key_name: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    launch_index: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    launched_at: Option<String>,

    /// Requests a page size of items. Returns a number of items up to a limit
    /// value. Use the limit parameter to make an initial limited request and
    /// use the ID of the last-seen item from the response as the marker
    /// parameter value in a subsequent limited request.
    #[arg(
        help_heading = "Query parameters",
        long("page-size"),
        visible_alias("limit")
    )]
    limit: Option<u32>,

    #[arg(help_heading = "Query parameters", long)]
    locked: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    locked_by: Option<String>,

    /// The ID of the last-seen item. Use the limit parameter to make an
    /// initial limited request and use the ID of the last-seen item from the
    /// response as the marker parameter value in a subsequent limited request.
    #[arg(help_heading = "Query parameters", long)]
    marker: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    metadata: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    name: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    node: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    not_tags: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    not_tags_any: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    pci_devices: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    power_state: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    progress: Option<String>,

    /// Project resource for which the operation should be performed.
    #[command(flatten)]
    project: ProjectInput,

    #[arg(help_heading = "Query parameters", long)]
    ramdisk_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    reservation_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    root_device_name: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    security_groups: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    services: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    soft_deleted: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    sort_dir: Option<String>,

    #[arg(help_heading = "Query parameters", long, value_parser = ["access_ip_v4","access_ip_v6","auto_disk_config","availability_zone","config_drive","created_at","display_description","display_name","host","hostname","image_ref","instance_type_id","kernel_id","key_name","launch_index","launched_at","locked","locked_by","node","power_state","progress","project_id","ramdisk_id","root_device_name","task_state","terminated_at","updated_at","user_id","uuid","vm_state"])]
    sort_key: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    status: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    system_metadata: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    tags: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    tags_any: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    task_state: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    tenant_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    terminated_at: Option<String>,

    /// User resource for which the operation should be performed.
    #[command(flatten)]
    user: UserInput,

    #[arg(help_heading = "Query parameters", long)]
    uuid: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    vm_state: Option<String>,
}

/// Project input select group
#[derive(Args)]
#[group(required = false, multiple = false)]
struct ProjectInput {
    /// Project Name.
    #[arg(long, help_heading = "Path parameters", value_name = "PROJECT_NAME")]
    project_name: Option<String>,
    /// Project ID.
    #[arg(long, help_heading = "Path parameters", value_name = "PROJECT_ID")]
    project_id: Option<String>,
    /// Current project.
    #[arg(long, help_heading = "Path parameters", action = clap::ArgAction::SetTrue)]
    current_project: bool,
}

/// User input select group
#[derive(Args)]
#[group(required = false, multiple = false)]
struct UserInput {
    /// User Name.
    #[arg(long, help_heading = "Path parameters", value_name = "USER_NAME")]
    user_name: Option<String>,
    /// User ID.
    #[arg(long, help_heading = "Path parameters", value_name = "USER_ID")]
    user_id: Option<String>,
    /// Current authenticated user.
    #[arg(long, help_heading = "Path parameters", action = clap::ArgAction::SetTrue)]
    current_user: bool,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

impl ServersCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List Servers");

        let op = OutputProcessor::from_args(parsed_args, Some("compute.server"), Some("list"));
        op.validate_args(parsed_args)?;

        let mut ep_builder = list_detailed::Request::builder();

        // Set query parameters
        if let Some(val) = &self.query.access_ip_v4 {
            ep_builder.access_ip_v4(val);
        }
        if let Some(val) = &self.query.access_ip_v6 {
            ep_builder.access_ip_v6(val);
        }
        if let Some(val) = &self.query.all_tenants {
            ep_builder.all_tenants(val);
        }
        if let Some(val) = &self.query.auto_disk_config {
            ep_builder.auto_disk_config(val);
        }
        if let Some(val) = &self.query.availability_zone {
            ep_builder.availability_zone(val);
        }
        if let Some(val) = &self.query.block_device_mapping {
            ep_builder.block_device_mapping(val);
        }
        if let Some(val) = &self.query.changes_before {
            ep_builder.changes_before(val);
        }
        if let Some(val) = &self.query.changes_since {
            ep_builder.changes_since(val);
        }
        if let Some(val) = &self.query.config_drive {
            ep_builder.config_drive(val);
        }
        if let Some(val) = &self.query.created_at {
            ep_builder.created_at(val);
        }
        if let Some(val) = &self.query.deleted {
            ep_builder.deleted(val);
        }
        if let Some(val) = &self.query.description {
            ep_builder.description(val);
        }
        if let Some(val) = &self.query.display_description {
            ep_builder.display_description(val);
        }
        if let Some(val) = &self.query.display_name {
            ep_builder.display_name(val);
        }
        if let Some(val) = &self.query.flavor {
            ep_builder.flavor(val);
        }
        if let Some(val) = &self.query.host {
            ep_builder.host(val);
        }
        if let Some(val) = &self.query.hostname {
            ep_builder.hostname(val);
        }
        if let Some(val) = &self.query.image {
            ep_builder.image(val);
        }
        if let Some(val) = &self.query.image_ref {
            ep_builder.image_ref(val);
        }
        if let Some(val) = &self.query.info_cache {
            ep_builder.info_cache(val);
        }
        if let Some(val) = &self.query.ip {
            ep_builder.ip(val);
        }
        if let Some(val) = &self.query.ip6 {
            ep_builder.ip6(val);
        }
        if let Some(val) = &self.query.kernel_id {
            ep_builder.kernel_id(val);
        }
        if let Some(val) = &self.query.key_name {
            ep_builder.key_name(val);
        }
        if let Some(val) = &self.query.launch_index {
            ep_builder.launch_index(val);
        }
        if let Some(val) = &self.query.launched_at {
            ep_builder.launched_at(val);
        }
        if let Some(val) = &self.query.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &self.query.locked {
            ep_builder.locked(val);
        }
        if let Some(val) = &self.query.locked_by {
            ep_builder.locked_by(val);
        }
        if let Some(val) = &self.query.marker {
            ep_builder.marker(val);
        }
        if let Some(val) = &self.query.metadata {
            ep_builder.metadata(val);
        }
        if let Some(val) = &self.query.name {
            ep_builder.name(val);
        }
        if let Some(val) = &self.query.node {
            ep_builder.node(val);
        }
        if let Some(val) = &self.query.not_tags {
            ep_builder.not_tags(val);
        }
        if let Some(val) = &self.query.not_tags_any {
            ep_builder.not_tags_any(val);
        }
        if let Some(val) = &self.query.pci_devices {
            ep_builder.pci_devices(val);
        }
        if let Some(val) = &self.query.power_state {
            ep_builder.power_state(val);
        }
        if let Some(val) = &self.query.progress {
            ep_builder.progress(val);
        }
        if let Some(id) = &self.query.project.project_id {
            // project_id is passed. No need to lookup
            ep_builder.project_id(id);
        } else if let Some(name) = &self.query.project.project_name {
            // project_name is passed. Need to lookup resource
            let mut sub_find_builder = find_project::Request::builder();
            warn!(
                "Querying project by name (because of `--project-name` parameter passed) may not be definite. This may fail in which case parameter `--project-id` should be used instead."
            );

            sub_find_builder.id(name);
            let find_ep = sub_find_builder
                .build()
                .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
            let find_data: serde_json::Value = find_by_name(find_ep).query_async(client).await?;
            // Try to extract resource id
            match find_data.get("id") {
                Some(val) => match val.as_str() {
                    Some(id_str) => {
                        ep_builder.project_id(id_str.to_owned());
                    }
                    None => {
                        return Err(OpenStackCliError::ResourceAttributeNotString(
                            serde_json::to_string(&val)?,
                        ));
                    }
                },
                None => {
                    return Err(OpenStackCliError::ResourceAttributeMissing(
                        "id".to_string(),
                    ));
                }
            };
        } else if self.query.project.current_project {
            ep_builder.project_id(
                client
                    .get_auth_info()
                    .ok_or_eyre("Cannot determine current authentication information")?
                    .token
                    .user
                    .id,
            );
        }
        if let Some(val) = &self.query.ramdisk_id {
            ep_builder.ramdisk_id(val);
        }
        if let Some(val) = &self.query.reservation_id {
            ep_builder.reservation_id(val);
        }
        if let Some(val) = &self.query.root_device_name {
            ep_builder.root_device_name(val);
        }
        if let Some(val) = &self.query.security_groups {
            ep_builder.security_groups(val);
        }
        if let Some(val) = &self.query.services {
            ep_builder.services(val);
        }
        if let Some(val) = &self.query.soft_deleted {
            ep_builder.soft_deleted(val);
        }
        if let Some(val) = &self.query.sort_dir {
            ep_builder.sort_dir(val);
        }
        if let Some(val) = &self.query.sort_key {
            ep_builder.sort_key(val);
        }
        if let Some(val) = &self.query.status {
            ep_builder.status(val);
        }
        if let Some(val) = &self.query.system_metadata {
            ep_builder.system_metadata(val);
        }
        if let Some(val) = &self.query.tags {
            ep_builder.tags(val);
        }
        if let Some(val) = &self.query.tags_any {
            ep_builder.tags_any(val);
        }
        if let Some(val) = &self.query.task_state {
            ep_builder.task_state(val);
        }
        if let Some(val) = &self.query.tenant_id {
            ep_builder.tenant_id(val);
        }
        if let Some(val) = &self.query.terminated_at {
            ep_builder.terminated_at(val);
        }
        if let Some(id) = &self.query.user.user_id {
            // user_id is passed. No need to lookup
            ep_builder.user_id(id);
        } else if let Some(name) = &self.query.user.user_name {
            // user_name is passed. Need to lookup resource
            let mut sub_find_builder = find_user::Request::builder();
            warn!(
                "Querying user by name (because of `--user-name` parameter passed) may not be definite. This may fail in which case parameter `--user-id` should be used instead."
            );

            sub_find_builder.id(name);
            let find_ep = sub_find_builder
                .build()
                .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
            let find_data: serde_json::Value = find_by_name(find_ep).query_async(client).await?;
            // Try to extract resource id
            match find_data.get("id") {
                Some(val) => match val.as_str() {
                    Some(id_str) => {
                        ep_builder.user_id(id_str.to_owned());
                    }
                    None => {
                        return Err(OpenStackCliError::ResourceAttributeNotString(
                            serde_json::to_string(&val)?,
                        ));
                    }
                },
                None => {
                    return Err(OpenStackCliError::ResourceAttributeMissing(
                        "id".to_string(),
                    ));
                }
            };
        } else if self.query.user.current_user {
            ep_builder.user_id(
                client
                    .get_auth_info()
                    .ok_or_eyre("Cannot determine current authentication information")?
                    .token
                    .user
                    .id,
            );
        }
        if let Some(val) = &self.query.uuid {
            ep_builder.uuid(val);
        }
        if let Some(val) = &self.query.vm_state {
            ep_builder.vm_state(val);
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = paged(ep, Pagination::Limit(self.max_items))
            .query_async(client)
            .await?;
        op.output_list::<ServerResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Share command [microversion = 2.97]
//!
//! Wraps invoking of the `v2.1/servers/{server_id}/shares` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::server::share::create_297;
use openstack_types::compute::v2::server::share::response::create::ShareResponse;

/// Attach a share to an instance.
///
/// Normal response codes: 201
///
/// Error response codes: badRequest(400), forbidden(403), itemNotFound(404),
/// conflict(409)
#[derive(Args)]
#[command(about = "Attach a share to an instance (microversion = 2.97)")]
pub struct ShareCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    share: Share,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// server_id parameter for /v2.1/servers/{server_id}/shares/{id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_server_id",
        value_name = "SERVER_ID"
    )]
    server_id: String,
}
/// Share Body data
#[derive(Args, Clone)]
struct Share {
    /// The UUID of the attached share.
    #[arg(help_heading = "Body parameters", long)]
    share_id: String,

    /// The device tag to be used by users to mount the share within the
    /// instance, if not provided then the share UUID will be used
    /// automatically.
    #[arg(help_heading = "Body parameters", long)]
    tag: Option<String>,
}

impl ShareCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Share");

        let op =
            OutputProcessor::from_args(parsed_args, Some("compute.server/share"), Some("create"));
        op.validate_args(parsed_args)?;

        let mut ep_builder = create_297::Request::builder();
        ep_builder.header(
            http::header::HeaderName::from_static("openstack-api-version"),
            http::header::HeaderValue::from_static("compute 2.97"),
        );

        // Set path parameters
        ep_builder.server_id(&self.path.server_id);
        // Set query parameters
        // Set body parameters
        // Set Request.share data
        let args = &self.share;
        let mut share_builder = create_297::ShareBuilder::default();

        share_builder.share_id(&args.share_id);

        if let Some(val) = &args.tag {
            share_builder.tag(val);
        }

        ep_builder.share(share_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ShareResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set Server command [microversion = 2.90]
//!
//! Wraps invoking of the `v2.1/servers/{id}` with `PUT` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::server::find;
use openstack_sdk::api::compute::v2::server::set_290;
use openstack_sdk::api::find;
use openstack_types::compute::v2::server::response::set::ServerResponse;

/// Updates the editable attributes of an existing server.
///
/// Normal response codes: 200
///
/// Error response codes: badRequest(400), unauthorized(401), forbidden(403),
/// itemNotFound(404)
#[derive(Args)]
#[command(about = "Update Server (microversion = 2.90)")]
pub struct ServerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A `server` object.
    #[command(flatten)]
    server: Server,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.1/servers/{id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum OsDcfDiskConfig {
    Auto,
    Manual,
}

/// Server Body data
#[derive(Args, Clone)]
struct Server {
    /// IPv4 address that should be used to access this server.
    #[arg(help_heading = "Body parameters", long)]
    access_ipv4: Option<String>,

    /// IPv6 address that should be used to access this server.
    #[arg(help_heading = "Body parameters", long)]
    access_ipv6: Option<String>,

    /// A free form description of the server. Limited to 255 characters in
    /// length. Before microversion 2.19 this was set to the server name.
    ///
    /// **New in version 2.19**
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Set explicit NULL for the description
    #[arg(help_heading = "Body parameters", long, action = clap::ArgAction::SetTrue, conflicts_with = "description")]
    no_description: bool,

    /// The hostname to configure for the instance in the metadata service.
    ///
    /// Starting with microversion 2.94, this can be a Fully Qualified Domain
    /// Name (FQDN) of up to 255 characters in length.
    ///
    /// Note
    ///
    /// This information is published via the metadata service and requires
    /// application such as `cloud-init` to propagate it through to the
    /// instance.
    ///
    /// **New in version 2.90**
    #[arg(help_heading = "Body parameters", long)]
    hostname: Option<String>,

    /// The server name.
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// Controls how the API partitions the disk when you create, rebuild, or
    /// resize servers. A server inherits the `OS-DCF:diskConfig` value from
    /// the image from which it was created, and an image inherits the
    /// `OS-DCF:diskConfig` value from the server from which it was created. To
    /// override the inherited setting, you can include this attribute in the
    /// request body of a server create, rebuild, or resize request. If the
    /// `OS-DCF:diskConfig` value for an image is `MANUAL`, you cannot create a
    /// server from that image and set its `OS-DCF:diskConfig` value to `AUTO`.
    /// A valid value is:
    ///
    /// - `AUTO`. The API builds the server with a single partition the size of
    ///   the target flavor disk. The API automatically adjusts the file system
    ///   to fit the entire partition.
    /// - `MANUAL`. The API builds the server by using whatever partition
    ///   scheme and file system is in the source image. If the target flavor
    ///   disk is larger, the API does not partition the remaining disk space.
    #[arg(help_heading = "Body parameters", long)]
    os_dcf_disk_config: Option<OsDcfDiskConfig>,
}

impl ServerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set Server");

        let op = OutputProcessor::from_args(parsed_args, Some("compute.server"), Some("None"));
        op.validate_args(parsed_args)?;

        let mut find_builder = find::Request::builder();

        find_builder.id(&self.path.id);
        find_builder.header("OpenStack-API-Version", "compute 2.90");
        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;

        let mut ep_builder = set_290::Request::builder();
        ep_builder.header("OpenStack-API-Version", "compute 2.90");

        // Set path parameters
        let resource_id = find_data["id"]
            .as_str()
            .expect("Resource ID is a string")
            .to_string();
        ep_builder.id(resource_id.clone());
        // Set query parameters
        // Set body parameters
        // Set Request.server data
        let args = &self.server;
        let mut server_builder = set_290::ServerBuilder::default();
        if let Some(val) = &args.os_dcf_disk_config {
            let tmp = match val {
                OsDcfDiskConfig::Auto => set_290::OsDcfDiskConfig::Auto,
                OsDcfDiskConfig::Manual => set_290::OsDcfDiskConfig::Manual,
            };
            server_builder.os_dcf_disk_config(tmp);
        }

        if let Some(val) = &args.access_ipv4 {
            server_builder.access_ipv4(val);
        }

        if let Some(val) = &args.access_ipv6 {
            server_builder.access_ipv6(val);
        }

        if let Some(val) = &args.description {
            server_builder.description(Some(val.into()));
        } else if args.no_description {
            server_builder.description(None);
        }

        if let Some(val) = &args.hostname {
            server_builder.hostname(val);
        }

        if let Some(val) = &args.name {
            server_builder.name(val);
        }

        ep_builder.server(server_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ServerResponse>(data)?;
        Ok(())
    }
}

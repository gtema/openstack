// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action Server command [microversion = 2.1]
//!
//! Wraps invoking of the `v2.1/servers/{id}/action` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::server::os_get_spiceconsole_21;
use openstack_types::compute::v2::server::response::os_get_spiceconsole::ServerResponse;

/// Gets a SPICE console for a server.
///
/// Specify the `os-getSPICEConsole` action in the request body.
///
/// The only supported connection type is `spice-html5`. The `type` parameter
/// should be set to `spice-html5`.
///
/// Normal response codes: 200
///
/// Error response codes: badRequest(400), unauthorized(401), forbidden(403),
/// itemNotFound(404), conflict(409), notImplemented(501)
#[derive(Args)]
#[command(
    about = "Get SPICE Console (os-getSPICEConsole Action) (DEPRECATED) (microversion = 2.1)"
)]
pub struct ServerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The action.
    #[command(flatten)]
    os_get_spiceconsole: OsGetSpiceconsole,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.1/servers/{id}/action API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Type {
    SpiceHtml5,
}

/// OsGetSpiceconsole Body data
#[derive(Args, Clone)]
struct OsGetSpiceconsole {
    /// The type of SPICE console. The only valid value is `spice-html5`.
    #[arg(help_heading = "Body parameters", long)]
    _type: Type,
}

impl ServerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action Server");

        let op = OutputProcessor::from_args_with_resource_key(parsed_args, "compute.server");
        op.validate_args(parsed_args)?;

        let mut ep_builder = os_get_spiceconsole_21::Request::builder();
        ep_builder.header("OpenStack-API-Version", "compute 2.1");

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.os_get_spiceconsole data
        let args = &self.os_get_spiceconsole;
        let mut os_get_spiceconsole_builder =
            os_get_spiceconsole_21::OsGetSpiceconsoleBuilder::default();

        let tmp = match &args._type {
            Type::SpiceHtml5 => os_get_spiceconsole_21::Type::SpiceHtml5,
        };
        os_get_spiceconsole_builder._type(tmp);

        ep_builder.os_get_spiceconsole(os_get_spiceconsole_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ServerResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action Server command
//!
//! Wraps invoking of the `v2.1/servers/{id}/action` with `POST` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::server::os_get_console_output;
use openstack_types::compute::v2::server::response::os_get_console_output::ServerResponse;

/// Shows console output for a server.
///
/// This API returns the text of the console since boot. The content returned
/// may be large. Limit the lines of console text, beginning at the tail of the
/// content, by setting the optional `length` parameter in the request body.
///
/// The server to get console log from should set `export LC_ALL=en_US.UTF-8`
/// in order to avoid incorrect unicode error.
///
/// Normal response codes: 200
///
/// Error response codes: unauthorized(401), forbidden(403), notFound(404),
/// conflict(409), methodNotImplemented(501)
#[derive(Args)]
#[command(about = "Show Console Output (os-getConsoleOutput Action)")]
pub struct ServerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The action to get console output of the server.
    #[command(flatten)]
    os_get_console_output: OsGetConsoleOutput,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.1/servers/{id}/action API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// OsGetConsoleOutput Body data
#[derive(Args, Clone)]
struct OsGetConsoleOutput {
    /// The number of lines to fetch from the end of console log. All lines
    /// will be returned if this is not specified.
    ///
    /// Note
    ///
    /// This parameter can be specified as not only ‘integer’ but also
    /// ‘string’.
    #[arg(help_heading = "Body parameters", long)]
    length: Option<Option<i32>>,
}

impl ServerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action Server");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("compute.server"),
            Some("os_get_console_output"),
        );
        op.validate_args(parsed_args)?;

        let mut ep_builder = os_get_console_output::Request::builder();

        ep_builder.id(&self.path.id);

        // Set body parameters
        // Set Request.os_get_console_output data
        let args = &self.os_get_console_output;
        let mut os_get_console_output_builder =
            os_get_console_output::OsGetConsoleOutputBuilder::default();
        if let Some(val) = &args.length {
            os_get_console_output_builder.length(*val);
        }

        ep_builder.os_get_console_output(os_get_console_output_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ServerResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

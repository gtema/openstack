// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Show VolumeAttachment command
//!
//! Wraps invoking of the `v2.1/servers/{server_id}/os-volume_attachments/{id}` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::compute::v2::server::volume_attachment::get;
use openstack_sdk::api::QueryAsync;
use structable_derive::StructTable;

/// Show a detail of a volume attachment.
///
/// Normal response codes: 200
///
/// Error response codes: unauthorized(401), forbidden(403), itemNotFound(404)
///
#[derive(Args)]
#[command(about = "Show a detail of a volume attachment")]
pub struct VolumeAttachmentCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// server_id parameter for
    /// /v2.1/servers/{server_id}/os-volume_attachments/{id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_server_id",
        value_name = "SERVER_ID"
    )]
    server_id: String,

    /// id parameter for /v2.1/servers/{server_id}/os-volume_attachments/{id}
    /// API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// VolumeAttachment response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The UUID of the associated volume attachment in Cinder.
    ///
    /// **New in version 2.89**
    ///
    #[serde()]
    #[structable(optional)]
    attachment_id: Option<String>,

    /// The UUID of the block device mapping record in Nova for the attachment.
    ///
    /// **New in version 2.89**
    ///
    #[serde()]
    #[structable(optional)]
    bdm_uuid: Option<String>,

    /// A flag indicating if the attached volume will be deleted when the
    /// server is deleted.
    ///
    /// **New in version 2.79**
    ///
    #[serde()]
    #[structable(optional)]
    delete_on_termination: Option<bool>,

    /// Name of the device in the attachment object, such as, `/dev/vdb`.
    ///
    #[serde()]
    #[structable(optional)]
    device: Option<String>,

    /// The volume ID of the attachment.
    ///
    /// **Available until version 2.88**
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The UUID of the server.
    ///
    #[serde(rename = "serverId")]
    #[structable(optional, title = "serverId")]
    server_id: Option<String>,

    /// The device tag applied to the volume block device or `null`.
    ///
    /// **New in version 2.70**
    ///
    #[serde()]
    #[structable(optional)]
    tag: Option<String>,

    /// The UUID of the attached volume.
    ///
    #[serde(rename = "volumeId")]
    #[structable(optional, title = "volumeId")]
    volume_id: Option<String>,
}

impl VolumeAttachmentCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Show VolumeAttachment");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = get::Request::builder();

        // Set path parameters
        ep_builder.server_id(&self.path.server_id);
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

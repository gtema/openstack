// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Action Server command [microversion = 2.73]
//!
//! Wraps invoking of the `v2.1/servers/{id}/action` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use anyhow::Result;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use bytes::Bytes;
use http::Response;
use openstack_sdk::api::compute::v2::server::lock_273;
use openstack_sdk::api::RawQueryAsync;
use structable_derive::StructTable;

/// Locks a server.
///
/// Specify the `lock` action in the request body.
///
/// Most actions by non-admin users are not allowed to the server after this
/// operation is successful and the server is locked. See the “Lock, Unlock”
/// item in
/// [Server actions](https://docs.openstack.org/api-guide/compute/server_concepts.html#server-actions)
/// for the restricted actions. But administrators can perform actions on the
/// server even though the server is locked. Note that from microversion 2.73
/// it is possible to specify a reason when locking the server.
///
/// The
/// [unlock action](https://docs.openstack.org/api-ref/compute/#unlock-server-unlock-action)
/// will unlock a server in locked state so additional actions can be performed
/// on the server by non-admin users.
///
/// You can know whether a server is locked or not and the `locked_reason` (if
/// specified, from the 2.73 microversion) by the
/// [List Servers Detailed API](https://docs.openstack.org/api-ref/compute/#list-servers-detailed)
/// or the
/// [Show Server Details API](https://docs.openstack.org/api-ref/compute/#show-server-details).
///
/// Policy defaults enable only users with the administrative role or the owner
/// of the server to perform this operation. Cloud providers can change these
/// permissions through the `policy.json` file. Administrators can overwrite
/// owner’s lock.
///
/// Normal response codes: 202
///
/// Error response codes: unauthorized(401), forbidden(403), itemNotFound(404)
///
#[derive(Args)]
#[command(about = "Lock Server (lock Action) (microversion = 2.73)")]
pub struct ServerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    #[command(flatten)]
    lock: Option<Lock>,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.1/servers/{id}/action API
    ///
    #[arg(id = "path_param_id", value_name = "ID")]
    id: String,
}
/// Lock Body data
#[derive(Args)]
struct Lock {
    #[arg(long)]
    locked_reason: Option<String>,
}

/// Server response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {}

impl ServerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Action Server");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = lock_273::Request::builder();
        ep_builder.header("OpenStack-API-Version", "compute 2.73");

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        // Set body parameters
        // Set Request.lock data
        let args = &self.lock;

        if let Some(llock) = &args {
            let mut lock_builder = lock_273::LockBuilder::default();
            if let Some(val) = &llock.locked_reason {
                lock_builder.locked_reason(val);
            }
            ep_builder.lock(lock_builder.build().expect("A valid object"));
        }

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let _rsp: Response<Bytes> = ep.raw_query_async(client).await?;
        let data = ResponseData {};
        // Maybe output some headers metadata
        op.output_human::<ResponseData>(&data)?;
        Ok(())
    }
}

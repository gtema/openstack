// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Get Migration command
//!
//! Wraps invoking of the `v2.1/os-migrations` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::compute::v2::migration::get;
use openstack_sdk::api::QueryAsync;
use structable_derive::StructTable;

/// Lists migrations.
///
/// Policy defaults enable only users with the administrative role to perform
/// this operation. Cloud providers can change these permissions through the
/// `policy.json` file.
///
/// Starting from microversion 2.59, the response is sorted by `created_at` and
/// `id` in descending order.
///
/// Normal response codes: 200
///
/// Error response codes: badRequest(400), unauthorized(401), forbidden(403)
///
#[derive(Args)]
#[command(about = "List Migrations")]
pub struct MigrationCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    #[arg(help_heading = "Query parameters", long)]
    changes_before: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    changes_since: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    hidden: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    host: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    instance_uuid: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    limit: Option<i32>,

    #[arg(help_heading = "Query parameters", long)]
    marker: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    migration_type: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    project_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    source_compute: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    status: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    user_id: Option<String>,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Migration response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The date and time when the resource was created. The date and time
    /// stamp format is [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
    ///
    /// ```text
    /// CCYY-MM-DDThh:mm:ss±hh:mm
    ///
    /// ```
    ///
    /// For example, `2015-08-27T09:49:58-05:00`. The `±hh:mm` value, if
    /// included, is the time zone as an offset from UTC. In the previous
    /// example, the offset value is `-05:00`.
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// The target compute for a migration.
    ///
    #[serde()]
    #[structable(optional)]
    dest_compute: Option<String>,

    /// The target host for a migration.
    ///
    #[serde()]
    #[structable(optional)]
    dest_host: Option<String>,

    /// The target node for a migration.
    ///
    #[serde()]
    #[structable(optional)]
    dest_node: Option<String>,

    /// The ID of the server migration.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<i32>,

    /// The UUID of the server.
    ///
    #[serde()]
    #[structable(optional)]
    instance_uuid: Option<String>,

    /// The type of the server migration. This is one of `live-migration`,
    /// `migration`, `resize` and `evacuation`.
    ///
    /// **New in version 2.23**
    ///
    #[serde()]
    #[structable(optional)]
    migration_type: Option<String>,

    /// In `resize` case, the flavor ID for resizing the server. In the other
    /// cases, this parameter is same as the flavor ID of the server when the
    /// migration was started.
    ///
    /// Note
    ///
    /// This is an internal ID and is not exposed in any other API. In
    /// particular, this is not the ID specified or automatically generated
    /// during flavor creation or returned via the `GET /flavors` API.
    ///
    #[serde()]
    #[structable(optional)]
    new_instance_type_id: Option<i32>,

    /// The flavor ID of the server when the migration was started.
    ///
    /// Note
    ///
    /// This is an internal ID and is not exposed in any other API. In
    /// particular, this is not the ID specified or automatically generated
    /// during flavor creation or returned via the `GET /flavors` API.
    ///
    #[serde()]
    #[structable(optional)]
    old_instance_type_id: Option<i32>,

    /// The ID of the project which initiated the server migration. The value
    /// may be `null` for older migration records.
    ///
    /// **New in version 2.80**
    ///
    #[serde()]
    #[structable(optional)]
    project_id: Option<String>,

    /// The source compute for a migration.
    ///
    #[serde()]
    #[structable(optional)]
    source_compute: Option<String>,

    /// The source node for a migration.
    ///
    #[serde()]
    #[structable(optional)]
    source_node: Option<String>,

    /// The current status of the migration.
    ///
    #[serde()]
    #[structable(optional)]
    status: Option<String>,

    /// The date and time when the resource was updated. The date and time
    /// stamp format is [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
    ///
    /// ```text
    /// CCYY-MM-DDThh:mm:ss±hh:mm
    ///
    /// ```
    ///
    /// For example, `2015-08-27T09:49:58-05:00`. The `±hh:mm` value, if
    /// included, is the time zone as an offset from UTC. In the previous
    /// example, the offset value is `-05:00`.
    ///
    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,

    /// The ID of the user which initiated the server migration. The value may
    /// be `null` for older migration records.
    ///
    /// **New in version 2.80**
    ///
    #[serde()]
    #[structable(optional)]
    user_id: Option<String>,

    /// The UUID of the migration.
    ///
    /// **New in version 2.59**
    ///
    #[serde()]
    #[structable(optional)]
    uuid: Option<String>,
}

impl MigrationCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Get Migration");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = get::Request::builder();

        // Set path parameters
        // Set query parameters
        if let Some(val) = &self.query.hidden {
            ep_builder.hidden(val);
        }
        if let Some(val) = &self.query.host {
            ep_builder.host(val);
        }
        if let Some(val) = &self.query.instance_uuid {
            ep_builder.instance_uuid(val);
        }
        if let Some(val) = &self.query.source_compute {
            ep_builder.source_compute(val);
        }
        if let Some(val) = &self.query.status {
            ep_builder.status(val);
        }
        if let Some(val) = &self.query.migration_type {
            ep_builder.migration_type(val);
        }
        if let Some(val) = &self.query.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &self.query.marker {
            ep_builder.marker(val);
        }
        if let Some(val) = &self.query.changes_since {
            ep_builder.changes_since(val);
        }
        if let Some(val) = &self.query.changes_before {
            ep_builder.changes_before(val);
        }
        if let Some(val) = &self.query.user_id {
            ep_builder.user_id(val);
        }
        if let Some(val) = &self.query.project_id {
            ep_builder.project_id(val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = ep.query_async(client).await?;
        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

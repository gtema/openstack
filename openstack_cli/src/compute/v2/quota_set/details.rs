// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Show QuotaSet command
//!
//! Wraps invoking of the `v2.1/os-quota-sets/{id}/detail` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use eyre::OptionExt;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::quota_set::details;
use openstack_sdk::api::find_by_name;
use openstack_sdk::api::identity::v3::user::find as find_user;
use serde_json::Value;
use structable_derive::StructTable;
use tracing::warn;

/// Show the detail of quota for a project or a project and a user.
///
/// To show a quota for a project and a user, specify the `user_id` query
/// parameter.
///
/// Normal response codes: 200
///
/// Error response codes: badrequest(400), unauthorized(401), forbidden(403)
///
#[derive(Args)]
#[command(about = "Show The Detail of Quota")]
pub struct QuotaSetCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    /// User resource for which the operation should be performed.
    #[command(flatten)]
    user: UserInput,
}

/// User input select group
#[derive(Args)]
#[group(required = false, multiple = false)]
struct UserInput {
    /// User Name.
    #[arg(long, help_heading = "Path parameters", value_name = "USER_NAME")]
    user_name: Option<String>,
    /// User ID.
    #[arg(long, help_heading = "Path parameters", value_name = "USER_ID")]
    user_id: Option<String>,
    /// Current authenticated user.
    #[arg(long, help_heading = "Path parameters", action = clap::ArgAction::SetTrue)]
    current_user: bool,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// id parameter for /v2.1/os-quota-sets/{id}/detail API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// QuotaSet response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The object of detailed cores quota, including in_use, limit and
    /// reserved number of cores.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    cores: Option<Value>,

    /// The object of detailed fixed ips quota, including in_use, limit and
    /// reserved number of fixed ips.
    ///
    /// **Available until version 2.35**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    fixed_ips: Option<Value>,

    /// The object of detailed floating ips quota, including in_use, limit and
    /// reserved number of floating ips.
    ///
    /// **Available until version 2.35**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    floating_ips: Option<Value>,

    /// The UUID of the tenant/user the quotas listed for.
    ///
    #[serde()]
    #[structable()]
    id: String,

    /// The object of detailed injected files quota, including in_use, limit
    /// and reserved number of injected files.
    ///
    /// **Available until version 2.56**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    injected_files: Option<Value>,

    /// The object of detailed injected file content bytes quota, including
    /// in_use, limit and reserved number of injected file content bytes.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    injected_files_content_bytes: Option<Value>,

    /// The object of detailed injected file path bytes quota, including
    /// in_use, limit and reserved number of injected file path bytes.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    injected_files_path_bytes: Option<Value>,

    /// The object of detailed servers quota, including in_use, limit and
    /// reserved number of instances.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    instances: Option<Value>,

    /// The object of detailed key pairs quota, including in_use, limit and
    /// reserved number of key pairs.
    ///
    /// Note
    ///
    /// `in_use` field value for keypair quota details is always zero. In Nova,
    /// key_pairs are a user-level resource, not a project- level resource, so
    /// for legacy reasons, the keypair in-use information is not counted.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    key_pairs: Option<Value>,

    /// The object of detailed key metadata items quota, including in_use,
    /// limit and reserved number of metadata items.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    metadata_items: Option<Value>,

    /// The number of private networks that can be created per project.
    ///
    /// **Available until version 2.35**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    networks: Option<Value>,

    /// The object of detailed key ram quota, including in_use, limit and
    /// reserved number of ram.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    ram: Option<Value>,

    /// The object of detailed security group rules quota, including in_use,
    /// limit and reserved number of security group rules.
    ///
    /// **Available until version 2.35**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    security_group_rules: Option<Value>,

    /// The object of detailed security groups, including in_use, limit and
    /// reserved number of security groups.
    ///
    /// **Available until version 2.35**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    security_groups: Option<Value>,

    /// The object of detailed server group members, including in_use, limit
    /// and reserved number of server group members.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    server_group_members: Option<Value>,

    /// The object of detailed server groups, including in_use, limit and
    /// reserved number of server groups.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    server_groups: Option<Value>,
}

impl QuotaSetCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Show QuotaSet");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = details::Request::builder();

        // Set path parameters
        ep_builder.id(&self.path.id);
        // Set query parameters
        if let Some(id) = &self.query.user.user_id {
            // user_id is passed. No need to lookup
            ep_builder.user_id(id);
        } else if let Some(name) = &self.query.user.user_name {
            // user_name is passed. Need to lookup resource
            let mut sub_find_builder = find_user::Request::builder();
            warn!(
                "Querying user by name (because of `--user-name` parameter passed) may not be definite. This may fail in which case parameter `--user-id` should be used instead."
            );

            sub_find_builder.id(name);
            let find_ep = sub_find_builder
                .build()
                .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
            let find_data: serde_json::Value = find_by_name(find_ep).query_async(client).await?;
            // Try to extract resource id
            match find_data.get("id") {
                Some(val) => match val.as_str() {
                    Some(id_str) => {
                        ep_builder.user_id(id_str.to_owned());
                    }
                    None => {
                        return Err(OpenStackCliError::ResourceAttributeNotString(
                            serde_json::to_string(&val)?,
                        ));
                    }
                },
                None => {
                    return Err(OpenStackCliError::ResourceAttributeMissing(
                        "id".to_string(),
                    ));
                }
            };
        } else if self.query.user.current_user {
            ep_builder.user_id(
                client
                    .get_auth_info()
                    .ok_or_eyre("Cannot determine current authentication information")?
                    .token
                    .user
                    .id,
            );
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

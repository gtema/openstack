// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Flavor command [microversion = 2.1]
//!
//! Wraps invoking of the `v2.1/flavors` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::compute::v2::flavor::create_21;
use serde_json::Value;
use structable_derive::StructTable;

/// Creates a flavor.
///
/// Creating a flavor is typically only available to administrators of a cloud
/// because this has implications for scheduling efficiently in the cloud.
///
/// Normal response codes: 200
///
/// Error response codes: badRequest(400), unauthorized(401), forbidden(403),
/// conflict(409)
///
#[derive(Args)]
#[command(about = "Create Flavor (microversion = 2.1)")]
pub struct FlavorCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// The ID and links for the flavor for your server instance. A flavor is a
    /// combination of memory, disk size, and CPUs.
    ///
    #[command(flatten)]
    flavor: Flavor,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Flavor Body data
#[derive(Args, Clone)]
struct Flavor {
    /// The size of a dedicated swap disk that will be allocated, in MiB. If 0
    /// (the default), no dedicated swap disk will be created.
    ///
    #[arg(help_heading = "Body parameters", long)]
    disk: i32,

    /// Only alphanumeric characters with hyphen ‘-’, underscore ‘\_’, spaces
    /// and dots ‘.’ are permitted. If an ID is not provided, then a default
    /// UUID will be assigned.
    ///
    #[arg(help_heading = "Body parameters", long)]
    id: Option<String>,

    /// The display name of a flavor.
    ///
    #[arg(help_heading = "Body parameters", long)]
    name: String,

    /// Whether the flavor is public (available to all projects) or scoped to a
    /// set of projects. Default is True if not specified.
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    os_flavor_access_is_public: Option<bool>,

    /// The size of a dedicated swap disk that will be allocated, in MiB. If 0
    /// (the default), no dedicated swap disk will be created.
    ///
    #[arg(help_heading = "Body parameters", long)]
    os_flv_ext_data_ephemeral: Option<i32>,

    /// The number of virtual CPUs that will be allocated to the server.
    ///
    #[arg(help_heading = "Body parameters", long)]
    ram: i32,

    /// The receive / transmit factor (as a float) that will be set on ports if
    /// the network backend supports the QOS extension. Otherwise it will be
    /// ignored. It defaults to 1.0.
    ///
    #[arg(help_heading = "Body parameters", long)]
    rxtx_factor: Option<String>,

    /// The size of a dedicated swap disk that will be allocated, in MiB. If 0
    /// (the default), no dedicated swap disk will be created.
    ///
    #[arg(help_heading = "Body parameters", long)]
    swap: Option<i32>,

    /// The number of virtual CPUs that will be allocated to the server.
    ///
    #[arg(help_heading = "Body parameters", long)]
    vcpus: i32,
}

/// Flavor response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The description of the flavor.
    ///
    /// **New in version 2.55**
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// The size of the root disk that will be created in GiB. If 0 the root
    /// disk will be set to exactly the size of the image used to deploy the
    /// instance. However, in this case the scheduler cannot select the compute
    /// host based on the virtual image size. Therefore, 0 should only be used
    /// for volume booted instances or for testing purposes. Volume-backed
    /// instances can be enforced for flavors with zero root disk via the
    /// `os_compute_api:servers:create:zero_disk_flavor` policy rule.
    ///
    #[serde()]
    #[structable()]
    disk: i32,

    /// A dictionary of the flavor’s extra-specs key-and-value pairs. This will
    /// only be included if the user is allowed by policy to index flavor
    /// extra_specs.
    ///
    /// **New in version 2.61**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    extra_specs: Option<Value>,

    /// The ID of the flavor. While people often make this look like an int,
    /// this is really a string.
    ///
    #[serde()]
    #[structable()]
    id: String,

    /// Links to the resources in question. See
    /// [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html)
    /// for more info.
    ///
    #[serde()]
    #[structable(pretty)]
    links: Value,

    /// The display name of a flavor.
    ///
    #[serde()]
    #[structable()]
    name: String,

    #[serde(rename = "os-flavor-access:is_public")]
    #[structable(pretty, title = "os-flavor-access:is_public")]
    os_flavor_access_is_public: Value,

    /// Whether or not the flavor has been administratively disabled. This is
    /// an artifact of the legacy v2 API and will always be set to `false`.
    /// There is currently no way to disable a flavor and set this to `true`.
    ///
    #[serde(rename = "OS-FLV-DISABLED:disabled")]
    #[structable(title = "OS-FLV-DISABLED:disabled")]
    os_flv_disabled_disabled: bool,

    /// The size of the ephemeral disk that will be created, in GiB. Ephemeral
    /// disks may be written over on server state changes. So should only be
    /// used as a scratch space for applications that are aware of its
    /// limitations. Defaults to 0.
    ///
    #[serde(rename = "OS-FLV-EXT-DATA:ephemeral")]
    #[structable(title = "OS-FLV-EXT-DATA:ephemeral")]
    os_flv_ext_data_ephemeral: i32,

    /// The amount of RAM a flavor has, in MiB.
    ///
    #[serde()]
    #[structable()]
    ram: i32,

    #[serde()]
    #[structable(pretty)]
    rxtx_factor: Value,

    /// The size of a dedicated swap disk that will be allocated, in MiB. If 0
    /// (the default), no dedicated swap disk will be created. Currently, the
    /// empty string (‘’) is used to represent 0. As of microversion 2.75
    /// default return value of swap is 0 instead of empty string.
    ///
    #[serde()]
    #[structable()]
    swap: i32,

    /// The number of virtual CPUs that will be allocated to the server.
    ///
    #[serde()]
    #[structable()]
    vcpus: i32,
}

impl FlavorCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Flavor");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create_21::Request::builder();
        ep_builder.header("OpenStack-API-Version", "compute 2.1");

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.flavor data
        let args = &self.flavor;
        let mut flavor_builder = create_21::FlavorBuilder::default();

        flavor_builder.name(&args.name);

        if let Some(val) = &args.id {
            flavor_builder.id(Some(val.into()));
        }

        flavor_builder.ram(args.ram);

        flavor_builder.vcpus(args.vcpus);

        flavor_builder.disk(args.disk);

        if let Some(val) = &args.os_flv_ext_data_ephemeral {
            flavor_builder.os_flv_ext_data_ephemeral(*val);
        }

        if let Some(val) = &args.swap {
            flavor_builder.swap(*val);
        }

        if let Some(val) = &args.rxtx_factor {
            flavor_builder.rxtx_factor(val);
        }

        if let Some(val) = &args.os_flavor_access_is_public {
            flavor_builder.os_flavor_access_is_public(*val);
        }

        ep_builder.flavor(flavor_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

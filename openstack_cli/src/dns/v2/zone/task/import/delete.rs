// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Delete Import command
//!
//! Wraps invoking of the `v2/zones/tasks/imports/{zone_import_id}` with `DELETE` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::dns::v2::zone::task::import::delete;

/// This will just delete the record of the zone import, not the imported zone.
///
/// The zone will have to be deleted from the zone delete API
#[derive(Args)]
#[command(about = "Delete a Zone Import")]
pub struct ImportCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// zone_import_id parameter for /v2/zones/tasks/imports/{zone_import_id}
    /// API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_zone_import_id",
        value_name = "ZONE_IMPORT_ID"
    )]
    zone_import_id: String,
}

impl ImportCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Delete Import");

        let op =
            OutputProcessor::from_args(parsed_args, Some("dns.zone/task/import"), Some("delete"));
        op.validate_args(parsed_args)?;

        let mut ep_builder = delete::Request::builder();

        ep_builder.zone_import_id(&self.path.zone_import_id);

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        openstack_sdk::api::ignore(ep).query_async(client).await?;
        Ok(())
    }
}

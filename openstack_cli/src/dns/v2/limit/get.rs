// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Get Limit command
//!
//! Wraps invoking of the `v2/limits` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use openstack_sdk::api::dns::v2::limit::get;
use openstack_sdk::api::QueryAsync;
use structable_derive::StructTable;

/// List project limits
///
#[derive(Args)]
#[command(about = "Get Project Limits")]
pub struct LimitCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Limit response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The max amount of items allowed per page
    ///
    #[serde()]
    #[structable(optional)]
    max_page_limit: Option<i32>,

    /// The max length of a recordset name
    ///
    #[serde()]
    #[structable(optional)]
    max_recordset_name_length: Option<i32>,

    /// The max amount of records contained in a recordset
    ///
    #[serde()]
    #[structable(optional)]
    max_recordset_records: Option<i32>,

    /// The max length of a zone name
    ///
    #[serde()]
    #[structable(optional)]
    max_zone_name_length: Option<i32>,

    /// The max amount of records in a zone
    ///
    #[serde()]
    #[structable(optional)]
    max_zone_records: Option<i32>,

    /// The max amount of recordsets per zone
    ///
    #[serde()]
    #[structable(optional)]
    max_zone_recordsets: Option<i32>,

    /// The max amount of zones for this project
    ///
    #[serde()]
    #[structable(optional)]
    max_zones: Option<i32>,

    /// The lowest ttl allowed on this system
    ///
    #[serde()]
    #[structable(optional)]
    min_ttl: Option<i32>,
}

impl LimitCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Get Limit");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let ep_builder = get::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create Listener command
//!
//! Wraps invoking of the `v2/lbaas/listeners` with `POST` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;

use crate::common::parse_json;
use crate::common::parse_key_val;
use clap::ValueEnum;
use openstack_sdk::api::load_balancer::v2::listener::create;
use openstack_sdk::api::QueryAsync;
use serde_json::Value;
use structable_derive::StructTable;

/// Creates a listener for a load balancer.
///
/// The listener configures a port and protocol for the load balancer to listen
/// on for incoming requests. A load balancer may have zero or more listeners
/// configured.
///
/// This operation provisions a new listener by using the configuration that
/// you define in the request object. After the API validates the request and
/// starts the provisioning process, the API returns a response object that
/// contains a unique ID and the status of provisioning the listener.
///
/// In the response, the listener [provisioning status](#prov-status) is
/// `ACTIVE`, `PENDING_CREATE`, or `ERROR`.
///
/// If the status is `PENDING_CREATE`, issue GET
/// `/v2/lbaas/listeners/{listener_id}` to view the progress of the
/// provisioning operation. When the listener status changes to `ACTIVE`, the
/// listener is successfully provisioned and is ready for further
/// configuration.
///
/// If the API cannot fulfill the request due to insufficient data or data that
/// is not valid, the service returns the HTTP `Bad Request (400)` response
/// code with information about the failure in the response body. Validation
/// errors require that you correct the error and submit the request again.
///
/// Specifying a project_id is deprecated. The listener will inherit the
/// project_id of the parent load balancer.
///
/// You can configure all documented features of the listener at creation time
/// by specifying the additional elements or attributes in the request.
///
/// To create a listener, the parent load balancer must have an `ACTIVE`
/// provisioning status.
///
#[derive(Args)]
#[command(about = "Create Listener")]
pub struct ListenerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Defines mandatory and optional attributes of a POST request.
    ///
    #[command(flatten)]
    listener: Listener,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Protocol {
    Http,
    Https,
    Prometheus,
    Sctp,
    Tcp,
    TerminatedHttps,
    Udp,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Type {
    AppCookie,
    HttpCookie,
    SourceIp,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum ClientAuthentication {
    Mandatory,
    None,
    Optional,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum ListenerProtocol {
    Http,
    Https,
    Prometheus,
    Sctp,
    Tcp,
    TerminatedHttps,
    Udp,
}

/// Listener Body data
#[derive(Args, Clone)]
struct Listener {
    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`). Default is `true`.
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    admin_state_up: Option<bool>,

    /// A list of IPv4, IPv6 or mix of both CIDRs. The default is all allowed.
    /// When a list of CIDRs is provided, the default switches to deny all.
    ///
    /// **New in version 2.12**
    ///
    /// Parameter is an array, may be provided multiple times.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    allowed_cidrs: Option<Vec<String>>,

    /// Parameter is an array, may be provided multiple times.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    alpn_protocols: Option<Vec<String>>,

    /// The TLS client authentication mode. One of the options `NONE`,
    /// `OPTIONAL` or `MANDATORY`.
    ///
    /// **New in version 2.8**
    ///
    #[arg(help_heading = "Body parameters", long)]
    client_authentication: Option<ClientAuthentication>,

    /// The ref of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PEM format client CA certificate bundle for
    /// `TERMINATED_HTTPS` listeners.
    ///
    /// **New in version 2.8**
    ///
    #[arg(help_heading = "Body parameters", long)]
    client_ca_tls_container_ref: Option<String>,

    /// The URI of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PEM format CA revocation list file for
    /// `TERMINATED_HTTPS` listeners.
    ///
    /// **New in version 2.8**
    ///
    #[arg(help_heading = "Body parameters", long)]
    client_crl_container_ref: Option<String>,

    /// The maximum number of connections permitted for this listener. Default
    /// value is -1 which represents infinite connections or a default value
    /// defined by the provider driver.
    ///
    #[arg(help_heading = "Body parameters", long)]
    connection_limit: Option<i32>,

    /// A pool object.
    ///
    #[arg(help_heading = "Body parameters", long, value_name="JSON", value_parser=parse_json)]
    default_pool: Option<Value>,

    /// The ID of the pool used by the listener if no L7 policies match. The
    /// pool has some restrictions. See
    /// [Protocol Combinations (Listener/Pool)](#valid-protocol).
    ///
    #[arg(help_heading = "Body parameters", long)]
    default_pool_id: Option<String>,

    /// The URI of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PKCS12 format certificate/key bundle for
    /// `TERMINATED_HTTPS` listeners. DEPRECATED: A secret container of type
    /// “certificate” containing the certificate and key for `TERMINATED_HTTPS`
    /// listeners.
    ///
    #[arg(help_heading = "Body parameters", long)]
    default_tls_container_ref: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Defines whether the `includeSubDomains` directive should be added to
    /// the Strict-Transport-Security HTTP response header. This requires
    /// setting the `hsts_max_age` option as well in order to become effective.
    ///
    /// **New in version 2.27**
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    hsts_include_subdomains: Option<bool>,

    /// The value of the `max_age` directive for the Strict-Transport-Security
    /// HTTP response header. Setting this enables HTTP Strict Transport
    /// Security (HSTS) for the TLS-terminated listener.
    ///
    /// **New in version 2.27**
    ///
    #[arg(help_heading = "Body parameters", long)]
    hsts_max_age: Option<i32>,

    /// Defines whether the `preload` directive should be added to the
    /// Strict-Transport-Security HTTP response header. This requires setting
    /// the `hsts_max_age` option as well in order to become effective.
    ///
    /// **New in version 2.27**
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    hsts_preload: Option<bool>,

    /// A dictionary of optional headers to insert into the request before it
    /// is sent to the backend `member`. See
    /// [Supported HTTP Header Insertions](#header-insertions). Both keys and
    /// values are always specified as strings.
    ///
    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val::<String, String>)]
    insert_headers: Option<Vec<(String, String)>>,

    /// A list of L7 policy objects.
    ///
    /// Parameter is an array, may be provided multiple times.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long, value_name="JSON", value_parser=parse_json)]
    l7policies: Option<Vec<Value>>,

    /// The ID of the load balancer.
    ///
    #[arg(help_heading = "Body parameters", long)]
    loadbalancer_id: String,

    /// Human-readable name of the resource.
    ///
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// The ID of the project owning this resource. (deprecated)
    ///
    #[arg(help_heading = "Body parameters", long)]
    project_id: Option<String>,

    /// The protocol for the resource. One of `HTTP`, `HTTPS`, `SCTP`,
    /// `PROMETHEUS`, `TCP`, `TERMINATED_HTTPS`, or `UDP`.
    ///
    #[arg(help_heading = "Body parameters", long)]
    protocol: ListenerProtocol,

    /// The protocol port number for the resource.
    ///
    #[arg(help_heading = "Body parameters", long)]
    protocol_port: i32,

    /// A list of URIs to the
    /// [key manager service](https://docs.openstack.org/barbican/latest/)
    /// secrets containing PKCS12 format certificate/key bundles for
    /// `TERMINATED_HTTPS` listeners. (DEPRECATED) Secret containers of type
    /// “certificate” containing the certificates and keys for
    /// `TERMINATED_HTTPS` listeners.
    ///
    /// Parameter is an array, may be provided multiple times.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    sni_container_refs: Option<Vec<String>>,

    /// Parameter is an array, may be provided multiple times.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    tags: Option<Vec<String>>,

    #[arg(help_heading = "Body parameters", long)]
    tenant_id: Option<String>,

    /// Frontend client inactivity timeout in milliseconds. Default: 50000.
    ///
    /// **New in version 2.1**
    ///
    #[arg(help_heading = "Body parameters", long)]
    timeout_client_data: Option<i32>,

    /// Backend member connection timeout in milliseconds. Default: 5000.
    ///
    /// **New in version 2.1**
    ///
    #[arg(help_heading = "Body parameters", long)]
    timeout_member_connect: Option<i32>,

    /// Backend member inactivity timeout in milliseconds. Default: 50000.
    ///
    /// **New in version 2.1**
    ///
    #[arg(help_heading = "Body parameters", long)]
    timeout_member_data: Option<i32>,

    /// Time, in milliseconds, to wait for additional TCP packets for content
    /// inspection. Default: 0.
    ///
    /// **New in version 2.1**
    ///
    #[arg(help_heading = "Body parameters", long)]
    timeout_tcp_inspect: Option<i32>,

    #[arg(help_heading = "Body parameters", long)]
    tls_ciphers: Option<String>,

    /// Parameter is an array, may be provided multiple times.
    ///
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    tls_versions: Option<Vec<String>>,
}

/// Listener response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`).
    ///
    #[serde()]
    #[structable(optional)]
    admin_state_up: Option<bool>,

    /// A list of IPv4, IPv6 or mix of both CIDRs.
    ///
    /// **New in version 2.12**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    allowed_cidrs: Option<Value>,

    /// A list of ALPN protocols. Available protocols: http/1.0, http/1.1, h2
    ///
    /// **New in version 2.20**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    alpn_protocols: Option<Value>,

    /// The TLS client authentication mode. One of the options `NONE`,
    /// `OPTIONAL` or `MANDATORY`.
    ///
    /// **New in version 2.8**
    ///
    #[serde()]
    #[structable(optional)]
    client_authentication: Option<String>,

    /// The ref of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PEM format client CA certificate bundle for
    /// `TERMINATED_HTTPS` listeners.
    ///
    /// **New in version 2.8**
    ///
    #[serde()]
    #[structable(optional)]
    client_ca_tls_container_ref: Option<String>,

    /// The URI of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PEM format CA revocation list file for
    /// `TERMINATED_HTTPS` listeners.
    ///
    /// **New in version 2.8**
    ///
    #[serde()]
    #[structable(optional)]
    client_crl_container_ref: Option<String>,

    /// The maximum number of connections permitted for this listener. Default
    /// value is -1 which represents infinite connections or a default value
    /// defined by the provider driver.
    ///
    #[serde()]
    #[structable(optional)]
    connection_limit: Option<i32>,

    /// The UTC date and timestamp when the resource was created.
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// The ID of the pool used by the listener if no L7 policies match. The
    /// pool has some restrictions. See
    /// [Protocol Combinations (Listener/Pool)](#valid-protocol).
    ///
    #[serde()]
    #[structable(optional)]
    default_pool_id: Option<String>,

    /// The URI of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PKCS12 format certificate/key bundle for
    /// `TERMINATED_HTTPS` listeners. DEPRECATED: A secret container of type
    /// “certificate” containing the certificate and key for `TERMINATED_HTTPS`
    /// listeners.
    ///
    #[serde()]
    #[structable(optional)]
    default_tls_container_ref: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[serde()]
    #[structable(optional)]
    description: Option<String>,

    /// Defines whether the `includeSubDomains` directive should be added to
    /// the Strict-Transport-Security HTTP response header.
    ///
    /// **New in version 2.27**
    ///
    #[serde()]
    #[structable(optional)]
    hsts_include_subdomains: Option<bool>,

    /// The value of the `max_age` directive for the Strict-Transport-Security
    /// HTTP response header.
    ///
    /// **New in version 2.27**
    ///
    #[serde()]
    #[structable(optional)]
    hsts_max_age: Option<i32>,

    /// Defines whether the `preload` directive should be added to the
    /// Strict-Transport-Security HTTP response header.
    ///
    /// **New in version 2.27**
    ///
    #[serde()]
    #[structable(optional)]
    hsts_preload: Option<bool>,

    /// The ID of the listener.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// A dictionary of optional headers to insert into the request before it
    /// is sent to the backend `member`. See
    /// [Supported HTTP Header Insertions](#header-insertions). Both keys and
    /// values are always specified as strings.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    insert_headers: Option<Value>,

    /// A list of L7 policy IDs.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    l7policies: Option<Value>,

    /// A list of load balancer IDs.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    loadbalancers: Option<Value>,

    /// Human-readable name of the resource.
    ///
    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    /// The operating status of the resource. See
    /// [Operating Status Codes](#op-status).
    ///
    #[serde()]
    #[structable(optional)]
    operating_status: Option<String>,

    /// The ID of the project owning this resource.
    ///
    #[serde()]
    #[structable(optional)]
    project_id: Option<String>,

    /// The protocol for the resource. One of `HTTP`, `HTTPS`, `SCTP`,
    /// `PROMETHEUS`, `TCP`, `TERMINATED_HTTPS`, or `UDP`.
    ///
    #[serde()]
    #[structable(optional)]
    protocol: Option<String>,

    /// The protocol port number for the resource.
    ///
    #[serde()]
    #[structable(optional)]
    protocol_port: Option<i32>,

    /// The provisioning status of the resource. See
    /// [Provisioning Status Codes](#prov-status).
    ///
    #[serde()]
    #[structable(optional)]
    provisioning_status: Option<String>,

    /// A list of URIs to the
    /// [key manager service](https://docs.openstack.org/barbican/latest/)
    /// secrets containing PKCS12 format certificate/key bundles for
    /// `TERMINATED_HTTPS` listeners. (DEPRECATED) Secret containers of type
    /// “certificate” containing the certificates and keys for
    /// `TERMINATED_HTTPS` listeners.
    ///
    #[serde()]
    #[structable(optional, pretty)]
    sni_container_refs: Option<Value>,

    /// A list of simple strings assigned to the resource.
    ///
    /// **New in version 2.5**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    tags: Option<Value>,

    #[serde()]
    #[structable(optional)]
    tenant_id: Option<String>,

    /// Frontend client inactivity timeout in milliseconds. Default: 50000.
    ///
    /// **New in version 2.1**
    ///
    #[serde()]
    #[structable(optional)]
    timeout_client_data: Option<i32>,

    /// Backend member connection timeout in milliseconds. Default: 5000.
    ///
    /// **New in version 2.1**
    ///
    #[serde()]
    #[structable(optional)]
    timeout_member_connect: Option<i32>,

    /// Backend member inactivity timeout in milliseconds. Default: 50000.
    ///
    /// **New in version 2.1**
    ///
    #[serde()]
    #[structable(optional)]
    timeout_member_data: Option<i32>,

    /// Time, in milliseconds, to wait for additional TCP packets for content
    /// inspection. Default: 0.
    ///
    /// **New in version 2.1**
    ///
    #[serde()]
    #[structable(optional)]
    timeout_tcp_inspect: Option<i32>,

    /// List of ciphers in OpenSSL format (colon-separated). See
    /// <https://www.openssl.org/docs/man1.1.1/man1/ciphers.html>
    ///
    /// **New in version 2.15**
    ///
    #[serde()]
    #[structable(optional)]
    tls_ciphers: Option<String>,

    /// A list of TLS protocol versions. Available versions: SSLv3, TLSv1,
    /// TLSv1.1, TLSv1.2, TLSv1.3
    ///
    /// **New in version 2.17**
    ///
    #[serde()]
    #[structable(optional, pretty)]
    tls_versions: Option<Value>,

    /// The UTC date and timestamp when the resource was last updated.
    ///
    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,
}

impl ListenerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Create Listener");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = create::Request::builder();

        // Set path parameters
        // Set query parameters
        // Set body parameters
        // Set Request.listener data
        let args = &self.listener;
        let mut listener_builder = create::ListenerBuilder::default();
        if let Some(val) = &args.name {
            listener_builder.name(val);
        }

        if let Some(val) = &args.description {
            listener_builder.description(val);
        }

        if let Some(val) = &args.admin_state_up {
            listener_builder.admin_state_up(*val);
        }

        let tmp = match &args.protocol {
            ListenerProtocol::Http => create::ListenerProtocol::Http,
            ListenerProtocol::Https => create::ListenerProtocol::Https,
            ListenerProtocol::Prometheus => create::ListenerProtocol::Prometheus,
            ListenerProtocol::Sctp => create::ListenerProtocol::Sctp,
            ListenerProtocol::Tcp => create::ListenerProtocol::Tcp,
            ListenerProtocol::TerminatedHttps => create::ListenerProtocol::TerminatedHttps,
            ListenerProtocol::Udp => create::ListenerProtocol::Udp,
        };
        listener_builder.protocol(tmp);

        listener_builder.protocol_port(args.protocol_port);

        if let Some(val) = &args.connection_limit {
            listener_builder.connection_limit(*val);
        }

        if let Some(val) = &args.default_tls_container_ref {
            listener_builder.default_tls_container_ref(val);
        }

        if let Some(val) = &args.sni_container_refs {
            listener_builder.sni_container_refs(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.project_id {
            listener_builder.project_id(val);
        }

        if let Some(val) = &args.default_pool_id {
            listener_builder.default_pool_id(val);
        }

        if let Some(val) = &args.default_pool {
            listener_builder.default_pool(serde_json::from_value::<create::DefaultPool>(
                val.to_owned(),
            )?);
        }

        if let Some(val) = &args.l7policies {
            let l7policies_builder: Vec<create::L7policies> = val
                .iter()
                .flat_map(|v| serde_json::from_value::<create::L7policies>(v.to_owned()))
                .collect::<Vec<create::L7policies>>();
            listener_builder.l7policies(l7policies_builder);
        }

        if let Some(val) = &args.insert_headers {
            listener_builder.insert_headers(val.iter().cloned());
        }

        listener_builder.loadbalancer_id(&args.loadbalancer_id);

        if let Some(val) = &args.timeout_client_data {
            listener_builder.timeout_client_data(*val);
        }

        if let Some(val) = &args.timeout_member_connect {
            listener_builder.timeout_member_connect(*val);
        }

        if let Some(val) = &args.timeout_member_data {
            listener_builder.timeout_member_data(*val);
        }

        if let Some(val) = &args.timeout_tcp_inspect {
            listener_builder.timeout_tcp_inspect(*val);
        }

        if let Some(val) = &args.tags {
            listener_builder.tags(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.client_ca_tls_container_ref {
            listener_builder.client_ca_tls_container_ref(val);
        }

        if let Some(val) = &args.client_authentication {
            let tmp = match val {
                ClientAuthentication::Mandatory => create::ClientAuthentication::Mandatory,
                ClientAuthentication::None => create::ClientAuthentication::None,
                ClientAuthentication::Optional => create::ClientAuthentication::Optional,
            };
            listener_builder.client_authentication(tmp);
        }

        if let Some(val) = &args.client_crl_container_ref {
            listener_builder.client_crl_container_ref(val);
        }

        if let Some(val) = &args.allowed_cidrs {
            listener_builder.allowed_cidrs(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.tls_ciphers {
            listener_builder.tls_ciphers(val);
        }

        if let Some(val) = &args.tls_versions {
            listener_builder.tls_versions(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.alpn_protocols {
            listener_builder.alpn_protocols(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.hsts_max_age {
            listener_builder.hsts_max_age(*val);
        }

        if let Some(val) = &args.hsts_include_subdomains {
            listener_builder.hsts_include_subdomains(*val);
        }

        if let Some(val) = &args.hsts_preload {
            listener_builder.hsts_preload(*val);
        }

        if let Some(val) = &args.tenant_id {
            listener_builder.tenant_id(val);
        }

        ep_builder.listener(listener_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

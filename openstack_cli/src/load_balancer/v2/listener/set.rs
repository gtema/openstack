// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set Listener command
//!
//! Wraps invoking of the `v2/lbaas/listeners/{listener_id}` with `PUT` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use crate::common::parse_key_val;
use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::find;
use openstack_sdk::api::load_balancer::v2::listener::find;
use openstack_sdk::api::load_balancer::v2::listener::set;
use openstack_types::load_balancer::v2::listener::response::set::ListenerResponse;

/// Update an existing listener.
///
/// If the request is valid, the service returns the `Accepted (202)` response
/// code. To confirm the update, check that the listener provisioning status is
/// `ACTIVE`. If the status is `PENDING_UPDATE`, use a GET operation to poll
/// the listener object for changes.
///
/// This operation returns the updated listener object with the `ACTIVE`,
/// `PENDING_UPDATE`, or `ERROR` provisioning status.
#[derive(Args)]
#[command(about = "Update a Listener")]
pub struct ListenerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Defines attributes that are acceptable of a PUT request.
    #[command(flatten)]
    listener: Listener,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// listener_id parameter for /v2/lbaas/listeners/{listener_id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum ClientAuthentication {
    Mandatory,
    None,
    Optional,
}

/// Listener Body data
#[derive(Args, Clone)]
struct Listener {
    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`). Default is `true`.
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    admin_state_up: Option<bool>,

    /// A list of IPv4, IPv6 or mix of both CIDRs. The default is all allowed.
    /// When a list of CIDRs is provided, the default switches to deny all.
    ///
    /// **New in version 2.12**
    ///
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    allowed_cidrs: Option<Vec<String>>,

    /// A list of ALPN protocols. Available protocols: http/1.0, http/1.1, h2
    ///
    /// **New in version 2.20**
    ///
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    alpn_protocols: Option<Vec<String>>,

    /// The TLS client authentication mode. One of the options `NONE`,
    /// `OPTIONAL` or `MANDATORY`.
    ///
    /// **New in version 2.8**
    #[arg(help_heading = "Body parameters", long)]
    client_authentication: Option<ClientAuthentication>,

    /// The ref of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PEM format client CA certificate bundle for
    /// `TERMINATED_HTTPS` listeners.
    ///
    /// **New in version 2.8**
    #[arg(help_heading = "Body parameters", long)]
    client_ca_tls_container_ref: Option<String>,

    /// The URI of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PEM format CA revocation list file for
    /// `TERMINATED_HTTPS` listeners.
    ///
    /// **New in version 2.8**
    #[arg(help_heading = "Body parameters", long)]
    client_crl_container_ref: Option<String>,

    /// The maximum number of connections permitted for this listener. Default
    /// value is -1 which represents infinite connections or a default value
    /// defined by the provider driver.
    #[arg(help_heading = "Body parameters", long)]
    connection_limit: Option<i32>,

    /// The ID of the pool used by the listener if no L7 policies match. The
    /// pool has some restrictions. See
    /// [Protocol Combinations (Listener/Pool)](#valid-protocol).
    #[arg(help_heading = "Body parameters", long)]
    default_pool_id: Option<String>,

    /// The URI of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PKCS12 format certificate/key bundle for
    /// `TERMINATED_HTTPS` listeners. DEPRECATED: A secret container of type
    /// “certificate” containing the certificate and key for `TERMINATED_HTTPS`
    /// listeners.
    #[arg(help_heading = "Body parameters", long)]
    default_tls_container_ref: Option<String>,

    /// A human-readable description for the resource.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Defines whether the `includeSubDomains` directive should be added to
    /// the Strict-Transport-Security HTTP response header. This requires
    /// setting the `hsts_max_age` option as well in order to become effective.
    ///
    /// **New in version 2.27**
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    hsts_include_subdomains: Option<bool>,

    /// The value of the `max_age` directive for the Strict-Transport-Security
    /// HTTP response header. Setting this enables HTTP Strict Transport
    /// Security (HSTS) for the TLS-terminated listener.
    ///
    /// **New in version 2.27**
    #[arg(help_heading = "Body parameters", long)]
    hsts_max_age: Option<i32>,

    /// Defines whether the `preload` directive should be added to the
    /// Strict-Transport-Security HTTP response header. This requires setting
    /// the `hsts_max_age` option as well in order to become effective.
    ///
    /// **New in version 2.27**
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    hsts_preload: Option<bool>,

    /// A dictionary of optional headers to insert into the request before it
    /// is sent to the backend `member`. See
    /// [Supported HTTP Header Insertions](#header-insertions). Both keys and
    /// values are always specified as strings.
    #[arg(help_heading = "Body parameters", long, value_name="key=value", value_parser=parse_key_val::<String, String>)]
    insert_headers: Option<Vec<(String, String)>>,

    /// Human-readable name of the resource.
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// A list of URIs to the
    /// [key manager service](https://docs.openstack.org/barbican/latest/)
    /// secrets containing PKCS12 format certificate/key bundles for
    /// `TERMINATED_HTTPS` listeners. (DEPRECATED) Secret containers of type
    /// “certificate” containing the certificates and keys for
    /// `TERMINATED_HTTPS` listeners.
    ///
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    sni_container_refs: Option<Vec<String>>,

    /// A list of simple strings assigned to the resource.
    ///
    /// **New in version 2.5**
    ///
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    tags: Option<Vec<String>>,

    /// Frontend client inactivity timeout in milliseconds. Default: 50000.
    ///
    /// **New in version 2.1**
    #[arg(help_heading = "Body parameters", long)]
    timeout_client_data: Option<i32>,

    /// Backend member connection timeout in milliseconds. Default: 5000.
    ///
    /// **New in version 2.1**
    #[arg(help_heading = "Body parameters", long)]
    timeout_member_connect: Option<i32>,

    /// Backend member inactivity timeout in milliseconds. Default: 50000.
    ///
    /// **New in version 2.1**
    #[arg(help_heading = "Body parameters", long)]
    timeout_member_data: Option<i32>,

    /// Time, in milliseconds, to wait for additional TCP packets for content
    /// inspection. Default: 0.
    ///
    /// **New in version 2.1**
    #[arg(help_heading = "Body parameters", long)]
    timeout_tcp_inspect: Option<i32>,

    /// List of ciphers in OpenSSL format (colon-separated). See
    /// <https://www.openssl.org/docs/man1.1.1/man1/ciphers.html>
    ///
    /// **New in version 2.15**
    #[arg(help_heading = "Body parameters", long)]
    tls_ciphers: Option<String>,

    /// A list of TLS protocol versions. Available versions: SSLv3, TLSv1,
    /// TLSv1.1, TLSv1.2, TLSv1.3
    ///
    /// **New in version 2.17**
    ///
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    tls_versions: Option<Vec<String>>,
}

impl ListenerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set Listener");

        let op =
            OutputProcessor::from_args(parsed_args, Some("load-balancer.listener"), Some("set"));
        op.validate_args(parsed_args)?;

        let mut find_builder = find::Request::builder();

        find_builder.id(&self.path.id);
        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;

        let mut ep_builder = set::Request::builder();

        // Set path parameters
        let resource_id = find_data["id"]
            .as_str()
            .expect("Resource ID is a string")
            .to_string();
        ep_builder.id(resource_id.clone());
        // Set query parameters
        // Set body parameters
        // Set Request.listener data
        let args = &self.listener;
        let mut listener_builder = set::ListenerBuilder::default();
        if let Some(val) = &args.admin_state_up {
            listener_builder.admin_state_up(*val);
        }

        if let Some(val) = &args.allowed_cidrs {
            listener_builder.allowed_cidrs(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.alpn_protocols {
            listener_builder.alpn_protocols(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.client_authentication {
            let tmp = match val {
                ClientAuthentication::Mandatory => set::ClientAuthentication::Mandatory,
                ClientAuthentication::None => set::ClientAuthentication::None,
                ClientAuthentication::Optional => set::ClientAuthentication::Optional,
            };
            listener_builder.client_authentication(tmp);
        }

        if let Some(val) = &args.client_ca_tls_container_ref {
            listener_builder.client_ca_tls_container_ref(val);
        }

        if let Some(val) = &args.client_crl_container_ref {
            listener_builder.client_crl_container_ref(val);
        }

        if let Some(val) = &args.connection_limit {
            listener_builder.connection_limit(*val);
        }

        if let Some(val) = &args.default_pool_id {
            listener_builder.default_pool_id(val);
        }

        if let Some(val) = &args.default_tls_container_ref {
            listener_builder.default_tls_container_ref(val);
        }

        if let Some(val) = &args.description {
            listener_builder.description(val);
        }

        if let Some(val) = &args.hsts_include_subdomains {
            listener_builder.hsts_include_subdomains(*val);
        }

        if let Some(val) = &args.hsts_max_age {
            listener_builder.hsts_max_age(*val);
        }

        if let Some(val) = &args.hsts_preload {
            listener_builder.hsts_preload(*val);
        }

        if let Some(val) = &args.insert_headers {
            listener_builder.insert_headers(val.iter().cloned());
        }

        if let Some(val) = &args.name {
            listener_builder.name(val);
        }

        if let Some(val) = &args.sni_container_refs {
            listener_builder.sni_container_refs(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.tags {
            listener_builder.tags(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.timeout_client_data {
            listener_builder.timeout_client_data(*val);
        }

        if let Some(val) = &args.timeout_member_connect {
            listener_builder.timeout_member_connect(*val);
        }

        if let Some(val) = &args.timeout_member_data {
            listener_builder.timeout_member_data(*val);
        }

        if let Some(val) = &args.timeout_tcp_inspect {
            listener_builder.timeout_tcp_inspect(*val);
        }

        if let Some(val) = &args.tls_ciphers {
            listener_builder.tls_ciphers(val);
        }

        if let Some(val) = &args.tls_versions {
            listener_builder.tls_versions(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        ep_builder.listener(listener_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ListenerResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set L7Policy command
//!
//! Wraps invoking of the `v2/lbaas/l7policies/{l7policy_id}` with `PUT` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use clap::ValueEnum;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::find;
use openstack_sdk::api::load_balancer::v2::l7policy::find;
use openstack_sdk::api::load_balancer::v2::l7policy::set;
use openstack_types::load_balancer::v2::l7policy::response::set::L7policyResponse;

/// Updates a L7 policy.
///
/// If the request is valid, the service returns the `Accepted (202)` response
/// code. To confirm the update, check that the L7 policy provisioning status
/// is `ACTIVE`. If the status is `PENDING_UPDATE`, use a GET operation to poll
/// the L7 policy object for changes.
///
/// This operation returns the updated L7 policy object with the `ACTIVE`,
/// `PENDING_UPDATE`, or `ERROR` provisioning status.
///
/// If a policy is updated with a position that matches that of an existing
/// policy, then the updated policy is inserted at the given position.
#[derive(Args)]
#[command(about = "Update a L7 Policy")]
pub struct L7PolicyCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Defines attributes that are acceptable of a PUT request.
    #[command(flatten)]
    l7policy: L7policy,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// l7policy_id parameter for /v2/lbaas/l7policies/{l7policy_id} API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}

#[derive(Clone, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum Action {
    RedirectPrefix,
    RedirectToPool,
    RedirectToUrl,
    Reject,
}

/// L7policy Body data
#[derive(Args, Clone)]
struct L7policy {
    /// The L7 policy action. One of `REDIRECT_PREFIX`, `REDIRECT_TO_POOL`,
    /// `REDIRECT_TO_URL`, or `REJECT`.
    #[arg(help_heading = "Body parameters", long)]
    action: Option<Action>,

    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`). Default is `true`.
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    admin_state_up: Option<bool>,

    /// A human-readable description for the resource.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Human-readable name of the resource.
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// The position of this policy on the listener. Positions start at 1.
    #[arg(help_heading = "Body parameters", long)]
    position: Option<i32>,

    /// Requests matching this policy will be redirected to the specified URL
    /// or Prefix URL with the HTTP response code. Valid if `action` is
    /// `REDIRECT_TO_URL` or `REDIRECT_PREFIX`. Valid options are: 301, 302,
    /// 303, 307, or 308. Default is 302.
    ///
    /// **New in version 2.9**
    #[arg(help_heading = "Body parameters", long)]
    redirect_http_code: Option<i32>,

    /// Requests matching this policy will be redirected to the pool with this
    /// ID. Only valid if `action` is `REDIRECT_TO_POOL`. The pool has some
    /// restrictions, See
    /// [Protocol Combinations (Listener/Pool)](#valid-protocol).
    #[arg(help_heading = "Body parameters", long)]
    redirect_pool_id: Option<String>,

    /// Requests matching this policy will be redirected to this Prefix URL.
    /// Only valid if `action` is `REDIRECT_PREFIX`.
    #[arg(help_heading = "Body parameters", long)]
    redirect_prefix: Option<String>,

    /// Requests matching this policy will be redirected to this URL. Only
    /// valid if `action` is `REDIRECT_TO_URL`.
    #[arg(help_heading = "Body parameters", long)]
    redirect_url: Option<String>,

    /// A list of simple strings assigned to the resource.
    ///
    /// **New in version 2.5**
    ///
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    tags: Option<Vec<String>>,
}

impl L7PolicyCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set L7Policy");

        let op =
            OutputProcessor::from_args(parsed_args, Some("load-balancer.l7policy"), Some("set"));
        op.validate_args(parsed_args)?;

        let mut find_builder = find::Request::builder();

        find_builder.id(&self.path.id);

        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;

        let mut ep_builder = set::Request::builder();

        let resource_id = find_data["id"]
            .as_str()
            .expect("Resource ID is a string")
            .to_string();
        ep_builder.id(resource_id.clone());

        // Set body parameters
        // Set Request.l7policy data
        let args = &self.l7policy;
        let mut l7policy_builder = set::L7policyBuilder::default();
        if let Some(val) = &args.action {
            let tmp = match val {
                Action::RedirectPrefix => set::Action::RedirectPrefix,
                Action::RedirectToPool => set::Action::RedirectToPool,
                Action::RedirectToUrl => set::Action::RedirectToUrl,
                Action::Reject => set::Action::Reject,
            };
            l7policy_builder.action(tmp);
        }

        if let Some(val) = &args.admin_state_up {
            l7policy_builder.admin_state_up(*val);
        }

        if let Some(val) = &args.description {
            l7policy_builder.description(val);
        }

        if let Some(val) = &args.name {
            l7policy_builder.name(val);
        }

        if let Some(val) = &args.position {
            l7policy_builder.position(*val);
        }

        if let Some(val) = &args.redirect_http_code {
            l7policy_builder.redirect_http_code(*val);
        }

        if let Some(val) = &args.redirect_pool_id {
            l7policy_builder.redirect_pool_id(val);
        }

        if let Some(val) = &args.redirect_prefix {
            l7policy_builder.redirect_prefix(val);
        }

        if let Some(val) = &args.redirect_url {
            l7policy_builder.redirect_url(val);
        }

        if let Some(val) = &args.tags {
            l7policy_builder.tags(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        ep_builder.l7policy(l7policy_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<L7policyResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

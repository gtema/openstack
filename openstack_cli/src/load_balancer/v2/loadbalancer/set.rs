// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Set Loadbalancer command
//!
//! Wraps invoking of the `v2/lbaas/loadbalancers/{loadbalancer_id}` with `PUT` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::find;
use openstack_sdk::api::load_balancer::v2::loadbalancer::find;
use openstack_sdk::api::load_balancer::v2::loadbalancer::set;
use openstack_types::load_balancer::v2::loadbalancer::response::set::LoadbalancerResponse;

/// Updates a load balancer.
///
/// If the request is valid, the service returns the `Accepted (202)` response
/// code. To confirm the update, check that the load balancer provisioning
/// status is `ACTIVE`. If the status is `PENDING_UPDATE`, use a GET operation
/// to poll the load balancer object for changes.
///
/// This operation returns the updated load balancer object with the `ACTIVE`,
/// `PENDING_UPDATE`, or `ERROR` provisioning status.
#[derive(Args)]
#[command(about = "Update a Load Balancer")]
pub struct LoadbalancerCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// A load balancer object.
    #[command(flatten)]
    loadbalancer: Loadbalancer,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// loadbalancer_id parameter for /v2/lbaas/loadbalancers/{loadbalancer_id}
    /// API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_id",
        value_name = "ID"
    )]
    id: String,
}
/// Loadbalancer Body data
#[derive(Args, Clone)]
struct Loadbalancer {
    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`).
    #[arg(action=clap::ArgAction::Set, help_heading = "Body parameters", long)]
    admin_state_up: Option<bool>,

    /// A human-readable description for the resource.
    #[arg(help_heading = "Body parameters", long)]
    description: Option<String>,

    /// Human-readable name of the resource.
    #[arg(help_heading = "Body parameters", long)]
    name: Option<String>,

    /// A list of simple strings assigned to the resource.
    ///
    /// **New in version 2.5**
    ///
    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    tags: Option<Vec<String>>,

    /// The ID of the QoS Policy which will apply to the Virtual IP (VIP).
    #[arg(help_heading = "Body parameters", long)]
    vip_qos_policy_id: Option<String>,

    /// Parameter is an array, may be provided multiple times.
    #[arg(action=clap::ArgAction::Append, help_heading = "Body parameters", long)]
    vip_sg_ids: Option<Vec<String>>,
}

impl LoadbalancerCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Set Loadbalancer");

        let op = OutputProcessor::from_args(
            parsed_args,
            Some("load-balancer.loadbalancer"),
            Some("set"),
        );
        op.validate_args(parsed_args)?;

        let mut find_builder = find::Request::builder();

        find_builder.id(&self.path.id);

        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;

        let mut ep_builder = set::Request::builder();

        let resource_id = find_data["id"]
            .as_str()
            .expect("Resource ID is a string")
            .to_string();
        ep_builder.id(resource_id.clone());

        // Set body parameters
        // Set Request.loadbalancer data
        let args = &self.loadbalancer;
        let mut loadbalancer_builder = set::LoadbalancerBuilder::default();
        if let Some(val) = &args.admin_state_up {
            loadbalancer_builder.admin_state_up(*val);
        }

        if let Some(val) = &args.description {
            loadbalancer_builder.description(val);
        }

        if let Some(val) = &args.name {
            loadbalancer_builder.name(val);
        }

        if let Some(val) = &args.tags {
            loadbalancer_builder.tags(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        if let Some(val) = &args.vip_qos_policy_id {
            loadbalancer_builder.vip_qos_policy_id(val);
        }

        if let Some(val) = &args.vip_sg_ids {
            loadbalancer_builder.vip_sg_ids(val.iter().map(Into::into).collect::<Vec<_>>());
        }

        ep_builder.loadbalancer(loadbalancer_builder.build().unwrap());

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<LoadbalancerResponse>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List Pools command
//!
//! Wraps invoking of the `v2/lbaas/pools` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use eyre::OptionExt;
use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::find_by_name;
use openstack_sdk::api::identity::v3::project::find as find_project;
use openstack_sdk::api::load_balancer::v2::pool::list;
use openstack_sdk::api::{Pagination, paged};
use serde_json::Value;
use structable_derive::StructTable;
use tracing::warn;

/// Lists all pools for the project.
///
/// Use the `fields` query parameter to control which fields are returned in
/// the response body. Additionally, you can filter results by using query
/// string parameters. For information, see
/// [Filtering and column selection](#filtering).
///
/// Administrative users can specify a project ID that is different than their
/// own to list pools for other projects.
///
/// The list might be empty.
///
#[derive(Args)]
#[command(about = "List Pools")]
pub struct PoolsCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Total limit of entities count to return. Use this when there are too many entries.
    #[arg(long, default_value_t = 10000)]
    max_items: usize,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    /// The administrative state of the resource
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    admin_state_up: Option<bool>,

    /// A list of ALPN protocols. Available protocols: http/1.0, http/1.1, h2
    ///
    #[arg(help_heading = "Query parameters", long)]
    alpn_protocols: Option<String>,

    /// The UTC date and timestamp when the resource was created.
    ///
    #[arg(help_heading = "Query parameters", long)]
    created_at: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[arg(help_heading = "Query parameters", long)]
    description: Option<String>,

    /// The ID of the resource
    ///
    #[arg(help_heading = "Query parameters", long)]
    id: Option<String>,

    /// Page size
    ///
    #[arg(help_heading = "Query parameters", long)]
    limit: Option<i32>,

    /// The ID of the load balancer for the pool.
    ///
    #[arg(help_heading = "Query parameters", long)]
    loadbalancer_id: Option<String>,

    /// ID of the last item in the previous list
    ///
    #[arg(help_heading = "Query parameters", long)]
    marker: Option<String>,

    /// Human-readable name of the resource.
    ///
    #[arg(help_heading = "Query parameters", long)]
    name: Option<String>,

    /// Return the list of entities that do not have one or more of the given
    /// tags.
    ///
    #[arg(help_heading = "Query parameters", long)]
    not_tags: Option<String>,

    /// Return the list of entities that do not have at least one of the given
    /// tags.
    ///
    #[arg(help_heading = "Query parameters", long)]
    not_tags_any: Option<String>,

    /// The operating status of the resource.
    ///
    #[arg(help_heading = "Query parameters", long, value_parser = ["DEGRADED","DRAINING","ERROR","NO_MONITOR","OFFLINE","ONLINE"])]
    operating_status: Option<String>,

    /// The page direction.
    ///
    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    page_reverse: Option<bool>,

    /// Project resource for which the operation should be performed.
    #[command(flatten)]
    project: ProjectInput,

    /// The provisioning status of the resource.
    ///
    #[arg(help_heading = "Query parameters", long, value_parser = ["ACTIVE","DELETED","ERROR","PENDING_CREATE","PENDING_DELETE","PENDING_UPDATE"])]
    provisioning_status: Option<String>,

    /// Return the list of entities that have this tag or tags.
    ///
    #[arg(help_heading = "Query parameters", long)]
    tags: Option<String>,

    /// Return the list of entities that have one or more of the given tags.
    ///
    #[arg(help_heading = "Query parameters", long)]
    tags_any: Option<String>,

    /// List of ciphers in OpenSSL format
    ///
    #[arg(help_heading = "Query parameters", long)]
    tls_ciphers: Option<String>,

    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    tls_enabled: Option<bool>,

    /// A list of TLS protocol versions.
    ///
    #[arg(help_heading = "Query parameters", long)]
    tls_versions: Option<String>,

    /// The UTC date and timestamp when the resource was last updated.
    ///
    #[arg(help_heading = "Query parameters", long)]
    updated_at: Option<String>,
}

/// Project input select group
#[derive(Args)]
#[group(required = false, multiple = false)]
struct ProjectInput {
    /// Project Name.
    #[arg(long, help_heading = "Path parameters", value_name = "PROJECT_NAME")]
    project_name: Option<String>,
    /// Project ID.
    #[arg(long, help_heading = "Path parameters", value_name = "PROJECT_ID")]
    project_id: Option<String>,
    /// Current project.
    #[arg(long, help_heading = "Path parameters", action = clap::ArgAction::SetTrue)]
    current_project: bool,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}
/// Pools response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The administrative state of the resource, which is up (`true`) or down
    /// (`false`).
    ///
    #[serde()]
    #[structable(optional, wide)]
    admin_state_up: Option<bool>,

    /// A list of ALPN protocols. Available protocols: http/1.0, http/1.1, h2
    ///
    /// **New in version 2.24**
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    alpn_protocols: Option<Value>,

    /// The reference of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PEM format CA certificate bundle for `tls_enabled`
    /// pools.
    ///
    /// **New in version 2.8**
    ///
    #[serde()]
    #[structable(optional, wide)]
    ca_tls_container_ref: Option<String>,

    /// The UTC date and timestamp when the resource was created.
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// The reference of the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PEM format CA revocation list file for
    /// `tls_enabled` pools.
    ///
    #[serde()]
    #[structable(optional, wide)]
    crl_container_ref: Option<String>,

    /// A human-readable description for the resource.
    ///
    #[serde()]
    #[structable(optional, wide)]
    description: Option<String>,

    /// The associated health monitor ID.
    ///
    #[serde()]
    #[structable(optional, wide)]
    healthmonitor_id: Option<String>,

    /// The ID of the pool.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The load balancing algorithm for the pool. One of `LEAST_CONNECTIONS`,
    /// `ROUND_ROBIN`, `SOURCE_IP`, or `SOURCE_IP_PORT`.
    ///
    #[serde()]
    #[structable(optional, wide)]
    lb_algorithm: Option<String>,

    /// A list of listener IDs.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    listeners: Option<Value>,

    /// A list of load balancer IDs.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    loadbalancers: Option<Value>,

    /// A list of member IDs.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    members: Option<Value>,

    /// Human-readable name of the resource.
    ///
    #[serde()]
    #[structable(optional)]
    name: Option<String>,

    /// The operating status of the resource. See
    /// [Operating Status Codes](#op-status).
    ///
    #[serde()]
    #[structable(optional, status)]
    operating_status: Option<String>,

    /// The ID of the project owning this resource.
    ///
    #[serde()]
    #[structable(optional, wide)]
    project_id: Option<String>,

    /// The protocol for the resource. One of `HTTP`, `HTTPS`, `PROXY`,
    /// `PROXYV2`, `SCTP`, `TCP`, or `UDP`.
    ///
    #[serde()]
    #[structable(optional, wide)]
    protocol: Option<String>,

    /// The provisioning status of the resource. See
    /// [Provisioning Status Codes](#prov-status).
    ///
    #[serde()]
    #[structable(optional, wide)]
    provisioning_status: Option<String>,

    /// A JSON object specifying the session persistence for the pool or `null`
    /// for no session persistence. See
    /// [Pool Session Persistence](#session-persistence). Default is `null`.
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    session_persistence: Option<Value>,

    /// A list of simple strings assigned to the resource.
    ///
    /// **New in version 2.5**
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    tags: Option<Value>,

    #[serde()]
    #[structable(optional, wide)]
    tenant_id: Option<String>,

    /// List of ciphers in OpenSSL format (colon-separated). See
    /// <https://www.openssl.org/docs/man1.1.1/man1/ciphers.html>
    ///
    /// **New in version 2.15**
    ///
    #[serde()]
    #[structable(optional, wide)]
    tls_ciphers: Option<String>,

    /// The reference to the
    /// [key manager service](https://docs.openstack.org/castellan/latest/)
    /// secret containing a PKCS12 format certificate/key bundle for
    /// `tls_enabled` pools for TLS client authentication to the member
    /// servers.
    ///
    /// **New in version 2.8**
    ///
    #[serde()]
    #[structable(optional, wide)]
    tls_container_ref: Option<String>,

    /// When `true` connections to backend member servers will use TLS
    /// encryption. Default is `false`.
    ///
    /// **New in version 2.8**
    ///
    #[serde()]
    #[structable(optional, wide)]
    tls_enabled: Option<bool>,

    /// A list of TLS protocol versions. Available versions: SSLv3, TLSv1,
    /// TLSv1.1, TLSv1.2, TLSv1.3
    ///
    /// **New in version 2.17**
    ///
    #[serde()]
    #[structable(optional, pretty, wide)]
    tls_versions: Option<Value>,

    /// The UTC date and timestamp when the resource was last updated.
    ///
    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,
}

impl PoolsCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List Pools");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        // Set query parameters
        if let Some(val) = &self.query.admin_state_up {
            ep_builder.admin_state_up(*val);
        }
        if let Some(val) = &self.query.alpn_protocols {
            ep_builder.alpn_protocols(val);
        }
        if let Some(val) = &self.query.created_at {
            ep_builder.created_at(val);
        }
        if let Some(val) = &self.query.description {
            ep_builder.description(val);
        }
        if let Some(val) = &self.query.id {
            ep_builder.id(val);
        }
        if let Some(val) = &self.query.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &self.query.loadbalancer_id {
            ep_builder.loadbalancer_id(val);
        }
        if let Some(val) = &self.query.marker {
            ep_builder.marker(val);
        }
        if let Some(val) = &self.query.name {
            ep_builder.name(val);
        }
        if let Some(val) = &self.query.page_reverse {
            ep_builder.page_reverse(*val);
        }
        if let Some(id) = &self.query.project.project_id {
            // project_id is passed. No need to lookup
            ep_builder.project_id(id);
        } else if let Some(name) = &self.query.project.project_name {
            // project_name is passed. Need to lookup resource
            let mut sub_find_builder = find_project::Request::builder();
            warn!(
                "Querying project by name (because of `--project-name` parameter passed) may not be definite. This may fail in which case parameter `--project-id` should be used instead."
            );

            sub_find_builder.id(name);
            let find_ep = sub_find_builder
                .build()
                .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
            let find_data: serde_json::Value = find_by_name(find_ep).query_async(client).await?;
            // Try to extract resource id
            match find_data.get("id") {
                Some(val) => match val.as_str() {
                    Some(id_str) => {
                        ep_builder.project_id(id_str.to_owned());
                    }
                    None => {
                        return Err(OpenStackCliError::ResourceAttributeNotString(
                            serde_json::to_string(&val)?,
                        ));
                    }
                },
                None => {
                    return Err(OpenStackCliError::ResourceAttributeMissing(
                        "id".to_string(),
                    ));
                }
            };
        } else if self.query.project.current_project {
            ep_builder.project_id(
                client
                    .get_auth_info()
                    .ok_or_eyre("Cannot determine current authentication information")?
                    .token
                    .user
                    .id,
            );
        }
        if let Some(val) = &self.query.tls_enabled {
            ep_builder.tls_enabled(*val);
        }
        if let Some(val) = &self.query.tls_ciphers {
            ep_builder.tls_ciphers(val);
        }
        if let Some(val) = &self.query.tls_versions {
            ep_builder.tls_versions(val);
        }
        if let Some(val) = &self.query.updated_at {
            ep_builder.updated_at(val);
        }
        if let Some(val) = &self.query.provisioning_status {
            ep_builder.provisioning_status(val);
        }
        if let Some(val) = &self.query.operating_status {
            ep_builder.operating_status(val);
        }
        if let Some(val) = &self.query.tags {
            ep_builder.tags(val);
        }
        if let Some(val) = &self.query.tags_any {
            ep_builder.tags_any(val);
        }
        if let Some(val) = &self.query.not_tags {
            ep_builder.not_tags(val);
        }
        if let Some(val) = &self.query.not_tags_any {
            ep_builder.not_tags_any(val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = paged(ep, Pagination::Limit(self.max_items))
            .query_async(client)
            .await?;

        op.output_list::<ResponseData>(data)?;
        Ok(())
    }
}

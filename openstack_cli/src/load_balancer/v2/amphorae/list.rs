// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List Amphoraes command
//!
//! Wraps invoking of the `v2/octavia/amphorae` with `GET` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::load_balancer::v2::amphorae::list;
use openstack_sdk::api::{Pagination, paged};
use openstack_types::load_balancer::v2::amphorae::response::list::AmphoraeResponse;

/// Lists all amphora for the project.
///
/// If you are not an administrative user, the service returns the HTTP
/// `Forbidden (403)` response code.
///
/// Use the `fields` query parameter to control which fields are returned in
/// the response body. Additionally, you can filter results by using query
/// string parameters. For information, see
/// [Filtering and column selection](#filtering).
///
/// The list might be empty.
#[derive(Args)]
#[command(about = "List Amphora")]
pub struct AmphoraesCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

    /// Total limit of entities count to return. Use this when there are too many entries.
    #[arg(long, default_value_t = 10000)]
    max_items: usize,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {
    #[arg(help_heading = "Query parameters", long)]
    cached_zone: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    cert_busy: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    cert_expiration: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    compute_flavor: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    compute_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    created_at: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    ha_ip: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    ha_port_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    image_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    lb_network_ip: Option<String>,

    /// Page size
    #[arg(help_heading = "Query parameters", long)]
    limit: Option<i32>,

    #[arg(help_heading = "Query parameters", long)]
    loadbalancer_id: Option<String>,

    /// ID of the last item in the previous list
    #[arg(help_heading = "Query parameters", long)]
    marker: Option<String>,

    /// The page direction.
    #[arg(action=clap::ArgAction::Set, help_heading = "Query parameters", long)]
    page_reverse: Option<bool>,

    #[arg(help_heading = "Query parameters", long)]
    role: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    status: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    updated_at: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    vrrp_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    vrrp_interface: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    vrrp_ip: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    vrrp_port_id: Option<String>,

    #[arg(help_heading = "Query parameters", long)]
    vrrp_priority: Option<String>,
}

/// Path parameters
#[derive(Args)]
struct PathParameters {}

impl AmphoraesCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("List Amphoraes");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = list::Request::builder();

        // Set path parameters
        // Set query parameters
        if let Some(val) = &self.query.cached_zone {
            ep_builder.cached_zone(val);
        }
        if let Some(val) = &self.query.cert_busy {
            ep_builder.cert_busy(val);
        }
        if let Some(val) = &self.query.cert_expiration {
            ep_builder.cert_expiration(val);
        }
        if let Some(val) = &self.query.compute_id {
            ep_builder.compute_id(val);
        }
        if let Some(val) = &self.query.compute_flavor {
            ep_builder.compute_flavor(val);
        }
        if let Some(val) = &self.query.created_at {
            ep_builder.created_at(val);
        }
        if let Some(val) = &self.query.ha_ip {
            ep_builder.ha_ip(val);
        }
        if let Some(val) = &self.query.ha_port_id {
            ep_builder.ha_port_id(val);
        }
        if let Some(val) = &self.query.id {
            ep_builder.id(val);
        }
        if let Some(val) = &self.query.image_id {
            ep_builder.image_id(val);
        }
        if let Some(val) = &self.query.lb_network_ip {
            ep_builder.lb_network_ip(val);
        }
        if let Some(val) = &self.query.limit {
            ep_builder.limit(*val);
        }
        if let Some(val) = &self.query.loadbalancer_id {
            ep_builder.loadbalancer_id(val);
        }
        if let Some(val) = &self.query.marker {
            ep_builder.marker(val);
        }
        if let Some(val) = &self.query.page_reverse {
            ep_builder.page_reverse(*val);
        }
        if let Some(val) = &self.query.role {
            ep_builder.role(val);
        }
        if let Some(val) = &self.query.status {
            ep_builder.status(val);
        }
        if let Some(val) = &self.query.updated_at {
            ep_builder.updated_at(val);
        }
        if let Some(val) = &self.query.vrrp_ip {
            ep_builder.vrrp_ip(val);
        }
        if let Some(val) = &self.query.vrrp_port_id {
            ep_builder.vrrp_port_id(val);
        }
        if let Some(val) = &self.query.vrrp_interface {
            ep_builder.vrrp_interface(val);
        }
        if let Some(val) = &self.query.vrrp_id {
            ep_builder.vrrp_id(val);
        }
        if let Some(val) = &self.query.vrrp_priority {
            ep_builder.vrrp_priority(val);
        }
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = paged(ep, Pagination::Limit(self.max_items))
            .query_async(client)
            .await?;
        op.output_list::<AmphoraeResponse>(data)?;
        Ok(())
    }
}

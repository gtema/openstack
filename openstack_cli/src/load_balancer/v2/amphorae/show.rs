// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Show Amphorae command
//!
//! Wraps invoking of the `v2/octavia/amphorae/{amphora_id}` with `GET` method

use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::OutputConfig;
use crate::StructTable;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::load_balancer::v2::amphorae::get;
use structable_derive::StructTable;

/// Shows the details of an amphora.
///
/// If you are not an administrative user, the service returns the HTTP
/// `Forbidden (403)` response code.
///
/// This operation does not require a request body.
///
#[derive(Args)]
#[command(about = "Show Amphora details")]
pub struct AmphoraeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// amphora_id parameter for /v2/octavia/amphorae/{amphora_id} API
    ///
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_amphora_id",
        value_name = "AMPHORA_ID"
    )]
    amphora_id: String,
}
/// Amphorae response representation
#[derive(Deserialize, Serialize, Clone, StructTable)]
struct ResponseData {
    /// The availability zone of a compute instance, cached at create time.
    /// This is not guaranteed to be current. May be an empty-string if the
    /// compute service does not use zones.
    ///
    #[serde()]
    #[structable(optional)]
    cached_zone: Option<String>,

    /// Whether the certificate is in the process of being replaced.
    ///
    #[serde()]
    #[structable(optional)]
    cert_busy: Option<bool>,

    /// The date the certificate for the amphora expires.
    ///
    #[serde()]
    #[structable(optional)]
    cert_expiration: Option<String>,

    /// The ID of the compute flavor used for the amphora.
    ///
    /// **New in version 2.3**
    ///
    #[serde()]
    #[structable(optional)]
    compute_flavor: Option<String>,

    /// The ID of the amphora resource in the compute system.
    ///
    #[serde()]
    #[structable(optional)]
    compute_id: Option<String>,

    /// The UTC date and timestamp when the resource was created.
    ///
    #[serde()]
    #[structable(optional)]
    created_at: Option<String>,

    /// The IP address of the Virtual IP (VIP).
    ///
    #[serde()]
    #[structable(optional)]
    ha_ip: Option<String>,

    /// The ID of the Virtual IP (VIP) port.
    ///
    #[serde()]
    #[structable(optional)]
    ha_port_id: Option<String>,

    /// The associated amphora ID.
    ///
    #[serde()]
    #[structable(optional)]
    id: Option<String>,

    /// The ID of the glance image used for the amphora.
    ///
    /// **New in version 2.1**
    ///
    #[serde()]
    #[structable(optional)]
    image_id: Option<String>,

    /// The management IP of the amphora.
    ///
    #[serde()]
    #[structable(optional)]
    lb_network_ip: Option<String>,

    /// The ID of the load balancer.
    ///
    #[serde()]
    #[structable(optional)]
    loadbalancer_id: Option<String>,

    /// The role of the amphora. One of `STANDALONE`, `MASTER`, `BACKUP`.
    ///
    #[serde()]
    #[structable(optional)]
    role: Option<String>,

    /// The status of the amphora. One of: `BOOTING`, `ALLOCATED`, `READY`,
    /// `PENDING_CREATE`, `PENDING_DELETE`, `DELETED`, `ERROR`.
    ///
    #[serde()]
    #[structable(optional)]
    status: Option<String>,

    /// The UTC date and timestamp when the resource was last updated.
    ///
    #[serde()]
    #[structable(optional)]
    updated_at: Option<String>,

    /// The vrrp group’s ID for the amphora.
    ///
    #[serde()]
    #[structable(optional)]
    vrrp_id: Option<i32>,

    /// The bound interface name of the vrrp port on the amphora.
    ///
    #[serde()]
    #[structable(optional)]
    vrrp_interface: Option<String>,

    /// The address of the vrrp port on the amphora.
    ///
    #[serde()]
    #[structable(optional)]
    vrrp_ip: Option<String>,

    /// The vrrp port’s ID in the networking system.
    ///
    #[serde()]
    #[structable(optional)]
    vrrp_port_id: Option<String>,

    /// The priority of the amphora in the vrrp group.
    ///
    #[serde()]
    #[structable(optional)]
    vrrp_priority: Option<i32>,
}

impl AmphoraeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Show Amphorae");

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;

        let mut ep_builder = get::Request::builder();

        // Set path parameters
        ep_builder.amphora_id(&self.path.amphora_id);
        // Set query parameters
        // Set body parameters

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Get Amphorae command
//!
//! Wraps invoking of the `v2/octavia/amphorae/{amphora_id}/stats` with `GET` method

use clap::Args;
use tracing::info;

use openstack_sdk::AsyncOpenStack;

use crate::Cli;
use crate::OpenStackCliError;
use crate::output::OutputProcessor;

use openstack_sdk::api::QueryAsync;
use openstack_sdk::api::load_balancer::v2::amphorae::stats;
use openstack_types::load_balancer::v2::amphorae::response::stats::AmphoraeResponse;

/// Show the statistics for an amphora.
///
/// If you are not an administrative user, the service returns the HTTP
/// `Forbidden (403)` response code.
///
/// Use the `fields` query parameter to control which fields are returned in
/// the response body.
///
/// **New in version 2.3**
#[derive(Args)]
#[command(about = "Show Amphora Statistics")]
pub struct AmphoraeCommand {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,
}

/// Query parameters
#[derive(Args)]
struct QueryParameters {}

/// Path parameters
#[derive(Args)]
struct PathParameters {
    /// amphora_id parameter for /v2/octavia/amphorae/{amphora_id}/stats API
    #[arg(
        help_heading = "Path parameters",
        id = "path_param_amphora_id",
        value_name = "AMPHORA_ID"
    )]
    amphora_id: String,
}

impl AmphoraeCommand {
    /// Perform command action
    pub async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("Get Amphorae");

        let op =
            OutputProcessor::from_args(parsed_args, Some("load-balancer.amphorae"), Some("stats"));
        op.validate_args(parsed_args)?;

        let mut ep_builder = stats::Request::builder();

        ep_builder.amphora_id(&self.path.amphora_id);

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

        let data: Vec<serde_json::Value> = ep.query_async(client).await?;
        op.output_list::<AmphoraeResponse>(data)?;
        // Show command specific hints
        op.show_command_hint()?;
        Ok(())
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Lists all load balancers for the project.
//!
//! Use the `fields` query parameter to control which fields are returned in
//! the response body. Additionally, you can filter results by using query
//! string parameters. For information, see
//! [Filtering and column selection](#filtering).
//!
//! Administrative users can specify a project ID that is different than their
//! own to list load balancers for other projects.
//!
//! The list might be empty.
//!
use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use std::borrow::Cow;

use crate::api::Pageable;
#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    /// An availability zone name.
    #[builder(default, setter(into))]
    availability_zone: Option<Cow<'a, str>>,

    /// The UTC date and timestamp when the resource was created.
    #[builder(default, setter(into))]
    created_at: Option<Cow<'a, str>>,

    /// A human-readable description for the resource.
    #[builder(default, setter(into))]
    description: Option<Cow<'a, str>>,

    /// The ID of the flavor.
    #[builder(default, setter(into))]
    flavor_id: Option<Cow<'a, str>>,

    /// The ID of the resource
    #[builder(default, setter(into))]
    id: Option<Cow<'a, str>>,

    /// Page size
    #[builder(default)]
    limit: Option<i32>,

    /// ID of the last item in the previous list
    #[builder(default, setter(into))]
    marker: Option<Cow<'a, str>>,

    /// Human-readable name of the resource.
    #[builder(default, setter(into))]
    name: Option<Cow<'a, str>>,

    /// Return the list of entities that do not have one or more of the given
    /// tags.
    #[builder(default, setter(into))]
    not_tags: Option<Cow<'a, str>>,

    /// Return the list of entities that do not have at least one of the given
    /// tags.
    #[builder(default, setter(into))]
    not_tags_any: Option<Cow<'a, str>>,

    /// The operating status of the resource.
    #[builder(default, setter(into))]
    operating_status: Option<Cow<'a, str>>,

    /// The page direction.
    #[builder(default)]
    page_reverse: Option<bool>,

    /// The ID of the project owning this resource.
    #[builder(default, setter(into))]
    project_id: Option<Cow<'a, str>>,

    /// Provider name for the load balancer.
    #[builder(default, setter(into))]
    provider: Option<Cow<'a, str>>,

    /// The provisioning status of the resource.
    #[builder(default, setter(into))]
    provisioning_status: Option<Cow<'a, str>>,

    /// Return the list of entities that have this tag or tags.
    #[builder(default, setter(into))]
    tags: Option<Cow<'a, str>>,

    /// Return the list of entities that have one or more of the given tags.
    #[builder(default, setter(into))]
    tags_any: Option<Cow<'a, str>>,

    /// The UTC date and timestamp when the resource was last updated.
    #[builder(default, setter(into))]
    updated_at: Option<Cow<'a, str>>,

    /// The IP address of the Virtual IP (VIP).
    #[builder(default, setter(into))]
    vip_address: Option<Cow<'a, str>>,

    /// The ID of the network for the Virtual IP (VIP).
    #[builder(default, setter(into))]
    vip_network_id: Option<Cow<'a, str>>,

    /// The ID of the Virtual IP (VIP) port.
    #[builder(default, setter(into))]
    vip_port_id: Option<Cow<'a, str>>,

    /// The ID of the QoS Policy which will apply to the Virtual IP (VIP).
    #[builder(default, setter(into))]
    vip_qos_policy_id: Option<Cow<'a, str>>,

    /// The ID of the subnet for the Virtual IP (VIP).
    #[builder(default, setter(into))]
    vip_subnet_id: Option<Cow<'a, str>>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl<'a> RequestBuilder<'a> {
    /// Add a single header to the Loadbalancer.
    pub fn header(&mut self, header_name: &'static str, header_value: &'static str) -> &mut Self
where {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name, HeaderValue::from_static(header_value));
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::GET
    }

    fn endpoint(&self) -> Cow<'static, str> {
        "lbaas/loadbalancers".to_string().into()
    }

    fn parameters(&self) -> QueryParams {
        let mut params = QueryParams::default();
        params.push_opt("availability_zone", self.availability_zone.as_ref());
        params.push_opt("created_at", self.created_at.as_ref());
        params.push_opt("description", self.description.as_ref());
        params.push_opt("flavor_id", self.flavor_id.as_ref());
        params.push_opt("id", self.id.as_ref());
        params.push_opt("limit", self.limit);
        params.push_opt("marker", self.marker.as_ref());
        params.push_opt("name", self.name.as_ref());
        params.push_opt("not-tags", self.not_tags.as_ref());
        params.push_opt("not-tags-any", self.not_tags_any.as_ref());
        params.push_opt("operating_status", self.operating_status.as_ref());
        params.push_opt("page_reverse", self.page_reverse);
        params.push_opt("project_id", self.project_id.as_ref());
        params.push_opt("provider", self.provider.as_ref());
        params.push_opt("provisioning_status", self.provisioning_status.as_ref());
        params.push_opt("tags", self.tags.as_ref());
        params.push_opt("tags-any", self.tags_any.as_ref());
        params.push_opt("updated_at", self.updated_at.as_ref());
        params.push_opt("vip_address", self.vip_address.as_ref());
        params.push_opt("vip_network_id", self.vip_network_id.as_ref());
        params.push_opt("vip_port_id", self.vip_port_id.as_ref());
        params.push_opt("vip_qos_policy_id", self.vip_qos_policy_id.as_ref());
        params.push_opt("vip_subnet_id", self.vip_subnet_id.as_ref());

        params
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::LoadBalancer
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        Some("loadbalancers".into())
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(2, 0))
    }
}
impl Pageable for Request<'_> {}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::Query;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;
    use serde_json::json;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder().build().unwrap().service_type(),
            ServiceType::LoadBalancer
        );
    }

    #[test]
    fn test_response_key() {
        assert_eq!(
            Request::builder().build().unwrap().response_key().unwrap(),
            "loadbalancers"
        );
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::GET)
                .path("/lbaas/loadbalancers".to_string());

            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "loadbalancers": {} }));
        });

        let endpoint = Request::builder().build().unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::GET)
                .path("/lbaas/loadbalancers".to_string())
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "loadbalancers": {} }));
        });

        let endpoint = Request::builder()
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header("not_foo", "not_bar")
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }
}

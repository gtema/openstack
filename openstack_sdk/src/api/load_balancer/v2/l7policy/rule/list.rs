// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Lists all L7 rules for the project.
//!
//! Use the `fields` query parameter to control which fields are returned in
//! the response body. Additionally, you can filter results by using query
//! string parameters. For information, see
//! [Filtering and column selection](#filtering).
//!
//! Administrative users can specify a project ID that is different than their
//! own to list L7 policies for other projects.
//!
//! The list might be empty.
//!
use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use std::borrow::Cow;

use crate::api::Pageable;
#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    #[builder(default, setter(into))]
    _type: Option<Cow<'a, str>>,

    #[builder(default)]
    admin_state_up: Option<bool>,

    #[builder(default, setter(into))]
    compare_type: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    created_at: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    invert: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    key: Option<Cow<'a, str>>,

    /// l7policy_id parameter for
    /// /v2/lbaas/l7policies/{l7policy_id}/rules/{rule_id} API
    #[builder(default, setter(into))]
    l7policy_id: Cow<'a, str>,

    /// Page size
    #[builder(default)]
    limit: Option<i32>,

    /// ID of the last item in the previous list
    #[builder(default, setter(into))]
    marker: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    operating_status: Option<Cow<'a, str>>,

    /// The page direction.
    #[builder(default)]
    page_reverse: Option<bool>,

    #[builder(default, setter(into))]
    project_id: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    provisioning_status: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    rule_value: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    updated_at: Option<Cow<'a, str>>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl RequestBuilder<'_> {
    /// Add a single header to the Rule.
    pub fn header(&mut self, header_name: &'static str, header_value: &'static str) -> &mut Self
where {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name, HeaderValue::from_static(header_value));
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::GET
    }

    fn endpoint(&self) -> Cow<'static, str> {
        format!(
            "lbaas/l7policies/{l7policy_id}/rules",
            l7policy_id = self.l7policy_id.as_ref(),
        )
        .into()
    }

    fn parameters(&self) -> QueryParams {
        let mut params = QueryParams::default();
        params.push_opt("admin_state_up", self.admin_state_up);
        params.push_opt("compare_type", self.compare_type.as_ref());
        params.push_opt("created_at", self.created_at.as_ref());
        params.push_opt("invert", self.invert.as_ref());
        params.push_opt("key", self.key.as_ref());
        params.push_opt("limit", self.limit);
        params.push_opt("marker", self.marker.as_ref());
        params.push_opt("operating_status", self.operating_status.as_ref());
        params.push_opt("page_reverse", self.page_reverse);
        params.push_opt("project_id", self.project_id.as_ref());
        params.push_opt("provisioning_status", self.provisioning_status.as_ref());
        params.push_opt("rule_value", self.rule_value.as_ref());
        params.push_opt("type", self._type.as_ref());
        params.push_opt("updated_at", self.updated_at.as_ref());

        params
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::LoadBalancer
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        Some("rules".into())
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(2, 0))
    }
}
impl Pageable for Request<'_> {}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::Query;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;
    use serde_json::json;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder().build().unwrap().service_type(),
            ServiceType::LoadBalancer
        );
    }

    #[test]
    fn test_response_key() {
        assert_eq!(
            Request::builder().build().unwrap().response_key().unwrap(),
            "rules"
        );
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::GET).path(format!(
                "/lbaas/l7policies/{l7policy_id}/rules",
                l7policy_id = "l7policy_id",
            ));

            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "rules": {} }));
        });

        let endpoint = Request::builder()
            .l7policy_id("l7policy_id")
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::GET)
                .path(format!(
                    "/lbaas/l7policies/{l7policy_id}/rules",
                    l7policy_id = "l7policy_id",
                ))
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "rules": {} }));
        });

        let endpoint = Request::builder()
            .l7policy_id("l7policy_id")
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header("not_foo", "not_bar")
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }
}

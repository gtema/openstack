// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Lists a summary of all L3 metering label rules that belong to the project.
//!
//! The list shows the ID for each metering label rule.
//!
//! Standard query parameters are supported on the URI. For more information,
//! see [Filtering and Column Selection](#filtering).
//!
//! Use the `fields` query parameter to control which fields are returned in
//! the response body. For more information, see [Fields](#fields).
//!
//! Pagination query parameters are supported if Neutron configuration supports
//! it by overriding `allow_pagination=false`. For more information, see
//! [Pagination](#pagination).
//!
//! Sorting query parameters are supported if Neutron configuration supports it
//! with `allow_sorting=true`. For more information, see [Sorting](#sorting).
//!
//! Normal response codes: 200
//!
//! Error response codes: 401
//!
use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use std::borrow::Cow;

use crate::api::Pageable;
#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    /// The destination IP prefix that the metering rule is associated with; in
    /// this context, destination IP prefix represents the destination IP of
    /// the network packet. Therefore, for an ingress rule, the destination IP
    /// is the internal IP associated with some OpenStack VM. On the other
    /// hand, for an egress rule, the destination IP prefix is the IP of some
    /// external system that an application running inside some OpenStack
    /// virtual machine is trying to access. Moreover, instead of an IP, one
    /// can also use a CIDR as the destination IP prefix.
    #[builder(default, setter(into))]
    destination_ip_prefix: Option<Cow<'a, str>>,

    /// direction query parameter for /v2.0/metering/metering-label-rules API
    #[builder(default, setter(into))]
    direction: Option<Cow<'a, str>>,

    /// excluded query parameter for /v2.0/metering/metering-label-rules API
    #[builder(default)]
    excluded: Option<bool>,

    /// id query parameter for /v2.0/metering/metering-label-rules API
    #[builder(default, setter(into))]
    id: Option<Cow<'a, str>>,

    /// Requests a page size of items. Returns a number of items up to a limit
    /// value. Use the limit parameter to make an initial limited request and
    /// use the ID of the last-seen item from the response as the marker
    /// parameter value in a subsequent limited request.
    #[builder(default)]
    limit: Option<i32>,

    /// The ID of the last-seen item. Use the limit parameter to make an
    /// initial limited request and use the ID of the last-seen item from the
    /// response as the marker parameter value in a subsequent limited request.
    #[builder(default, setter(into))]
    marker: Option<Cow<'a, str>>,

    /// metering_label_id query parameter for
    /// /v2.0/metering/metering-label-rules API
    #[builder(default, setter(into))]
    metering_label_id: Option<Cow<'a, str>>,

    /// Reverse the page direction
    #[builder(default)]
    page_reverse: Option<bool>,

    /// remote_ip_prefix query parameter for
    /// /v2.0/metering/metering-label-rules API
    #[builder(default, setter(into))]
    remote_ip_prefix: Option<Cow<'a, str>>,

    /// Sort direction. This is an optional feature and may be silently ignored
    /// by the server.
    #[builder(default, private, setter(name = "_sort_dir"))]
    sort_dir: Option<Vec<Cow<'a, str>>>,

    /// Sort results by the attribute. This is an optional feature and may be
    /// silently ignored by the server.
    #[builder(default, private, setter(name = "_sort_key"))]
    sort_key: Option<Vec<Cow<'a, str>>>,

    /// The source IP prefix that the metering rule is associated with; in this
    /// context, source IP prefix represents the source IP of the network
    /// packet. Therefore, for an ingress rule, the source IP is the IP of the
    /// system accessing something inside OpenStack. On the other hand, for an
    /// egress rule, the source IP is the internal IP associated with some
    /// OpenStack VM. Moreover, instead of an IP, one can also use a CIDR as
    /// the source IP prefix.
    #[builder(default, setter(into))]
    source_ip_prefix: Option<Cow<'a, str>>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl<'a> RequestBuilder<'a> {
    /// Sort direction. This is an optional feature and may be silently ignored
    /// by the server.
    pub fn sort_dir<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<Cow<'a, str>>,
    {
        self.sort_dir
            .get_or_insert(None)
            .get_or_insert_with(Vec::new)
            .extend(iter.map(Into::into));
        self
    }

    /// Sort results by the attribute. This is an optional feature and may be
    /// silently ignored by the server.
    pub fn sort_key<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<Cow<'a, str>>,
    {
        self.sort_key
            .get_or_insert(None)
            .get_or_insert_with(Vec::new)
            .extend(iter.map(Into::into));
        self
    }

    /// Add a single header to the Metering_Label_Rule.
    pub fn header<K, V>(&mut self, header_name: K, header_value: V) -> &mut Self
    where
        K: Into<HeaderName>,
        V: Into<HeaderValue>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name.into(), header_value.into());
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::GET
    }

    fn endpoint(&self) -> Cow<'static, str> {
        "metering/metering-label-rules".to_string().into()
    }

    fn parameters(&self) -> QueryParams<'_> {
        let mut params = QueryParams::default();
        params.push_opt("limit", self.limit);
        params.push_opt("marker", self.marker.as_ref());
        params.push_opt("destination_ip_prefix", self.destination_ip_prefix.as_ref());
        params.push_opt("direction", self.direction.as_ref());
        params.push_opt("excluded", self.excluded);
        params.push_opt("id", self.id.as_ref());
        params.push_opt("metering_label_id", self.metering_label_id.as_ref());
        params.push_opt("remote_ip_prefix", self.remote_ip_prefix.as_ref());
        params.push_opt("source_ip_prefix", self.source_ip_prefix.as_ref());
        params.push_opt("page_reverse", self.page_reverse);
        if let Some(val) = &self.sort_dir {
            params.extend(val.iter().map(|value| ("sort_dir", value)));
        }
        if let Some(val) = &self.sort_key {
            params.extend(val.iter().map(|value| ("sort_key", value)));
        }

        params
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::Network
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        Some("metering_label_rules".into())
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(2, 0))
    }
}
impl Pageable for Request<'_> {}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::Query;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;
    use serde_json::json;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder().build().unwrap().service_type(),
            ServiceType::Network
        );
    }

    #[test]
    fn test_response_key() {
        assert_eq!(
            Request::builder().build().unwrap().response_key().unwrap(),
            "metering_label_rules"
        );
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::GET)
                .path("/metering/metering-label-rules".to_string());

            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "metering_label_rules": {} }));
        });

        let endpoint = Request::builder().build().unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::GET)
                .path("/metering/metering-label-rules".to_string())
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "metering_label_rules": {} }));
        });

        let endpoint = Request::builder()
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header(
                HeaderName::from_static("not_foo"),
                HeaderValue::from_static("not_bar"),
            )
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }
}

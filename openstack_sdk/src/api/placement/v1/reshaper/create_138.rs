// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Atomically migrate resource provider inventories and associated
//! allocations. This is used when some of the inventory needs to move from one
//! resource provider to another, such as when a class of inventory moves from
//! a parent provider to a new child provider.
//!
//! Normal Response Codes: 204
//!
//! Error Response Codes: badRequest(400), conflict(409)
//!
use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use serde::Deserialize;
use serde::Serialize;
use std::borrow::Cow;
use std::collections::BTreeMap;

#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct AllocationsItem<'a> {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) generation: Option<i32>,

    /// A dictionary of resource records keyed by resource class name.
    #[serde()]
    #[builder(private, setter(into, name = "_resources"))]
    pub(crate) resources: BTreeMap<Cow<'a, str>, i32>,
}

impl<'a> AllocationsItemBuilder<'a> {
    /// A dictionary of resource records keyed by resource class name.
    pub fn resources<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<i32>,
    {
        self.resources
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }
}

#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct AllocationsItemStruct<'a> {
    /// A dictionary of resource allocations keyed by resource provider uuid.
    /// If this is an empty object, allocations for this consumer will be
    /// removed.
    #[serde()]
    #[builder(private, setter(into, name = "_allocations"))]
    pub(crate) allocations: BTreeMap<Cow<'a, str>, AllocationsItem<'a>>,

    /// The generation of the consumer. Should be set to null when indicating
    /// that the caller expects the consumer does not yet exist.
    #[serde()]
    #[builder(setter(into))]
    pub(crate) consumer_generation: Option<i32>,

    /// A string that consists of numbers, A-Z, and _ describing what kind of
    /// consumer is creating, or has created, allocations using a quantity of
    /// inventory. The string is determined by the client when writing
    /// allocations and it is up to the client to ensure correct choices
    /// amongst collaborating services. For example, the compute service may
    /// choose to type some consumers ‘INSTANCE’ and others ‘MIGRATION’.
    #[serde()]
    #[builder(setter(into))]
    pub(crate) consumer_type: Cow<'a, str>,

    /// A dictionary associating request group suffixes with a list of uuids
    /// identifying the resource providers that satisfied each group. The empty
    /// string and [a-zA-Z0-9\_-]+ are valid suffixes. This field may be sent
    /// when writing allocations back to the server but will be ignored; this
    /// preserves symmetry between read and write representations.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, private, setter(into, name = "_mappings"))]
    pub(crate) mappings: Option<BTreeMap<Cow<'a, str>, Vec<Cow<'a, str>>>>,

    /// The uuid of a project.
    #[serde()]
    #[builder(setter(into))]
    pub(crate) project_id: Cow<'a, str>,

    /// The uuid of a user.
    #[serde()]
    #[builder(setter(into))]
    pub(crate) user_id: Cow<'a, str>,
}

impl<'a> AllocationsItemStructBuilder<'a> {
    /// A dictionary of resource allocations keyed by resource provider uuid.
    /// If this is an empty object, allocations for this consumer will be
    /// removed.
    pub fn allocations<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<AllocationsItem<'a>>,
    {
        self.allocations
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    /// A dictionary associating request group suffixes with a list of uuids
    /// identifying the resource providers that satisfied each group. The empty
    /// string and [a-zA-Z0-9\_-]+ are valid suffixes. This field may be sent
    /// when writing allocations back to the server but will be ignored; this
    /// preserves symmetry between read and write representations.
    pub fn mappings<I, K, V, V1>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: IntoIterator<Item = V1>,
        V1: Into<Cow<'a, str>>,
    {
        self.mappings
            .get_or_insert(None)
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into_iter().map(Into::into).collect())));
        self
    }
}

#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct InventoriesItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) allocation_ratio: Option<f32>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) max_unit: Option<i32>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) min_unit: Option<i32>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) reserved: Option<u32>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) resource_provider_generation: Option<i32>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) step_size: Option<i32>,

    #[serde()]
    #[builder(setter(into))]
    pub(crate) total: i32,
}

#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct InventoriesItemStruct<'a> {
    /// A dictionary of inventories keyed by resource classes.
    #[serde()]
    #[builder(private, setter(into, name = "_inventories"))]
    pub(crate) inventories: BTreeMap<Cow<'a, str>, InventoriesItem>,

    /// A consistent view marker that assists with the management of concurrent
    /// resource provider updates.
    #[serde()]
    #[builder(setter(into))]
    pub(crate) resource_provider_generation: i32,
}

impl<'a> InventoriesItemStructBuilder<'a> {
    /// A dictionary of inventories keyed by resource classes.
    pub fn inventories<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<InventoriesItem>,
    {
        self.inventories
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }
}

#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    /// A dictionary of multiple allocations, keyed by consumer uuid. Each
    /// collection of allocations describes the full set of allocations for
    /// each consumer. Each consumer allocations dict is itself a dictionary of
    /// resource allocations keyed by resource provider uuid. An empty
    /// dictionary indicates no change in existing allocations, whereas an
    /// empty `allocations` dictionary **within** a consumer dictionary
    /// indicates that all allocations for that consumer should be deleted.
    #[builder(private, setter(into, name = "_allocations"))]
    pub(crate) allocations: BTreeMap<Cow<'a, str>, AllocationsItemStruct<'a>>,

    /// A dictionary of multiple inventories, keyed by resource provider uuid.
    /// Each inventory describes the desired full inventory for each resource
    /// provider. An empty dictionary causes the inventory for that provider to
    /// be deleted.
    #[builder(private, setter(into, name = "_inventories"))]
    pub(crate) inventories: BTreeMap<Cow<'a, str>, InventoriesItemStruct<'a>>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl<'a> RequestBuilder<'a> {
    /// A dictionary of multiple allocations, keyed by consumer uuid. Each
    /// collection of allocations describes the full set of allocations for
    /// each consumer. Each consumer allocations dict is itself a dictionary of
    /// resource allocations keyed by resource provider uuid. An empty
    /// dictionary indicates no change in existing allocations, whereas an
    /// empty `allocations` dictionary **within** a consumer dictionary
    /// indicates that all allocations for that consumer should be deleted.
    pub fn allocations<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<AllocationsItemStruct<'a>>,
    {
        self.allocations
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    /// A dictionary of multiple inventories, keyed by resource provider uuid.
    /// Each inventory describes the desired full inventory for each resource
    /// provider. An empty dictionary causes the inventory for that provider to
    /// be deleted.
    pub fn inventories<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<InventoriesItemStruct<'a>>,
    {
        self.inventories
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    /// Add a single header to the Reshaper.
    pub fn header<K, V>(&mut self, header_name: K, header_value: V) -> &mut Self
    where
        K: Into<HeaderName>,
        V: Into<HeaderValue>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name.into(), header_value.into());
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::POST
    }

    fn endpoint(&self) -> Cow<'static, str> {
        "reshaper".to_string().into()
    }

    fn parameters(&self) -> QueryParams<'_> {
        QueryParams::default()
    }

    fn body(&self) -> Result<Option<(&'static str, Vec<u8>)>, BodyError> {
        let mut params = JsonBodyParams::default();

        params.push("allocations", serde_json::to_value(&self.allocations)?);
        params.push("inventories", serde_json::to_value(&self.inventories)?);

        params.into_body()
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::Placement
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        None
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(1, 38))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::Query;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;
    use serde_json::json;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder()
                .allocations(BTreeMap::<String, AllocationsItemStruct<'_>>::new().into_iter())
                .inventories(BTreeMap::<String, InventoriesItemStruct<'_>>::new().into_iter())
                .build()
                .unwrap()
                .service_type(),
            ServiceType::Placement
        );
    }

    #[test]
    fn test_response_key() {
        assert!(Request::builder()
            .allocations(BTreeMap::<String, AllocationsItemStruct<'_>>::new().into_iter())
            .inventories(BTreeMap::<String, InventoriesItemStruct<'_>>::new().into_iter())
            .build()
            .unwrap()
            .response_key()
            .is_none())
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST)
                .path("/reshaper".to_string());

            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "dummy": {} }));
        });

        let endpoint = Request::builder()
            .allocations(BTreeMap::<String, AllocationsItemStruct<'_>>::new().into_iter())
            .inventories(BTreeMap::<String, InventoriesItemStruct<'_>>::new().into_iter())
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST)
                .path("/reshaper".to_string())
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "dummy": {} }));
        });

        let endpoint = Request::builder()
            .allocations(BTreeMap::<String, AllocationsItemStruct<'_>>::new().into_iter())
            .inventories(BTreeMap::<String, InventoriesItemStruct<'_>>::new().into_iter())
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header(
                HeaderName::from_static("not_foo"),
                HeaderValue::from_static("not_bar"),
            )
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }
}

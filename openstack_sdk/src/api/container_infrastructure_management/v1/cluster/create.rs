// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Create new cluster based on cluster template.
//!
use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use serde::Deserialize;
use serde::Serialize;
use std::borrow::Cow;
use std::collections::BTreeMap;

/// A link representation.
///
#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct Links<'a> {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) created_at: Option<Cow<'a, str>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) href: Option<Cow<'a, str>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) rel: Option<Cow<'a, str>>,

    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) _type: Option<Cow<'a, str>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) updated_at: Option<Cow<'a, str>>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Status {
    #[serde(rename = "ADOPT_COMPLETE")]
    AdoptComplete,
    #[serde(rename = "CHECK_COMPLETE")]
    CheckComplete,
    #[serde(rename = "CREATE_COMPLETE")]
    CreateComplete,
    #[serde(rename = "CREATE_FAILED")]
    CreateFailed,
    #[serde(rename = "CREATE_IN_PROGRESS")]
    CreateInProgress,
    #[serde(rename = "DELETE_COMPLETE")]
    DeleteComplete,
    #[serde(rename = "DELETE_FAILED")]
    DeleteFailed,
    #[serde(rename = "DELETE_IN_PROGRESS")]
    DeleteInProgress,
    #[serde(rename = "RESTORE_COMPLETE")]
    RestoreComplete,
    #[serde(rename = "RESUME_COMPLETE")]
    ResumeComplete,
    #[serde(rename = "RESUME_FAILED")]
    ResumeFailed,
    #[serde(rename = "ROLLBACK_COMPLETE")]
    RollbackComplete,
    #[serde(rename = "ROLLBACK_FAILED")]
    RollbackFailed,
    #[serde(rename = "ROLLBACK_IN_PROGRESS")]
    RollbackInProgress,
    #[serde(rename = "SNAPSHOT_COMPLETE")]
    SnapshotComplete,
    #[serde(rename = "UPDATE_COMPLETE")]
    UpdateComplete,
    #[serde(rename = "UPDATE_FAILED")]
    UpdateFailed,
    #[serde(rename = "UPDATE_IN_PROGRESS")]
    UpdateInProgress,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum HealthStatus {
    #[serde(rename = "HEALTHY")]
    Healthy,
    #[serde(rename = "UNHEALTHY")]
    Unhealthy,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    #[builder(default, setter(into))]
    pub(crate) api_address: Option<Cow<'a, str>>,

    /// The UUID of the cluster template.
    ///
    #[builder(setter(into))]
    pub(crate) cluster_template_id: Cow<'a, str>,

    #[builder(default, setter(into))]
    pub(crate) coe_version: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    pub(crate) container_version: Option<Cow<'a, str>>,

    /// The timeout for cluster creation in minutes. The value expected is a
    /// positive integer and the default is 60 minutes. If the timeout is
    /// reached during cluster creation process, the operation will be aborted
    /// and the cluster status will be set to `CREATE_FAILED`.
    ///
    #[builder(default)]
    pub(crate) create_timeout: Option<i32>,

    #[builder(default, setter(into))]
    pub(crate) created_at: Option<Cow<'a, str>>,

    /// The custom discovery url for node discovery. This is used by the COE to
    /// discover the servers that have been created to host the containers. The
    /// actual discovery mechanism varies with the COE. In some cases, Magnum
    /// fills in the server info in the discovery service. In other cases, if
    /// the `discovery_url` is not specified, Magnum will use the public
    /// discovery service at:
    ///
    /// ```text
    /// https://discovery.etcd.io
    ///
    /// ```
    ///
    /// In this case, Magnum will generate a unique url here for each uster and
    /// store the info for the servers.
    ///
    #[builder(default, setter(into))]
    pub(crate) discovery_url: Option<Cow<'a, str>>,

    #[builder(default)]
    pub(crate) docker_volume_size: Option<i32>,

    #[builder(default, private, setter(name = "_faults"))]
    pub(crate) faults: Option<BTreeMap<Cow<'a, str>, Cow<'a, str>>>,

    /// The name or network ID of a Neutron network to provide connectivity to
    /// the internal network for the cluster.
    ///
    #[builder(default, setter(into))]
    pub(crate) fixed_network: Option<Cow<'a, str>>,

    /// Fixed subnet that are using to allocate network address for nodes in
    /// cluster.
    ///
    #[builder(default, setter(into))]
    pub(crate) fixed_subnet: Option<Cow<'a, str>>,

    /// The nova flavor ID or name for booting the node servers. The default is
    /// `m1.small`.
    ///
    #[builder(default, setter(into))]
    pub(crate) flavor_id: Option<Cow<'a, str>>,

    /// Whether enable or not using the floating IP of cloud provider. Some
    /// cloud providers used floating IP, some used public IP, thus Magnum
    /// provide this option for specifying the choice of using floating IP. If
    /// itâ€™s not set, the value of floating_ip_enabled in template will be
    /// used.
    ///
    #[builder(default, setter(into))]
    pub(crate) floating_ip_enabled: Option<Cow<'a, str>>,

    #[builder(default)]
    pub(crate) health_status: Option<HealthStatus>,

    #[builder(default, private, setter(name = "_health_status_reason"))]
    pub(crate) health_status_reason: Option<BTreeMap<Cow<'a, str>, Cow<'a, str>>>,

    /// The name of the SSH keypair to configure in the cluster servers for ssh
    /// access. Users will need the key to be able to ssh to the servers in the
    /// cluster. The login name is specific to the cluster driver, for example
    /// with fedora-atomic image, default login name is `fedora`.
    ///
    #[builder(default, setter(into))]
    pub(crate) keypair: Option<Cow<'a, str>>,

    /// Arbitrary labels in the form of `key=value` pairs. The accepted keys
    /// and valid values are defined in the cluster drivers. They are used as a
    /// way to pass additional parameters that are specific to a cluster
    /// driver.
    ///
    #[builder(default, private, setter(name = "_labels"))]
    pub(crate) labels: Option<BTreeMap<Cow<'a, str>, Cow<'a, str>>>,

    #[builder(default, private, setter(name = "_labels_added"))]
    pub(crate) labels_added: Option<BTreeMap<Cow<'a, str>, Cow<'a, str>>>,

    #[builder(default, private, setter(name = "_labels_overridden"))]
    pub(crate) labels_overridden: Option<BTreeMap<Cow<'a, str>, Cow<'a, str>>>,

    #[builder(default, private, setter(name = "_labels_skipped"))]
    pub(crate) labels_skipped: Option<BTreeMap<Cow<'a, str>, Cow<'a, str>>>,

    #[builder(default, setter(into))]
    pub(crate) links: Option<Vec<Links<'a>>>,

    #[builder(default, setter(into))]
    pub(crate) master_addresses: Option<Vec<Cow<'a, str>>>,

    /// The number of servers that will serve as master for the cluster. The
    /// default is 1. Set to more than 1 master to enable High Availability. If
    /// the option `master-lb-enabled` is specified in the cluster template,
    /// the master servers will be placed in a load balancer pool.
    ///
    #[builder(default)]
    pub(crate) master_count: Option<i32>,

    /// The flavor of the master node for this cluster template.
    ///
    #[builder(default, setter(into))]
    pub(crate) master_flavor_id: Option<Cow<'a, str>>,

    /// Since multiple masters may exist in a cluster, a Neutron load balancer
    /// is created to provide the API endpoint for the cluster and to direct
    /// requests to the masters. In some cases, such as when the LBaaS service
    /// is not available, this option can be set to `false` to create a cluster
    /// without the load balancer. In this case, one of the masters will serve
    /// as the API endpoint. The default is `true`, i.e. to create the load
    /// balancer for the cluster.
    ///
    #[builder(default, setter(into))]
    pub(crate) master_lb_enabled: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    pub(crate) merge_labels: Option<Cow<'a, str>>,

    /// Name of the resource.
    ///
    #[builder(default, setter(into))]
    pub(crate) name: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    pub(crate) node_addresses: Option<Vec<Cow<'a, str>>>,

    /// The number of servers that will serve as node in the cluster. The
    /// default is 1.
    ///
    #[builder(default)]
    pub(crate) node_count: Option<i32>,

    #[builder(default, setter(into))]
    pub(crate) project_id: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    pub(crate) stack_id: Option<Cow<'a, str>>,

    #[builder(default)]
    pub(crate) status: Option<Status>,

    #[builder(default, setter(into))]
    pub(crate) status_reason: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    pub(crate) updated_at: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    pub(crate) user_id: Option<Cow<'a, str>>,

    #[builder(default, setter(into))]
    pub(crate) uuid: Option<Cow<'a, str>>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl<'a> RequestBuilder<'a> {
    /// Arbitrary labels in the form of `key=value` pairs. The accepted keys
    /// and valid values are defined in the cluster drivers. They are used as a
    /// way to pass additional parameters that are specific to a cluster
    /// driver.
    ///
    pub fn labels<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<Cow<'a, str>>,
    {
        self.labels
            .get_or_insert(None)
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    pub fn health_status_reason<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<Cow<'a, str>>,
    {
        self.health_status_reason
            .get_or_insert(None)
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    pub fn faults<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<Cow<'a, str>>,
    {
        self.faults
            .get_or_insert(None)
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    pub fn labels_overridden<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<Cow<'a, str>>,
    {
        self.labels_overridden
            .get_or_insert(None)
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    pub fn labels_added<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<Cow<'a, str>>,
    {
        self.labels_added
            .get_or_insert(None)
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    pub fn labels_skipped<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<Cow<'a, str>>,
    {
        self.labels_skipped
            .get_or_insert(None)
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    /// Add a single header to the Cluster.
    pub fn header(&mut self, header_name: &'static str, header_value: &'static str) -> &mut Self
where {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name, HeaderValue::from_static(header_value));
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::POST
    }

    fn endpoint(&self) -> Cow<'static, str> {
        "clusters".to_string().into()
    }

    fn parameters(&self) -> QueryParams {
        QueryParams::default()
    }

    fn body(&self) -> Result<Option<(&'static str, Vec<u8>)>, BodyError> {
        let mut params = JsonBodyParams::default();

        if let Some(val) = &self.uuid {
            params.push("uuid", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.name {
            params.push("name", serde_json::to_value(val)?);
        }
        params.push(
            "cluster_template_id",
            serde_json::to_value(&self.cluster_template_id)?,
        );
        if let Some(val) = &self.keypair {
            params.push("keypair", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.node_count {
            params.push("node_count", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.master_count {
            params.push("master_count", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.docker_volume_size {
            params.push("docker_volume_size", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.labels {
            params.push("labels", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.master_flavor_id {
            params.push("master_flavor_id", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.flavor_id {
            params.push("flavor_id", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.create_timeout {
            params.push("create_timeout", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.links {
            params.push("links", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.stack_id {
            params.push("stack_id", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.status {
            params.push("status", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.status_reason {
            params.push("status_reason", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.health_status {
            params.push("health_status", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.health_status_reason {
            params.push("health_status_reason", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.discovery_url {
            params.push("discovery_url", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.api_address {
            params.push("api_address", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.coe_version {
            params.push("coe_version", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.container_version {
            params.push("container_version", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.project_id {
            params.push("project_id", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.user_id {
            params.push("user_id", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.node_addresses {
            params.push("node_addresses", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.master_addresses {
            params.push("master_addresses", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.faults {
            params.push("faults", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.fixed_network {
            params.push("fixed_network", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.fixed_subnet {
            params.push("fixed_subnet", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.floating_ip_enabled {
            params.push("floating_ip_enabled", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.merge_labels {
            params.push("merge_labels", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.labels_overridden {
            params.push("labels_overridden", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.labels_added {
            params.push("labels_added", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.labels_skipped {
            params.push("labels_skipped", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.master_lb_enabled {
            params.push("master_lb_enabled", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.created_at {
            params.push("created_at", serde_json::to_value(val)?);
        }
        if let Some(val) = &self.updated_at {
            params.push("updated_at", serde_json::to_value(val)?);
        }

        params.into_body()
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::ContainerInfrastructureManagement
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        None
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(1, 0))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::Query;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;
    use serde_json::json;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder()
                .cluster_template_id("foo")
                .build()
                .unwrap()
                .service_type(),
            ServiceType::ContainerInfrastructureManagement
        );
    }

    #[test]
    fn test_response_key() {
        assert!(Request::builder()
            .cluster_template_id("foo")
            .build()
            .unwrap()
            .response_key()
            .is_none())
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST)
                .path("/clusters".to_string());

            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "dummy": {} }));
        });

        let endpoint = Request::builder()
            .cluster_template_id("foo")
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST)
                .path("/clusters".to_string())
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "dummy": {} }));
        });

        let endpoint = Request::builder()
            .cluster_template_id("foo")
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header("not_foo", "not_bar")
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }
}

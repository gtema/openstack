// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Instruct Cinder to manage a storage object.
//!
//! Manages an existing backend storage object (e.g. a Linux logical volume or
//! a SAN disk) by creating the Cinder objects required to manage it, and
//! possibly renaming the backend storage object (driver dependent)
//!
//! From an API perspective, this operation behaves very much like a volume
//! creation operation, except that properties such as image, snapshot and
//! volume references don't make sense, because we are taking an existing
//! storage object into Cinder management.
//!
//! Required HTTP Body:
//!
//! ```text
//! {
//!   "volume": {
//!     "host": "<Cinder host on which the existing storage resides>",
//!     "cluster": "<Cinder cluster on which the storage resides>",
//!     "ref": "<Driver-specific reference to existing storage object>"
//!   }
//! }
//! ```
//!
//! See the appropriate Cinder drivers' implementations of the manage_volume
//! method to find out the accepted format of 'ref'.
//!
//! This API call will return with an error if any of the above elements are
//! missing from the request, or if the 'host' element refers to a cinder host
//! that is not registered.
//!
//! The volume will later enter the error state if it is discovered that 'ref'
//! is bad.
//!
//! Optional elements to 'volume' are:
//!
//! ```text
//! name               A name for the new volume.
//! description        A description for the new volume.
//! volume_type        ID or name of a volume type to associate with
//!                    the new Cinder volume. Does not necessarily
//!                    guarantee that the managed volume will have the
//!                    properties described in the volume_type. The
//!                    driver may choose to fail if it identifies that
//!                    the specified volume_type is not compatible with
//!                    the backend storage object.
//! metadata           Key/value pairs to be associated with the new
//!                    volume.
//! availability_zone  The availability zone to associate with the new
//!                    volume.
//! bootable           If set to True, marks the volume as bootable.
//! ```
//!
use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use serde::Deserialize;
use serde::Serialize;
use serde_json::Value;
use std::borrow::Cow;
use std::collections::BTreeMap;

/// A `volume` object.
#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct Volume<'a> {
    /// The volume name.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) availability_zone: Option<Option<Cow<'a, str>>>,

    /// Enables or disables the bootable attribute. You can boot an instance
    /// from a bootable volume. See
    /// [valid boolean values](#valid-boolean-values)
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) bootable: Option<bool>,

    /// The volume description.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) description: Option<Option<Cow<'a, str>>>,

    /// The OpenStack Block Storage host where the existing resource resides.
    /// Optional only if cluster field is provided.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) host: Option<Option<Cow<'a, str>>>,

    /// One or more metadata key and value pairs to be associated with the new
    /// volume.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, private, setter(into, name = "_metadata"))]
    pub(crate) metadata: Option<Option<BTreeMap<Cow<'a, str>, Cow<'a, str>>>>,

    /// The volume name.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) name: Option<Option<Cow<'a, str>>>,

    /// A reference to the existing volume. The internal structure of this
    /// reference depends on the volume driver implementation. For details
    /// about the required elements in the structure, see the documentation for
    /// the volume driver.
    #[serde(rename = "ref")]
    #[builder(setter(into))]
    pub(crate) _ref: Value,

    /// The volume name.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) volume_type: Option<Option<Cow<'a, str>>>,
}

impl<'a> VolumeBuilder<'a> {
    /// One or more metadata key and value pairs to be associated with the new
    /// volume.
    pub fn metadata<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<Cow<'a, str>>,
    {
        self.metadata
            .get_or_insert(None)
            .get_or_insert(None)
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }
}

#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    /// A `volume` object.
    #[builder(setter(into))]
    pub(crate) volume: Volume<'a>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl<'a> RequestBuilder<'a> {
    /// Add a single header to the Manageable_Volume.
    pub fn header<K, V>(&mut self, header_name: K, header_value: V) -> &mut Self
    where
        K: Into<HeaderName>,
        V: Into<HeaderValue>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name.into(), header_value.into());
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::POST
    }

    fn endpoint(&self) -> Cow<'static, str> {
        "manageable_volumes".to_string().into()
    }

    fn parameters(&self) -> QueryParams<'_> {
        QueryParams::default()
    }

    fn body(&self) -> Result<Option<(&'static str, Vec<u8>)>, BodyError> {
        let mut params = JsonBodyParams::default();

        params.push("volume", serde_json::to_value(&self.volume)?);

        params.into_body()
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::BlockStorage
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        None
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(3, 0))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::Query;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;
    use serde_json::json;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder()
                .volume(VolumeBuilder::default()._ref(json!({})).build().unwrap())
                .build()
                .unwrap()
                .service_type(),
            ServiceType::BlockStorage
        );
    }

    #[test]
    fn test_response_key() {
        assert!(Request::builder()
            .volume(VolumeBuilder::default()._ref(json!({})).build().unwrap())
            .build()
            .unwrap()
            .response_key()
            .is_none())
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST)
                .path("/manageable_volumes".to_string());

            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "dummy": {} }));
        });

        let endpoint = Request::builder()
            .volume(VolumeBuilder::default()._ref(json!({})).build().unwrap())
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST)
                .path("/manageable_volumes".to_string())
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "dummy": {} }));
        });

        let endpoint = Request::builder()
            .volume(VolumeBuilder::default()._ref(json!({})).build().unwrap())
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header(
                HeaderName::from_static("not_foo"),
                HeaderValue::from_static("not_bar"),
            )
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }
}

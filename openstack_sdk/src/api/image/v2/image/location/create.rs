// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! Add location to an image which is in `queued` state. Accepts location url,
//! validation_data in JSON body.
//!
//! Adding a location to an image is only allowed for the owner or a user with
//! the service role. If these conditions are not met, a 403 (Forbidden) will
//! be returned.
//!
//! Attempting to add a location path to an image that is not in `queued` state
//! will result in a 409 (Conflict) response code
//!
//! Attempting to provide incorrect hash value in validation data(in the case
//! of http store) to the image will result in a 400 (Bad Request) response
//! code.
//!
//! Normal response codes: 200
//!
//! Error response codes: 400, 403, 404, 409
//!
use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use serde::Deserialize;
use serde::Serialize;
use serde_json::Value;
use std::borrow::Cow;
use std::collections::BTreeMap;

/// An image metadata in key:value pairs containing values of `os_hash_value`
/// and `os_hash_algo` to be added to the image. If `do_secure_hash` is not
/// passed then it is the responsibility of the consumer of location add API to
/// provide the correct values in `validation_data`’
#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct ValidationData<'a> {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) checksum: Option<Cow<'a, str>>,

    #[serde()]
    #[builder(setter(into))]
    pub(crate) os_hash_algo: Cow<'a, str>,

    #[serde()]
    #[builder(setter(into))]
    pub(crate) os_hash_value: Cow<'a, str>,
}

#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    #[builder(private, setter(into, name = "_metadata"))]
    pub(crate) metadata: BTreeMap<Cow<'a, str>, Value>,

    /// The URL of the new location to be added in the image.
    #[builder(setter(into))]
    pub(crate) url: Cow<'a, str>,

    /// An image metadata in key:value pairs containing values of
    /// `os_hash_value` and `os_hash_algo` to be added to the image. If
    /// `do_secure_hash` is not passed then it is the responsibility of the
    /// consumer of location add API to provide the correct values in
    /// `validation_data`’
    #[builder(default, setter(into))]
    pub(crate) validation_data: Option<ValidationData<'a>>,

    /// image_id parameter for /v2/images/{image_id}/locations API
    #[builder(default, setter(into))]
    image_id: Cow<'a, str>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl<'a> RequestBuilder<'a> {
    pub fn metadata<I, K, V>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = (K, V)>,
        K: Into<Cow<'a, str>>,
        V: Into<Value>,
    {
        self.metadata
            .get_or_insert_with(BTreeMap::new)
            .extend(iter.map(|(k, v)| (k.into(), v.into())));
        self
    }

    /// Add a single header to the Location.
    pub fn header(&mut self, header_name: &'static str, header_value: &'static str) -> &mut Self
where {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name, HeaderValue::from_static(header_value));
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::POST
    }

    fn endpoint(&self) -> Cow<'static, str> {
        format!(
            "images/{image_id}/locations",
            image_id = self.image_id.as_ref(),
        )
        .into()
    }

    fn parameters(&self) -> QueryParams {
        QueryParams::default()
    }

    fn body(&self) -> Result<Option<(&'static str, Vec<u8>)>, BodyError> {
        let mut params = JsonBodyParams::default();

        params.push("metadata", serde_json::to_value(&self.metadata)?);
        params.push("url", serde_json::to_value(&self.url)?);
        if let Some(val) = &self.validation_data {
            params.push("validation_data", serde_json::to_value(val)?);
        }

        params.into_body()
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::Image
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        None
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(2, 0))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::Query;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;
    use serde_json::json;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder()
                .metadata(BTreeMap::<String, Value>::new().into_iter())
                .url("foo")
                .build()
                .unwrap()
                .service_type(),
            ServiceType::Image
        );
    }

    #[test]
    fn test_response_key() {
        assert!(Request::builder()
            .metadata(BTreeMap::<String, Value>::new().into_iter())
            .url("foo")
            .build()
            .unwrap()
            .response_key()
            .is_none())
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST).path(format!(
                "/images/{image_id}/locations",
                image_id = "image_id",
            ));

            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "dummy": {} }));
        });

        let endpoint = Request::builder()
            .image_id("image_id")
            .metadata(BTreeMap::<String, Value>::new().into_iter())
            .url("foo")
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST)
                .path(format!(
                    "/images/{image_id}/locations",
                    image_id = "image_id",
                ))
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "dummy": {} }));
        });

        let endpoint = Request::builder()
            .image_id("image_id")
            .metadata(BTreeMap::<String, Value>::new().into_iter())
            .url("foo")
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header("not_foo", "not_bar")
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }
}

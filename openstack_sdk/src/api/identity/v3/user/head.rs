// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

//! List users.
//!
//! GET/HEAD /v3/users
//!
use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use std::borrow::Cow;

use crate::api::Pageable;
#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    /// The ID of the domain.
    #[builder(default, setter(into))]
    domain_id: Option<Cow<'a, str>>,

    /// Whether the identity provider is enabled or not
    #[builder(default)]
    enabled: Option<bool>,

    /// Filters the response by an identity provider ID.
    #[builder(default, setter(into))]
    idp_id: Option<Cow<'a, str>>,

    #[builder(default)]
    limit: Option<u32>,

    /// ID of the last fetched entry
    #[builder(default, setter(into))]
    marker: Option<Cow<'a, str>>,

    /// The resource name.
    #[builder(default, setter(into))]
    name: Option<Cow<'a, str>>,

    /// Filter results based on which user passwords have expired. The query
    /// should include an operator and a timestamp with a colon (:) separating
    /// the two, for example: `password_expires_at={operator}:{timestamp}`
    /// Valid operators are: lt, lte, gt, gte, eq, and neq
    ///
    /// - lt: expiration time lower than the timestamp
    /// - lte: expiration time lower than or equal to the timestamp
    /// - gt: expiration time higher than the timestamp
    /// - gte: expiration time higher than or equal to the timestamp
    /// - eq: expiration time equal to the timestamp
    /// - neq: expiration time not equal to the timestamp
    ///
    /// Valid timestamps are of the form: `YYYY-MM-DDTHH:mm:ssZ`.For
    /// example:`/v3/users?password_expires_at=lt:2016-12-08T22:02:00Z` The
    /// example would return a list of users whose password expired before the
    /// timestamp `(2016-12-08T22:02:00Z).`
    #[builder(default, setter(into))]
    password_expires_at: Option<Cow<'a, str>>,

    /// Filters the response by a protocol ID.
    #[builder(default, setter(into))]
    protocol_id: Option<Cow<'a, str>>,

    /// Sort direction. A valid value is asc (ascending) or desc (descending).
    #[builder(default, setter(into))]
    sort_dir: Option<Cow<'a, str>>,

    /// Sorts resources by attribute.
    #[builder(default, setter(into))]
    sort_key: Option<Cow<'a, str>>,

    /// Filters the response by a unique ID.
    #[builder(default, setter(into))]
    unique_id: Option<Cow<'a, str>>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl<'a> RequestBuilder<'a> {
    /// Add a single header to the User.
    pub fn header<K, V>(&mut self, header_name: K, header_value: V) -> &mut Self
    where
        K: Into<HeaderName>,
        V: Into<HeaderValue>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name.into(), header_value.into());
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::HEAD
    }

    fn endpoint(&self) -> Cow<'static, str> {
        "users".to_string().into()
    }

    fn parameters(&self) -> QueryParams<'_> {
        let mut params = QueryParams::default();
        params.push_opt("domain_id", self.domain_id.as_ref());
        params.push_opt("enabled", self.enabled);
        params.push_opt("idp_id", self.idp_id.as_ref());
        params.push_opt("limit", self.limit);
        params.push_opt("marker", self.marker.as_ref());
        params.push_opt("name", self.name.as_ref());
        params.push_opt("password_expires_at", self.password_expires_at.as_ref());
        params.push_opt("protocol_id", self.protocol_id.as_ref());
        params.push_opt("sort_dir", self.sort_dir.as_ref());
        params.push_opt("sort_key", self.sort_key.as_ref());
        params.push_opt("unique_id", self.unique_id.as_ref());

        params
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::Identity
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        None
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(3, 0))
    }
}
impl Pageable for Request<'_> {}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::RawQuery;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder().build().unwrap().service_type(),
            ServiceType::Identity
        );
    }

    #[test]
    fn test_response_key() {
        assert!(Request::builder().build().unwrap().response_key().is_none())
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::HEAD)
                .path("/users".to_string());

            then.status(200).header("content-type", "application/json");
        });

        let endpoint = Request::builder().build().unwrap();
        let _ = endpoint.raw_query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::HEAD)
                .path("/users".to_string())
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200).header("content-type", "application/json");
        });

        let endpoint = Request::builder()
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header(
                HeaderName::from_static("not_foo"),
                HeaderValue::from_static("not_bar"),
            )
            .build()
            .unwrap();
        let _ = endpoint.raw_query(&client).unwrap();
        mock.assert();
    }
}

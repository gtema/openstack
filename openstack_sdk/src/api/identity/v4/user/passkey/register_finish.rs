// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.

use derive_builder::Builder;
use http::{HeaderMap, HeaderName, HeaderValue};

use crate::api::rest_endpoint_prelude::*;

use serde::Deserialize;
use serde::Serialize;
use std::borrow::Cow;

/// https://www.w3.org/TR/webauthn-3/#sctn-authenticator-credential-properties-extension
#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct CredProps {
    /// A user agent supplied hint that this credential may have created a
    /// resident key. It is returned from the user agent, not the authenticator
    /// meaning that this is an unreliable signal.
    ///
    /// Note that this extension is UNSIGNED and may have been altered by page
    /// javascript.
    #[serde()]
    #[builder(setter(into))]
    pub(crate) rk: bool,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum CredProtect {
    #[serde(rename = "UserVerificationOptional")]
    Userverificationoptional,
    #[serde(rename = "UserVerificationOptionalWithCredentialIDList")]
    Userverificationoptionalwithcredentialidlist,
    #[serde(rename = "UserVerificationRequired")]
    Userverificationrequired,
}

/// https://w3c.github.io/webauthn/#dictdef-authenticationextensionsclientoutputs
/// The default option here for Options are None, so it can be derived
#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct Extensions {
    /// Indicates whether the client used the provided appid extension.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) appid: Option<bool>,

    /// https://www.w3.org/TR/webauthn-3/#sctn-authenticator-credential-properties-extension
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) cred_props: Option<CredProps>,

    /// Valid credential protection policies
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default)]
    pub(crate) cred_protect: Option<CredProtect>,

    /// Indicates if the client successfully applied a HMAC Secret.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) hmac_secret: Option<bool>,

    /// Indicates the current minimum PIN length.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) min_pin_length: Option<u32>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Transports {
    #[serde(rename = "Ble")]
    Ble,
    #[serde(rename = "Hybrid")]
    Hybrid,
    #[serde(rename = "Internal")]
    Internal,
    #[serde(rename = "Nfc")]
    Nfc,
    #[serde(rename = "Test")]
    Test,
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Usb")]
    Usb,
}

/// https://w3c.github.io/webauthn/#authenticatorattestationresponse
#[derive(Builder, Debug, Deserialize, Clone, Serialize)]
#[builder(setter(strip_option))]
pub struct Response<'a> {
    /// https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-attestationobject.
    #[serde()]
    #[builder(setter(into))]
    pub(crate) attestation_object: Cow<'a, str>,

    /// https://w3c.github.io/webauthn/#dom-authenticatorresponse-clientdatajson.
    #[serde()]
    #[builder(setter(into))]
    pub(crate) client_data_json: Cow<'a, str>,

    /// https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-gettransports.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(into))]
    pub(crate) transports: Option<Vec<Transports>>,
}

#[derive(Builder, Debug, Clone)]
#[builder(setter(strip_option))]
pub struct Request<'a> {
    /// Credential description.
    #[builder(default, setter(into))]
    pub(crate) description: Option<Cow<'a, str>>,

    /// https://w3c.github.io/webauthn/#dictdef-authenticationextensionsclientoutputs
    /// The default option here for Options are None, so it can be derived
    #[builder(setter(into))]
    pub(crate) extensions: Extensions,

    /// The id of the PublicKey credential, likely in base64.
    ///
    /// This is NEVER actually used in a real registration, because the true
    /// credential ID is taken from the attestation data.
    #[builder(setter(into))]
    pub(crate) id: Cow<'a, str>,

    /// The id of the credential, as binary.
    ///
    /// This is NEVER actually used in a real registration, because the true
    /// credential ID is taken from the attestation data.
    #[builder(setter(into))]
    pub(crate) raw_id: Cow<'a, str>,

    /// https://w3c.github.io/webauthn/#authenticatorattestationresponse
    #[builder(setter(into))]
    pub(crate) response: Response<'a>,

    /// The type of credential.
    #[builder(setter(into))]
    pub(crate) type_: Cow<'a, str>,

    /// The ID of the user.
    #[builder(default, setter(into))]
    user_id: Cow<'a, str>,

    #[builder(setter(name = "_headers"), default, private)]
    _headers: Option<HeaderMap>,
}
impl<'a> Request<'a> {
    /// Create a builder for the endpoint.
    pub fn builder() -> RequestBuilder<'a> {
        RequestBuilder::default()
    }
}

impl<'a> RequestBuilder<'a> {
    /// Add a single header to the Register_Finish.
    pub fn header<K, V>(&mut self, header_name: K, header_value: V) -> &mut Self
    where
        K: Into<HeaderName>,
        V: Into<HeaderValue>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .insert(header_name.into(), header_value.into());
        self
    }

    /// Add multiple headers.
    pub fn headers<I, T>(&mut self, iter: I) -> &mut Self
    where
        I: Iterator<Item = T>,
        T: Into<(Option<HeaderName>, HeaderValue)>,
    {
        self._headers
            .get_or_insert(None)
            .get_or_insert_with(HeaderMap::new)
            .extend(iter.map(Into::into));
        self
    }
}

impl RestEndpoint for Request<'_> {
    fn method(&self) -> http::Method {
        http::Method::POST
    }

    fn endpoint(&self) -> Cow<'static, str> {
        format!(
            "users/{user_id}/passkeys/register_finish",
            user_id = self.user_id.as_ref(),
        )
        .into()
    }

    fn parameters(&self) -> QueryParams<'_> {
        QueryParams::default()
    }

    fn body(&self) -> Result<Option<(&'static str, Vec<u8>)>, BodyError> {
        let mut params = JsonBodyParams::default();

        params.push_opt("description", self.description.as_ref());
        params.push("extensions", serde_json::to_value(&self.extensions)?);
        params.push("id", serde_json::to_value(&self.id)?);
        params.push("raw_id", serde_json::to_value(&self.raw_id)?);
        params.push("response", serde_json::to_value(&self.response)?);
        params.push("type_", serde_json::to_value(&self.type_)?);

        params.into_body()
    }

    fn service_type(&self) -> ServiceType {
        ServiceType::Identity
    }

    fn response_key(&self) -> Option<Cow<'static, str>> {
        Some("passkey".into())
    }

    /// Returns headers to be set into the request
    fn request_headers(&self) -> Option<&HeaderMap> {
        self._headers.as_ref()
    }

    /// Returns required API version
    fn api_version(&self) -> Option<ApiVersion> {
        Some(ApiVersion::new(4, 0))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[cfg(feature = "sync")]
    use crate::api::Query;
    use crate::test::client::FakeOpenStackClient;
    use crate::types::ServiceType;
    use http::{HeaderName, HeaderValue};
    use httpmock::MockServer;
    use serde_json::json;

    #[test]
    fn test_service_type() {
        assert_eq!(
            Request::builder()
                .extensions(ExtensionsBuilder::default().build().unwrap())
                .id("foo")
                .raw_id("foo")
                .response(
                    ResponseBuilder::default()
                        .attestation_object("foo")
                        .client_data_json("foo")
                        .build()
                        .unwrap()
                )
                .type_("foo")
                .build()
                .unwrap()
                .service_type(),
            ServiceType::Identity
        );
    }

    #[test]
    fn test_response_key() {
        assert_eq!(
            Request::builder()
                .extensions(ExtensionsBuilder::default().build().unwrap())
                .id("foo")
                .raw_id("foo")
                .response(
                    ResponseBuilder::default()
                        .attestation_object("foo")
                        .client_data_json("foo")
                        .build()
                        .unwrap()
                )
                .type_("foo")
                .build()
                .unwrap()
                .response_key()
                .unwrap(),
            "passkey"
        );
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST).path(format!(
                "/users/{user_id}/passkeys/register_finish",
                user_id = "user_id",
            ));

            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "passkey": {} }));
        });

        let endpoint = Request::builder()
            .user_id("user_id")
            .extensions(ExtensionsBuilder::default().build().unwrap())
            .id("foo")
            .raw_id("foo")
            .response(
                ResponseBuilder::default()
                    .attestation_object("foo")
                    .client_data_json("foo")
                    .build()
                    .unwrap(),
            )
            .type_("foo")
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }

    #[cfg(feature = "sync")]
    #[test]
    fn endpoint_headers() {
        let server = MockServer::start();
        let client = FakeOpenStackClient::new(server.base_url());
        let mock = server.mock(|when, then| {
            when.method(httpmock::Method::POST)
                .path(format!(
                    "/users/{user_id}/passkeys/register_finish",
                    user_id = "user_id",
                ))
                .header("foo", "bar")
                .header("not_foo", "not_bar");
            then.status(200)
                .header("content-type", "application/json")
                .json_body(json!({ "passkey": {} }));
        });

        let endpoint = Request::builder()
            .user_id("user_id")
            .extensions(ExtensionsBuilder::default().build().unwrap())
            .id("foo")
            .raw_id("foo")
            .response(
                ResponseBuilder::default()
                    .attestation_object("foo")
                    .client_data_json("foo")
                    .build()
                    .unwrap(),
            )
            .type_("foo")
            .headers(
                [(
                    Some(HeaderName::from_static("foo")),
                    HeaderValue::from_static("bar"),
                )]
                .into_iter(),
            )
            .header(
                HeaderName::from_static("not_foo"),
                HeaderValue::from_static("not_bar"),
            )
            .build()
            .unwrap();
        let _: serde_json::Value = endpoint.query(&client).unwrap();
        mock.assert();
    }
}

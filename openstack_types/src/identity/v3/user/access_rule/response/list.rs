// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the GET `users/{user_id}/access_rules` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// AccessRule response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct AccessRuleResponse {
    /// The UUID of the access rule
    #[serde(default)]
    #[structable(optional)]
    pub id: Option<String>,

    /// The request method that the application credential is permitted to use
    /// for a given API endpoint.
    #[serde(default)]
    #[structable(optional, serialize, wide)]
    pub method: Option<Method>,

    /// The API path that the application credential is permitted to access.
    #[serde(default)]
    #[structable(optional, wide)]
    pub path: Option<String>,

    /// The service type identifier for the service that the application
    /// credential is permitted to access. Must be a service type that is
    /// listed in the service catalog and not a code name for a service.
    #[serde(default)]
    #[structable(optional, wide)]
    pub service: Option<String>,
}

/// The link to the resources in question.
/// `Links` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Links {
    #[serde(default, rename = "self")]
    pub _self: Option<String>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Method {
    // Delete
    #[serde(rename = "DELETE")]
    Delete,

    // Get
    #[serde(rename = "GET")]
    Get,

    // Head
    #[serde(rename = "HEAD")]
    Head,

    // Patch
    #[serde(rename = "PATCH")]
    Patch,

    // Post
    #[serde(rename = "POST")]
    Post,

    // Put
    #[serde(rename = "PUT")]
    Put,
}

impl std::str::FromStr for Method {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "DELETE" => Ok(Self::Delete),
            "GET" => Ok(Self::Get),
            "HEAD" => Ok(Self::Head),
            "PATCH" => Ok(Self::Patch),
            "POST" => Ok(Self::Post),
            "PUT" => Ok(Self::Put),
            _ => Err(()),
        }
    }
}

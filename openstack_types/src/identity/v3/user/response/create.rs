// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the post users operation

use serde::{Deserialize, Serialize};

/// User response representation
#[derive(Clone, Deserialize, Serialize)]
pub struct UserResponse {
    /// The ID of the default project for the user.
    ///
    default_project_id: Option<String>,

    /// The resource description.
    ///
    description: Option<String>,

    /// The ID of the domain.
    ///
    domain_id: Option<String>,

    /// If the user is enabled, this value is `true`. If the user is disabled,
    /// this value is `false`.
    ///
    enabled: Option<bool>,

    /// List of federated objects associated with a user. Each object in the
    /// list contains the `idp_id` and `protocols`. `protocols` is a list of
    /// objects, each of which contains `protocol_id` and `unique_id` of the
    /// protocol and user respectively. For example:
    ///
    /// ```text
    /// "federated": [
    ///   {
    ///     "idp_id": "efbab5a6acad4d108fec6c63d9609d83",
    ///     "protocols": [
    ///       {"protocol_id": "mapped", "unique_id": "test@example.com"}
    ///     ]
    ///   }
    /// ]
    ///
    /// ```
    ///
    federated: Option<Vec<Federated>>,

    /// The user ID.
    ///
    id: Option<String>,

    /// The links for the `user` resource.
    ///
    links: Option<Links>,

    /// The user name. Must be unique within the owning domain.
    ///
    name: String,

    /// The resource options for the user. Available resource options are
    /// `ignore_change_password_upon_first_use`, `ignore_password_expiry`,
    /// `ignore_lockout_failure_attempts`, `lock_password`,
    /// `multi_factor_auth_enabled`, and `multi_factor_auth_rules`
    /// `ignore_user_inactivity`.
    ///
    options: Option<Options>,

    password: Option<String>,

    /// The date and time when the password expires. The time zone is UTC.
    ///
    /// This is a response object attribute; not valid for requests. A `null`
    /// value indicates that the password never expires.
    ///
    /// **New in version 3.7**
    ///
    password_expires_at: Option<String>,
}

/// `Protocols` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Protocols {
    protocol_id: String,
    unique_id: String,
}

/// `Federated` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Federated {
    idp_id: String,
    protocols: Vec<Protocols>,
}

/// The links for the `user` resource.
///
/// `Links` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Links {
    next: Option<String>,
    previous: Option<String>,
    _self: String,
}

/// The resource options for the user. Available resource options are
/// `ignore_change_password_upon_first_use`, `ignore_password_expiry`,
/// `ignore_lockout_failure_attempts`, `lock_password`,
/// `multi_factor_auth_enabled`, and `multi_factor_auth_rules`
/// `ignore_user_inactivity`.
///
/// `Options` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Options {
    ignore_change_password_upon_first_use: Option<bool>,
    ignore_lockout_failure_attempts: Option<bool>,
    ignore_password_expiry: Option<bool>,
    ignore_user_inactivity: Option<bool>,
    lock_password: Option<bool>,
    multi_factor_auth_enabled: Option<bool>,
    multi_factor_auth_rules: Option<Vec<Vec<String>>>,
}

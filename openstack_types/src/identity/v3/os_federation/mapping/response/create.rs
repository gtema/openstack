// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the PUT `OS-FEDERATION/mappings/{mapping_id}` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// Mapping response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct MappingResponse {
    /// The Federation Mapping unique ID
    #[serde(default)]
    #[structable(optional)]
    pub id: Option<String>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub rules: Option<Vec<Rules>>,

    /// Mapping schema version
    #[serde(default)]
    #[structable(optional)]
    pub schema_version: Option<String>,
}

/// `Domain` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Domain {
    #[serde(default)]
    pub id: Option<String>,
    #[serde(default)]
    pub name: Option<String>,
}

/// `Group` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Group {
    pub id: String,
}

/// `GroupStructResponse` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct GroupStructResponse {
    pub domain: Domain,
    pub name: String,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum LocalGroup {
    // F1
    F1(Group),
    // F2
    F2(GroupStructResponse),
}

/// `Roles` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Roles {
    pub name: String,
}

/// `Projects` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Projects {
    #[serde(default)]
    pub domain: Option<Domain>,
    pub name: String,
    pub roles: Vec<Roles>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Type {
    // Ephemeral
    #[serde(rename = "ephemeral")]
    Ephemeral,

    // Local
    #[serde(rename = "local")]
    Local,
}

impl std::str::FromStr for Type {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "ephemeral" => Ok(Self::Ephemeral),
            "local" => Ok(Self::Local),
            _ => Err(()),
        }
    }
}

/// `User` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct User {
    #[serde(default)]
    pub domain: Option<Domain>,
    #[serde(default)]
    pub email: Option<String>,
    #[serde(default)]
    pub id: Option<String>,
    #[serde(default)]
    pub name: Option<String>,
    #[serde(default, rename = "type")]
    pub _type: Option<Type>,
}

/// `Local` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Local {
    #[serde(default)]
    pub domain: Option<Domain>,
    #[serde(default)]
    pub group: Option<LocalGroup>,
    #[serde(default)]
    pub group_ids: Option<String>,
    #[serde(default)]
    pub groups: Option<String>,
    #[serde(default)]
    pub projects: Option<Vec<Projects>>,
    #[serde(default)]
    pub user: Option<User>,
}

/// `RemoteAnyOneOfRegexType` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct RemoteAnyOneOfRegexType {
    pub any_one_of: Vec<String>,
    #[serde(default)]
    pub regex: Option<bool>,
    #[serde(rename = "type")]
    pub _type: String,
}

/// `RemoteBlacklistRegexType` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct RemoteBlacklistRegexType {
    pub blacklist: Vec<String>,
    #[serde(default)]
    pub regex: Option<bool>,
    #[serde(rename = "type")]
    pub _type: String,
}

/// `RemoteNotAnyOfRegexType` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct RemoteNotAnyOfRegexType {
    pub not_any_of: Vec<String>,
    #[serde(default)]
    pub regex: Option<bool>,
    #[serde(rename = "type")]
    pub _type: String,
}

/// `RemoteRegexTypeWhitelist` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct RemoteRegexTypeWhitelist {
    #[serde(default)]
    pub regex: Option<bool>,
    #[serde(rename = "type")]
    pub _type: String,
    pub whitelist: Vec<String>,
}

/// `RemoteType` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct RemoteType {
    #[serde(rename = "type")]
    pub _type: String,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum RulesRemote {
    // F1
    F1(RemoteAnyOneOfRegexType),
    // F2
    F2(RemoteBlacklistRegexType),
    // F3
    F3(RemoteNotAnyOfRegexType),
    // F4
    F4(RemoteRegexTypeWhitelist),
    // F5
    F5(RemoteType),
}

/// `Rules` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Rules {
    pub local: Vec<Local>,
    pub remote: Vec<RulesRemote>,
}

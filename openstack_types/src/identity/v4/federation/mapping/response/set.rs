// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the PUT `federation/mappings/{id}` operation

use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::BTreeMap;
use structable::{StructTable, StructTableOptions};

/// Mapping response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct MappingResponse {
    /// List of allowed redirect urls (only for `oidc` type).
    #[serde(default)]
    #[structable(optional, serialize)]
    pub allowed_redirect_uris: Option<Vec<String>>,

    /// List of audiences that must be present in the token.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub bound_audiences: Option<Vec<String>>,

    /// Additional claims that must be present in the token.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub bound_claims: Option<BTreeMap<String, Value>>,

    /// Token subject value that must be set in the token.
    #[serde(default)]
    #[structable(optional)]
    pub bound_subject: Option<String>,

    /// `domain_id` owning the attribute mapping.
    ///
    /// Unset `domain_id` means the attribute mapping is shared and can be used
    /// by different domains. This requires `domain_id_claim` to be present.
    /// Attribute mapping can be only shared when the referred identity
    /// provider is also shared (does not set the `domain_id` attribute).
    #[serde(default)]
    #[structable(optional)]
    pub domain_id: Option<String>,

    /// `domain_id` claim name.
    #[serde(default)]
    #[structable(optional)]
    pub domain_id_claim: Option<String>,

    /// `groups` claim name.
    #[serde(default)]
    #[structable(optional)]
    pub groups_claim: Option<String>,

    /// Attribute mapping ID for federated logins.
    #[structable()]
    pub id: String,

    /// ID of the federated identity provider for which this attribute mapping
    /// can be used.
    #[structable()]
    pub idp_id: String,

    /// Attribute mapping name for federated logins.
    #[structable()]
    pub name: String,

    /// List of OIDC scopes.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub oidc_scopes: Option<Vec<String>>,

    /// Fixed project_id for the token.
    #[serde(default)]
    #[structable(optional)]
    pub token_project_id: Option<String>,

    /// Token restrictions to be applied to the granted token.
    #[serde(default)]
    #[structable(optional)]
    pub token_restriction_id: Option<String>,

    /// Attribute mapping type.
    #[serde(rename = "type")]
    #[structable(serialize, title = "type")]
    pub _type: Type,

    /// `user_id` claim name.
    #[structable()]
    pub user_id_claim: String,

    /// `user_name` claim name.
    #[structable()]
    pub user_name_claim: String,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Type {
    // Jwt
    #[serde(rename = "jwt")]
    Jwt,

    // Oidc
    #[serde(rename = "oidc")]
    Oidc,
}

impl std::str::FromStr for Type {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "jwt" => Ok(Self::Jwt),
            "oidc" => Ok(Self::Oidc),
            _ => Err(()),
        }
    }
}

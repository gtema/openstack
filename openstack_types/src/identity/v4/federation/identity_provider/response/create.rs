// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the POST `federation/identity_providers` operation

use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::BTreeMap;
use structable::{StructTable, StructTableOptions};

/// IdentityProvider response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct IdentityProviderResponse {
    /// The bound issuer that is verified when using the identity provider.
    #[serde(default)]
    #[structable(optional)]
    pub bound_issuer: Option<String>,

    /// Default attribute mapping name which is automatically used when no
    /// mapping is explicitly requested. The referred attribute mapping must
    /// exist.
    #[serde(default)]
    #[structable(optional)]
    pub default_mapping_name: Option<String>,

    /// The ID of the domain this identity provider belongs to. Empty value
    /// identifies that the identity provider can be used by other domains as
    /// well.
    #[serde(default)]
    #[structable(optional)]
    pub domain_id: Option<String>,

    /// The ID of the federated identity provider.
    #[structable()]
    pub id: String,

    /// URL to fetch JsonWebKeySet. This must be set for "jwt" mapping when the
    /// provider does not provide discovery endpoint or when it is not standard
    /// compliant.
    #[serde(default)]
    #[structable(optional)]
    pub jwks_url: Option<String>,

    /// List of the jwt validation public keys.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub jwt_validation_pubkeys: Option<Vec<String>>,

    /// The Name of the federated identity provider.
    #[structable()]
    pub name: String,

    /// The oidc `client_id` to use for the private client. The `client_secret`
    /// is never returned and can be only overwritten.
    #[serde(default)]
    #[structable(optional)]
    pub oidc_client_id: Option<String>,

    /// OIDC discovery endpoint for the identity provider.
    #[serde(default)]
    #[structable(optional)]
    pub oidc_discovery_url: Option<String>,

    /// The oidc response mode.
    #[serde(default)]
    #[structable(optional)]
    pub oidc_response_mode: Option<String>,

    /// List of supported response types.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub oidc_response_types: Option<Vec<String>>,

    /// Additional provider configuration.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub provider_config: Option<BTreeMap<String, Value>>,
}

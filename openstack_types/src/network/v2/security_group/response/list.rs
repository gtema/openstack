// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the get security-groups operation

use crate::common::BoolString;
use serde::{Deserialize, Serialize};

/// SecurityGroup response representation
#[derive(Clone, Deserialize, Serialize)]
pub struct SecurityGroupResponse {
    created_at: Option<String>,

    description: Option<String>,

    /// The ID of the security group.
    ///
    id: Option<String>,

    /// Human-readable name of the resource.
    ///
    name: Option<String>,

    revision_number: Option<i32>,

    /// A list of `security_group_rule` objects. Refer to
    /// [Security group rules](#security-group-rules) for details.
    ///
    security_group_rules: Option<Vec<SecurityGroupRules>>,

    /// Indicates whether this security group is shared to the requesterâ€™s
    /// project.
    ///
    shared: Option<BoolString>,

    /// Indicates if the security group is stateful or stateless.
    ///
    stateful: Option<BoolString>,

    /// The list of tags on the resource.
    ///
    tags: Option<Vec<String>>,

    /// The ID of the project.
    ///
    tenant_id: Option<String>,

    updated_at: Option<String>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Direction {
    // Ingress
    #[serde(rename = "ingress")]
    Ingress,

    // Egress
    #[serde(rename = "egress")]
    Egress,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Ethertype {
    // Ipv4
    #[serde(rename = "IPv4")]
    Ipv4,

    // Ipv6
    #[serde(rename = "IPv6")]
    Ipv6,
}

/// `SecurityGroupRules` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct SecurityGroupRules {
    belongs_to_default_sg: Option<BoolString>,
    created_at: Option<String>,
    description: Option<String>,
    direction: Option<Direction>,
    ethertype: Option<Ethertype>,
    id: Option<String>,
    normalized_cidr: Option<String>,
    port_range_max: Option<String>,
    port_range_min: Option<String>,
    protocol: Option<String>,
    remote_address_group_id: Option<String>,
    remote_group_id: Option<String>,
    remote_ip_prefix: Option<String>,
    revision_number: Option<i32>,
    security_group_id: Option<String>,
    tenant_id: Option<String>,
    updated_at: Option<String>,
}

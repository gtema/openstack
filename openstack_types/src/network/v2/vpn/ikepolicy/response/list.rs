// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the GET `vpn/ikepolicies` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// Ikepolicy response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct IkepolicyResponse {
    /// The authentication hash algorithm. Valid values are `sha1`, `sha256`,
    /// `sha384`, `sha512`, `aes-xcbc`, `aes-cmac`. The default is `sha1`.
    #[serde(default)]
    #[structable(optional, serialize, wide)]
    pub auth_algorithm: Option<AuthAlgorithm>,

    /// A human-readable description for the resource. Default is an empty
    /// string.
    #[serde(default)]
    #[structable(optional, wide)]
    pub description: Option<String>,

    /// The encryption algorithm. A valid value is `3des`, `aes-128`,
    /// `aes-192`, `aes-256`, `aes-128-ctr`, `aes-192-ctr`, `aes-256-ctr`.
    /// Additional values for AES CCM and GCM modes are defined (e.g.
    /// `aes-256-ccm-16`, `aes-256-gcm-16`) for all combinations of key length
    /// 128, 192, 256 bits and ICV length 8, 12, 16 octets. Default is
    /// `aes-128`.
    #[serde(default)]
    #[structable(optional, serialize, wide)]
    pub encryption_algorithm: Option<EncryptionAlgorithm>,

    /// The ID of the IKE policy.
    #[serde(default)]
    #[structable(optional)]
    pub id: Option<String>,

    /// The IKE version. A valid value is `v1` or `v2`. Default is `v1`.
    #[serde(default)]
    #[structable(optional, serialize, wide)]
    pub ike_version: Option<IkeVersion>,

    /// The lifetime of the security association. The lifetime consists of a
    /// unit and integer value. You can omit either the unit or value portion
    /// of the lifetime. Default unit is seconds and default value is 3600.
    #[serde(default)]
    #[structable(optional, wide)]
    pub lifetime: Option<String>,

    /// Human-readable name of the resource. Default is an empty string.
    #[serde(default)]
    #[structable(optional)]
    pub name: Option<String>,

    /// Perfect forward secrecy (PFS). A valid value is `Group2`, `Group5`,
    /// `Group14` to `Group31`. Default is `Group5`.
    #[serde(default)]
    #[structable(optional, serialize, wide)]
    pub pfs: Option<Pfs>,

    /// The IKE mode. A valid value is `main`, which is the default.
    #[serde(default)]
    #[structable(optional, serialize, wide)]
    pub phase1_negotiation_mode: Option<Phase1NegotiationMode>,

    /// The ID of the project.
    #[serde(default)]
    #[structable(optional, wide)]
    pub tenant_id: Option<String>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum EncryptionAlgorithm {
    // _3des
    #[serde(rename = "3des")]
    _3des,

    // Aes128
    #[serde(rename = "aes-128")]
    Aes128,

    // Aes128Ccm12
    #[serde(rename = "aes-128-ccm-12")]
    Aes128Ccm12,

    // Aes128Ccm16
    #[serde(rename = "aes-128-ccm-16")]
    Aes128Ccm16,

    // Aes128Ccm8
    #[serde(rename = "aes-128-ccm-8")]
    Aes128Ccm8,

    // Aes128Ctr
    #[serde(rename = "aes-128-ctr")]
    Aes128Ctr,

    // Aes128Gcm12
    #[serde(rename = "aes-128-gcm-12")]
    Aes128Gcm12,

    // Aes128Gcm16
    #[serde(rename = "aes-128-gcm-16")]
    Aes128Gcm16,

    // Aes128Gcm8
    #[serde(rename = "aes-128-gcm-8")]
    Aes128Gcm8,

    // Aes192
    #[serde(rename = "aes-192")]
    Aes192,

    // Aes192Ccm12
    #[serde(rename = "aes-192-ccm-12")]
    Aes192Ccm12,

    // Aes192Ccm16
    #[serde(rename = "aes-192-ccm-16")]
    Aes192Ccm16,

    // Aes192Ccm8
    #[serde(rename = "aes-192-ccm-8")]
    Aes192Ccm8,

    // Aes192Ctr
    #[serde(rename = "aes-192-ctr")]
    Aes192Ctr,

    // Aes192Gcm12
    #[serde(rename = "aes-192-gcm-12")]
    Aes192Gcm12,

    // Aes192Gcm16
    #[serde(rename = "aes-192-gcm-16")]
    Aes192Gcm16,

    // Aes192Gcm8
    #[serde(rename = "aes-192-gcm-8")]
    Aes192Gcm8,

    // Aes256
    #[serde(rename = "aes-256")]
    Aes256,

    // Aes256Ccm12
    #[serde(rename = "aes-256-ccm-12")]
    Aes256Ccm12,

    // Aes256Ccm16
    #[serde(rename = "aes-256-ccm-16")]
    Aes256Ccm16,

    // Aes256Ccm8
    #[serde(rename = "aes-256-ccm-8")]
    Aes256Ccm8,

    // Aes256Ctr
    #[serde(rename = "aes-256-ctr")]
    Aes256Ctr,

    // Aes256Gcm12
    #[serde(rename = "aes-256-gcm-12")]
    Aes256Gcm12,

    // Aes256Gcm16
    #[serde(rename = "aes-256-gcm-16")]
    Aes256Gcm16,

    // Aes256Gcm8
    #[serde(rename = "aes-256-gcm-8")]
    Aes256Gcm8,
}

impl std::str::FromStr for EncryptionAlgorithm {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "3des" => Ok(Self::_3des),
            "aes-128" => Ok(Self::Aes128),
            "aes-128-ccm-12" => Ok(Self::Aes128Ccm12),
            "aes-128-ccm-16" => Ok(Self::Aes128Ccm16),
            "aes-128-ccm-8" => Ok(Self::Aes128Ccm8),
            "aes-128-ctr" => Ok(Self::Aes128Ctr),
            "aes-128-gcm-12" => Ok(Self::Aes128Gcm12),
            "aes-128-gcm-16" => Ok(Self::Aes128Gcm16),
            "aes-128-gcm-8" => Ok(Self::Aes128Gcm8),
            "aes-192" => Ok(Self::Aes192),
            "aes-192-ccm-12" => Ok(Self::Aes192Ccm12),
            "aes-192-ccm-16" => Ok(Self::Aes192Ccm16),
            "aes-192-ccm-8" => Ok(Self::Aes192Ccm8),
            "aes-192-ctr" => Ok(Self::Aes192Ctr),
            "aes-192-gcm-12" => Ok(Self::Aes192Gcm12),
            "aes-192-gcm-16" => Ok(Self::Aes192Gcm16),
            "aes-192-gcm-8" => Ok(Self::Aes192Gcm8),
            "aes-256" => Ok(Self::Aes256),
            "aes-256-ccm-12" => Ok(Self::Aes256Ccm12),
            "aes-256-ccm-16" => Ok(Self::Aes256Ccm16),
            "aes-256-ccm-8" => Ok(Self::Aes256Ccm8),
            "aes-256-ctr" => Ok(Self::Aes256Ctr),
            "aes-256-gcm-12" => Ok(Self::Aes256Gcm12),
            "aes-256-gcm-16" => Ok(Self::Aes256Gcm16),
            "aes-256-gcm-8" => Ok(Self::Aes256Gcm8),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum AuthAlgorithm {
    // AesCmac
    #[serde(rename = "aes-cmac")]
    AesCmac,

    // AesXcbc
    #[serde(rename = "aes-xcbc")]
    AesXcbc,

    // Sha1
    #[serde(rename = "sha1")]
    Sha1,

    // Sha256
    #[serde(rename = "sha256")]
    Sha256,

    // Sha384
    #[serde(rename = "sha384")]
    Sha384,

    // Sha512
    #[serde(rename = "sha512")]
    Sha512,
}

impl std::str::FromStr for AuthAlgorithm {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "aes-cmac" => Ok(Self::AesCmac),
            "aes-xcbc" => Ok(Self::AesXcbc),
            "sha1" => Ok(Self::Sha1),
            "sha256" => Ok(Self::Sha256),
            "sha384" => Ok(Self::Sha384),
            "sha512" => Ok(Self::Sha512),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Phase1NegotiationMode {
    // Aggressive
    #[serde(rename = "aggressive")]
    Aggressive,

    // Main
    #[serde(rename = "main")]
    Main,
}

impl std::str::FromStr for Phase1NegotiationMode {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "aggressive" => Ok(Self::Aggressive),
            "main" => Ok(Self::Main),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum IkeVersion {
    // V1
    #[serde(rename = "v1")]
    V1,

    // V2
    #[serde(rename = "v2")]
    V2,
}

impl std::str::FromStr for IkeVersion {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "v1" => Ok(Self::V1),
            "v2" => Ok(Self::V2),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Pfs {
    // Group14
    #[serde(rename = "group14")]
    Group14,

    // Group15
    #[serde(rename = "group15")]
    Group15,

    // Group16
    #[serde(rename = "group16")]
    Group16,

    // Group17
    #[serde(rename = "group17")]
    Group17,

    // Group18
    #[serde(rename = "group18")]
    Group18,

    // Group19
    #[serde(rename = "group19")]
    Group19,

    // Group2
    #[serde(rename = "group2")]
    Group2,

    // Group20
    #[serde(rename = "group20")]
    Group20,

    // Group21
    #[serde(rename = "group21")]
    Group21,

    // Group22
    #[serde(rename = "group22")]
    Group22,

    // Group23
    #[serde(rename = "group23")]
    Group23,

    // Group24
    #[serde(rename = "group24")]
    Group24,

    // Group25
    #[serde(rename = "group25")]
    Group25,

    // Group26
    #[serde(rename = "group26")]
    Group26,

    // Group27
    #[serde(rename = "group27")]
    Group27,

    // Group28
    #[serde(rename = "group28")]
    Group28,

    // Group29
    #[serde(rename = "group29")]
    Group29,

    // Group30
    #[serde(rename = "group30")]
    Group30,

    // Group31
    #[serde(rename = "group31")]
    Group31,

    // Group5
    #[serde(rename = "group5")]
    Group5,
}

impl std::str::FromStr for Pfs {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "group14" => Ok(Self::Group14),
            "group15" => Ok(Self::Group15),
            "group16" => Ok(Self::Group16),
            "group17" => Ok(Self::Group17),
            "group18" => Ok(Self::Group18),
            "group19" => Ok(Self::Group19),
            "group2" => Ok(Self::Group2),
            "group20" => Ok(Self::Group20),
            "group21" => Ok(Self::Group21),
            "group22" => Ok(Self::Group22),
            "group23" => Ok(Self::Group23),
            "group24" => Ok(Self::Group24),
            "group25" => Ok(Self::Group25),
            "group26" => Ok(Self::Group26),
            "group27" => Ok(Self::Group27),
            "group28" => Ok(Self::Group28),
            "group29" => Ok(Self::Group29),
            "group30" => Ok(Self::Group30),
            "group31" => Ok(Self::Group31),
            "group5" => Ok(Self::Group5),
            _ => Err(()),
        }
    }
}

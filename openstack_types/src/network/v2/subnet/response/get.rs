// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the get subnets/{subnet_id} operation

use crate::common::BoolString;
use serde::{Deserialize, Serialize};

/// Subnet response representation
#[derive(Clone, Deserialize, Serialize)]
pub struct SubnetResponse {
    /// Allocation pools with `start` and `end` IP addresses for this subnet.
    ///
    allocation_pools: Option<Vec<AllocationPools>>,

    /// The CIDR of the subnet.
    ///
    cidr: Option<String>,

    /// Time at which the resource has been created (in UTC ISO8601 format).
    ///
    created_at: Option<String>,

    /// A human-readable description for the resource.
    ///
    description: Option<String>,

    /// List of dns name servers associated with the subnet.
    ///
    dns_nameservers: Option<Vec<String>>,

    /// Whether to publish DNS records for IPs from this subnet.
    ///
    dns_publish_fixed_ip: Option<BoolString>,

    /// Indicates whether dhcp is enabled or disabled for the subnet.
    ///
    enable_dhcp: Option<BoolString>,

    /// Gateway IP of this subnet. If the value is `null` that implies no
    /// gateway is associated with the subnet.
    ///
    gateway_ip: Option<String>,

    /// Additional routes for the subnet. A list of dictionaries with
    /// `destination` and `nexthop` parameters.
    ///
    host_routes: Option<Vec<HostRoutes>>,

    /// The ID of the subnet.
    ///
    id: Option<String>,

    /// The IP protocol version. Value is `4` or `6`.
    ///
    ip_version: Option<i32>,

    /// The IPv6 address modes specifies mechanisms for assigning IP addresses.
    /// Value is `slaac`, `dhcpv6-stateful`, `dhcpv6-stateless` or `null`.
    ///
    ipv6_address_mode: Option<Ipv6AddressMode>,

    /// The IPv6 router advertisement specifies whether the networking service
    /// should transmit ICMPv6 packets, for a subnet. Value is `slaac`,
    /// `dhcpv6-stateful`, `dhcpv6-stateless` or `null`.
    ///
    ipv6_ra_mode: Option<Ipv6RaMode>,

    /// Human-readable name of the resource.
    ///
    name: Option<String>,

    /// The ID of the network to which the subnet belongs.
    ///
    network_id: Option<String>,

    /// The revision number of the resource.
    ///
    revision_number: Option<i32>,

    #[serde(rename = "router:external")]
    router_external: Option<BoolString>,

    /// The ID of a network segment the subnet is associated with. It is
    /// available when `segment` extension is enabled.
    ///
    segment_id: Option<String>,

    /// The service types associated with the subnet.
    ///
    service_types: Option<Vec<String>>,

    /// The ID of the subnet pool associated with the subnet.
    ///
    subnetpool_id: Option<String>,

    /// The list of tags on the resource.
    ///
    tags: Option<Vec<String>>,

    /// The ID of the project.
    ///
    tenant_id: Option<String>,

    /// Time at which the resource has been updated (in UTC ISO8601 format).
    ///
    updated_at: Option<String>,
}

/// `AllocationPools` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct AllocationPools {
    end: Option<String>,
    start: Option<String>,
}

/// `HostRoutes` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct HostRoutes {
    destination: Option<String>,
    nexthop: Option<String>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Ipv6RaMode {
    // Slaac
    #[serde(rename = "slaac")]
    Slaac,

    // Dhcpv6Stateful
    #[serde(rename = "dhcpv6-stateful")]
    Dhcpv6Stateful,

    // Dhcpv6Stateless
    #[serde(rename = "dhcpv6-stateless")]
    Dhcpv6Stateless,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Ipv6AddressMode {
    // Slaac
    #[serde(rename = "slaac")]
    Slaac,

    // Dhcpv6Stateful
    #[serde(rename = "dhcpv6-stateful")]
    Dhcpv6Stateful,

    // Dhcpv6Stateless
    #[serde(rename = "dhcpv6-stateless")]
    Dhcpv6Stateless,
}

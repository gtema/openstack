// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the POST `metering/metering-label-rules` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// MeteringLabelRule response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct MeteringLabelRuleResponse {
    #[serde(default)]
    #[structable(optional)]
    pub destination_ip_prefix: Option<String>,

    /// Ingress or egress, which is the direction in which the metering rule is
    /// applied.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub direction: Option<Direction>,

    /// Indicates whether to count the traffic of a specific IP address with
    /// the `remote_ip_prefix`, `source_ip_prefix`, or `destination_ip_prefix`
    /// values.
    #[serde(default, deserialize_with = "crate::common::deser_bool_str_opt")]
    #[structable(optional)]
    pub excluded: Option<bool>,

    /// The ID of the metering label rule.
    #[serde(default)]
    #[structable(optional)]
    pub id: Option<String>,

    /// The metering label ID associated with this metering rule.
    #[serde(default)]
    #[structable(optional)]
    pub metering_label_id: Option<String>,

    /// (deprecated) The source IP prefix that is matched by this metering
    /// rule. By source IP prefix, one should read the internal/private IPs
    /// used in OpenStack.
    #[serde(default)]
    #[structable(optional)]
    pub remote_ip_prefix: Option<String>,

    #[serde(default)]
    #[structable(optional)]
    pub source_ip_prefix: Option<String>,

    #[serde(default)]
    #[structable(optional)]
    pub tenant_id: Option<String>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Direction {
    // Egress
    #[serde(rename = "egress")]
    Egress,

    // Ingress
    #[serde(rename = "ingress")]
    Ingress,
}

impl std::str::FromStr for Direction {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "egress" => Ok(Self::Egress),
            "ingress" => Ok(Self::Ingress),
            _ => Err(()),
        }
    }
}

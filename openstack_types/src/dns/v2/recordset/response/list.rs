// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the GET `recordsets` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// Recordset response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct RecordsetResponse {
    /// current action in progress on the resource
    #[serde(default)]
    #[structable(optional, serialize, wide)]
    pub action: Option<Action>,

    /// Date / Time when resource was created.
    #[serde(default)]
    #[structable(optional)]
    pub created_at: Option<String>,

    /// Description for this recordset
    #[serde(default)]
    #[structable(optional, wide)]
    pub description: Option<String>,

    /// ID for the resource
    #[serde(default)]
    #[structable(optional)]
    pub id: Option<String>,

    /// DNS Name for the recordset
    #[serde(default)]
    #[structable(optional)]
    pub name: Option<String>,

    /// ID for the project that owns the resource
    #[serde(default)]
    #[structable(optional, wide)]
    pub project_id: Option<String>,

    /// A list of data for this recordset. Each item will be a separate record
    /// in Designate These items should conform to the DNS spec for the record
    /// type - e.g. A records must be IPv4 addresses, CNAME records must be a
    /// hostname.
    #[serde(default)]
    #[structable(optional, serialize, wide)]
    pub records: Option<Vec<String>>,

    /// The status of the resource.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub status: Option<Status>,

    /// TTL (Time to Live) for the recordset.
    #[serde(default)]
    #[structable(optional, wide)]
    pub ttl: Option<i32>,

    /// They RRTYPE of the recordset.
    #[serde(default, rename = "type")]
    #[structable(optional, serialize, title = "type", wide)]
    pub _type: Option<Type>,

    /// Date / Time when resource last updated.
    #[serde(default)]
    #[structable(optional)]
    pub updated_at: Option<String>,

    /// Version of the resource
    #[serde(default)]
    #[structable(optional, wide)]
    pub version: Option<i32>,

    /// ID for the zone that contains this recordset
    #[serde(default)]
    #[structable(optional, wide)]
    pub zone_id: Option<String>,

    /// The name of the zone that contains this recordset
    #[serde(default)]
    #[structable(optional, wide)]
    pub zone_name: Option<String>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Status {
    // Active
    #[serde(rename = "ACTIVE")]
    Active,

    // Deleted
    #[serde(rename = "DELETED")]
    Deleted,

    // Error
    #[serde(rename = "ERROR")]
    Error,

    // Pending
    #[serde(rename = "PENDING")]
    Pending,

    // Success
    #[serde(rename = "SUCCESS")]
    Success,
}

impl std::str::FromStr for Status {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "ACTIVE" => Ok(Self::Active),
            "DELETED" => Ok(Self::Deleted),
            "ERROR" => Ok(Self::Error),
            "PENDING" => Ok(Self::Pending),
            "SUCCESS" => Ok(Self::Success),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Action {
    // Create
    #[serde(rename = "CREATE")]
    Create,

    // Delete
    #[serde(rename = "DELETE")]
    Delete,

    // None
    #[serde(rename = "NONE")]
    None,

    // Update
    #[serde(rename = "UPDATE")]
    Update,
}

impl std::str::FromStr for Action {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "CREATE" => Ok(Self::Create),
            "DELETE" => Ok(Self::Delete),
            "NONE" => Ok(Self::None),
            "UPDATE" => Ok(Self::Update),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Type {
    // A
    #[serde(rename = "A")]
    A,

    // Aaaa
    #[serde(rename = "AAAA")]
    Aaaa,

    // Caa
    #[serde(rename = "CAA")]
    Caa,

    // Cert
    #[serde(rename = "CERT")]
    Cert,

    // Cname
    #[serde(rename = "CNAME")]
    Cname,

    // Mx
    #[serde(rename = "MX")]
    Mx,

    // Naptr
    #[serde(rename = "NAPTR")]
    Naptr,

    // Ns
    #[serde(rename = "NS")]
    Ns,

    // Ptr
    #[serde(rename = "PTR")]
    Ptr,

    // Soa
    #[serde(rename = "SOA")]
    Soa,

    // Spf
    #[serde(rename = "SPF")]
    Spf,

    // Srv
    #[serde(rename = "SRV")]
    Srv,

    // Sshfp
    #[serde(rename = "SSHFP")]
    Sshfp,

    // Txt
    #[serde(rename = "TXT")]
    Txt,
}

impl std::str::FromStr for Type {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "A" => Ok(Self::A),
            "AAAA" => Ok(Self::Aaaa),
            "CAA" => Ok(Self::Caa),
            "CERT" => Ok(Self::Cert),
            "CNAME" => Ok(Self::Cname),
            "MX" => Ok(Self::Mx),
            "NAPTR" => Ok(Self::Naptr),
            "NS" => Ok(Self::Ns),
            "PTR" => Ok(Self::Ptr),
            "SOA" => Ok(Self::Soa),
            "SPF" => Ok(Self::Spf),
            "SRV" => Ok(Self::Srv),
            "SSHFP" => Ok(Self::Sshfp),
            "TXT" => Ok(Self::Txt),
            _ => Err(()),
        }
    }
}

/// Links to the resource, and other related resources. When a response has
/// been broken into pages, we will include a `next` link that should be
/// followed to retrieve all results
/// `Links` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Links {
    pub _self: Option<String>,
}

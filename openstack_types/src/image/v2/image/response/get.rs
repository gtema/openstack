// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the get images/{image_id} operation

use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;

/// Image response representation
#[derive(Clone, Deserialize, Serialize)]
struct ImageResponse {
    /// An MD5 hash over the image data. The value might be `null` (JSON null
    /// data type), as this field is no longer populated by the Image Service
    /// beginning with the Victoria release. It remains present for backward
    /// compatibility with legacy images. To validate image data, instead use
    /// the secure multihash fields `os_hash_algo` and `os_hash_value`.
    ///
    checksum: Option<String>,

    /// Format of the image container.
    ///
    /// Values may vary based on the configuration available in a particular
    /// OpenStack cloud. See the [Image Schema](#image-schema) response from
    /// the cloud itself for the valid values available. See
    /// [Container Format](https://docs.openstack.org/glance/latest/user/formats.html#container-format)
    /// in the Glance documentation for more information.
    ///
    /// Example formats are: `ami`, `ari`, `aki`, `bare`, `ovf`, `ova`,
    /// `docker`, or `compressed`.
    ///
    /// The value might be `null` (JSON null data type).
    ///
    /// **Train changes**: The `compressed` container format is a supported
    /// value.
    ///
    container_format: Option<ContainerFormat>,

    /// The date and time when the resource was created.
    ///
    /// The date and time stamp format is
    /// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601):
    ///
    /// ```text
    /// CCYY-MM-DDThh:mm:ss±hh:mm
    ///
    /// ```
    ///
    /// For example, `2015-08-27T09:49:58-05:00`.
    ///
    /// The `±hh:mm` value, if included, is the time zone as an offset from
    /// UTC.
    ///
    created_at: Option<String>,

    /// The URL to access the image file kept in external store. *It is present
    /// only if the* `show_image_direct_url` *option is* `true` *in the Image
    /// service’s configuration file.* **Because it presents a security risk,
    /// this option is disabled by default.**
    ///
    direct_url: Option<String>,

    /// The format of the disk.
    ///
    /// Values may vary based on the configuration available in a particular
    /// OpenStack cloud. See the [Image Schema](#image-schema) response from
    /// the cloud itself for the valid values available. See
    /// [Disk Format](https://docs.openstack.org/glance/latest/user/formats.html#disk-format)
    /// in the Glance documentation for more information.
    ///
    /// Example formats are: `ami`, `ari`, `aki`, `vhd`, `vhdx`, `vmdk`, `raw`,
    /// `qcow2`, `vdi`, `ploop` or `iso`.
    ///
    /// The value might be `null` (JSON null data type).
    ///
    /// **Newton changes**: The `vhdx` disk format is a supported value.\
    /// **Ocata changes**: The `ploop` disk format is a supported value.
    ///
    disk_format: Option<DiskFormat>,

    /// The URL for the virtual machine image file.
    ///
    file: Option<String>,

    /// A unique, user-defined image UUID, in the format:
    ///
    /// ```text
    /// nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn
    ///
    /// ```
    ///
    /// Where **n** is a hexadecimal digit from 0 to f, or F.
    ///
    /// For example:
    ///
    /// ```text
    /// b2173dd3-7ad6-4362-baa6-a68bce3565cb
    ///
    /// ```
    ///
    /// If you omit this value, the API generates a UUID for the image.
    ///
    id: Option<String>,

    /// A list of objects, each of which describes an image location. Each
    /// object contains a `url` key, whose value is a URL specifying a
    /// location, and a `metadata` key, whose value is a dict of key:value
    /// pairs containing information appropriate to the use of whatever
    /// external store is indicated by the URL. *This list appears only if the*
    /// `show_multiple_locations` *option is set to* `true` *in the Image
    /// service’s configuration file.* **Because it presents a security risk,
    /// this option is disabled by default.**
    ///
    locations: Option<Vec<Locations>>,

    /// Amount of disk space in GB that is required to boot the image. The
    /// value might be `null` (JSON null data type).
    ///
    min_disk: Option<i32>,

    /// Amount of RAM in MB that is required to boot the image. The value might
    /// be `null` (JSON null data type).
    ///
    min_ram: Option<i32>,

    /// The name of the image. Value might be `null` (JSON null data type).
    ///
    name: Option<String>,

    /// The algorithm used to compute a secure hash of the image data for this
    /// image. The result of the computation is displayed as the value of the
    /// `os_hash_value` property. The value might be `null` (JSON null data
    /// type). The algorithm used is chosen by the cloud operator; it may not
    /// be configured by end users. *(Since Image API v2.7)*
    ///
    os_hash_algo: Option<String>,

    /// The hexdigest of the secure hash of the image data computed using the
    /// algorithm whose name is the value of the `os_hash_algo` property. The
    /// value might be `null` (JSON null data type) if data has not yet been
    /// associated with this image, or if the image was created using a version
    /// of the Image Service API prior to version 2.7. *(Since Image API v2.7)*
    ///
    os_hash_value: Option<String>,

    /// This field controls whether an image is displayed in the default
    /// image-list response. A “hidden” image is out of date somehow (for
    /// example, it may not have the latest updates applied) and hence should
    /// not be a user’s first choice, but it’s not deleted because it may be
    /// needed for server rebuilds. By hiding it from the default image list,
    /// it’s easier for end users to find and use a more up-to-date version of
    /// this image. *(Since Image API v2.7)*
    ///
    os_hidden: Option<bool>,

    /// An identifier for the owner of the image, usually the project (also
    /// called the “tenant”) ID. The value might be `null` (JSON null data
    /// type).
    ///
    owner: Option<String>,

    /// A boolean value that must be `false` or the image cannot be deleted.
    ///
    protected: Option<bool>,

    /// The URL for the schema describing a virtual machine image.
    ///
    schema: Option<String>,

    /// The URL for the virtual machine image.
    ///
    #[serde(rename = "self")]
    _self: Option<String>,

    /// The size of the image data, in bytes. The value might be `null` (JSON
    /// null data type).
    ///
    size: Option<i64>,

    /// The image status.
    ///
    status: Option<Status>,

    /// Store in which image data resides. Only present when the operator has
    /// enabled multiple stores. May be a comma-separated list of store
    /// identifiers.
    ///
    stores: Option<String>,

    /// List of tags for this image, possibly an empty list.
    ///
    tags: Option<Vec<String>>,

    /// The date and time when the resource was updated.
    ///
    /// The date and time stamp format is
    /// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601):
    ///
    /// ```text
    /// CCYY-MM-DDThh:mm:ss±hh:mm
    ///
    /// ```
    ///
    /// For example, `2015-08-27T09:49:58-05:00`.
    ///
    /// The `±hh:mm` value, if included, is the time zone as an offset from
    /// UTC. In the previous example, the offset value is `-05:00`.
    ///
    /// If the `updated_at` date and time stamp is not set, its value is
    /// `null`.
    ///
    updated_at: Option<String>,

    /// The virtual size of the image. The value might be `null` (JSON null
    /// data type).
    ///
    virtual_size: Option<i64>,

    /// Image visibility, that is, the access permission for the image.
    ///
    visibility: Option<Visibility>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Status {
    // PendingDelete
    #[serde(rename = "pending_delete")]
    PendingDelete,

    // Deleted
    #[serde(rename = "deleted")]
    Deleted,

    // Queued
    #[serde(rename = "queued")]
    Queued,

    // Deactivated
    #[serde(rename = "deactivated")]
    Deactivated,

    // Uploading
    #[serde(rename = "uploading")]
    Uploading,

    // Active
    #[serde(rename = "active")]
    Active,

    // Importing
    #[serde(rename = "importing")]
    Importing,

    // Saving
    #[serde(rename = "saving")]
    Saving,

    // Killed
    #[serde(rename = "killed")]
    Killed,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Visibility {
    // Private
    #[serde(rename = "private")]
    Private,

    // Shared
    #[serde(rename = "shared")]
    Shared,

    // Community
    #[serde(rename = "community")]
    Community,

    // Public
    #[serde(rename = "public")]
    Public,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum ContainerFormat {
    // Ari
    #[serde(rename = "ari")]
    Ari,

    // Ovf
    #[serde(rename = "ovf")]
    Ovf,

    // Ova
    #[serde(rename = "ova")]
    Ova,

    // Aki
    #[serde(rename = "aki")]
    Aki,

    // Docker
    #[serde(rename = "docker")]
    Docker,

    // Bare
    #[serde(rename = "bare")]
    Bare,

    // Ami
    #[serde(rename = "ami")]
    Ami,

    // Compressed
    #[serde(rename = "compressed")]
    Compressed,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum DiskFormat {
    // Vhdx
    #[serde(rename = "vhdx")]
    Vhdx,

    // Vhd
    #[serde(rename = "vhd")]
    Vhd,

    // Ari
    #[serde(rename = "ari")]
    Ari,

    // Raw
    #[serde(rename = "raw")]
    Raw,

    // Ploop
    #[serde(rename = "ploop")]
    Ploop,

    // Qcow2
    #[serde(rename = "qcow2")]
    Qcow2,

    // Vmdk
    #[serde(rename = "vmdk")]
    Vmdk,

    // Aki
    #[serde(rename = "aki")]
    Aki,

    // Vdi
    #[serde(rename = "vdi")]
    Vdi,

    // Ami
    #[serde(rename = "ami")]
    Ami,

    // Iso
    #[serde(rename = "iso")]
    Iso,
}

/// Values to be used to populate the corresponding image properties. If the
/// image status is not 'queued', values must exactly match those already
/// contained in the image properties.
///
/// `ValidationData` type
#[derive(Clone, Debug, Deserialize, Serialize)]
struct ValidationData {
    checksum: Option<String>,
    os_hash_algo: String,
    os_hash_value: String,
}

/// `Locations` type
#[derive(Clone, Debug, Deserialize, Serialize)]
struct Locations {
    metadata: HashMap<String, Value>,
    url: String,
    validation_data: Option<ValidationData>,
}

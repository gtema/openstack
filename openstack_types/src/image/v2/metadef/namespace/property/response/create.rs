// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the post metadefs/namespaces/{namespace_name}/properties operation

use serde::{Deserialize, Serialize};
use serde_json::Value;
use structable::{StructTable, StructTableOptions};

/// Property response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct PropertyResponse {
    #[serde(rename = "additionalItems")]
    #[structable(optional, title = "additionalItems")]
    pub additional_items: Option<bool>,

    #[serde(rename = "default")]
    #[structable(optional, serialize, title = "default")]
    pub _default: Option<Value>,

    #[structable(optional)]
    pub description: Option<String>,

    #[serde(rename = "enum")]
    #[structable(optional, serialize, title = "enum")]
    pub _enum: Option<Vec<String>>,

    #[structable(optional, serialize)]
    pub items: Option<Items>,

    #[structable(optional)]
    pub maximum: Option<f32>,

    #[serde(rename = "maxItems")]
    #[structable(optional, title = "maxItems")]
    pub max_items: Option<i32>,

    #[serde(rename = "maxLength")]
    #[structable(optional, title = "maxLength")]
    pub max_length: Option<i32>,

    #[structable(optional)]
    pub minimum: Option<f32>,

    #[serde(rename = "minItems")]
    #[structable(optional, title = "minItems")]
    pub min_items: Option<i32>,

    #[serde(rename = "minLength")]
    #[structable(optional, title = "minLength")]
    pub min_length: Option<i32>,

    #[structable()]
    pub name: String,

    #[structable(optional, serialize)]
    pub operators: Option<Vec<String>>,

    #[structable(optional)]
    pub pattern: Option<String>,

    #[structable(optional)]
    pub readonly: Option<bool>,

    #[structable(optional, serialize)]
    pub required: Option<Vec<String>>,

    #[structable()]
    pub title: String,

    #[serde(rename = "type")]
    #[structable(serialize, title = "type")]
    pub _type: Type,

    #[serde(rename = "uniqueItems")]
    #[structable(optional, title = "uniqueItems")]
    pub unique_items: Option<bool>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Type {
    // Array
    #[serde(rename = "array")]
    Array,

    // Boolean
    #[serde(rename = "boolean")]
    Boolean,

    // Integer
    #[serde(rename = "integer")]
    Integer,

    // Number
    #[serde(rename = "number")]
    Number,

    // Object
    #[serde(rename = "object")]
    Object,

    // String
    #[serde(rename = "string")]
    String,
}

/// `Items` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Items {
    pub _enum: Option<Vec<String>>,
    pub _type: Option<Type>,
}

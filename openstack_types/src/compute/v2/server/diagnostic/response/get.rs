// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the GET `servers/{server_id}/diagnostics` operation

use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::BTreeMap;
use structable::{StructTable, StructTableOptions};

/// Diagnostic response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct DiagnosticResponse {
    /// Indicates whether or not a config drive was used for this server.
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional)]
    pub config_drive: Option<bool>,

    /// The list of dictionaries with detailed information about VM CPUs.
    /// Following fields are presented in each dictionary:
    ///
    /// - `id` - the ID of CPU (Integer)
    /// - `time` - CPU Time in nano seconds (Integer)
    /// - `utilisation` - CPU utilisation in percents (Integer)
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional, serialize)]
    pub cpu_details: Option<Vec<BTreeMap<String, Value>>>,

    /// The list of dictionaries with detailed information about VM disks.
    /// Following fields are presented in each dictionary:
    ///
    /// - `read_bytes` - Disk reads in bytes (Integer)
    /// - `read_requests` - Read requests (Integer)
    /// - `write_bytes` - Disk writes in bytes (Integer)
    /// - `write_requests` - Write requests (Integer)
    /// - `errors_count` - Disk errors (Integer)
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional, serialize)]
    pub disk_details: Option<Vec<BTreeMap<String, Value>>>,

    /// The driver on which the VM is running. Possible values are:
    ///
    /// - `libvirt`
    /// - `xenapi`
    /// - `vmwareapi`
    /// - `ironic`
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional, serialize)]
    pub driver: Option<Driver>,

    /// The hypervisor on which the VM is running. Examples for libvirt driver
    /// may be: `qemu`, `kvm` or `xen`.
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional)]
    pub hypervisor: Option<String>,

    /// The hypervisor OS.
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional)]
    pub hypervisor_os: Option<String>,

    /// Id of the resource
    #[structable()]
    pub id: String,

    /// The dictionary with information about VM memory usage. Following fields
    /// are presented in the dictionary:
    ///
    /// - `maximum` - Amount of memory provisioned for the VM in MiB (Integer)
    /// - `used` - Amount of memory that is currently used by the guest
    ///   operating system and its applications in MiB (Integer)
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional, serialize)]
    pub memory_details: Option<Vec<BTreeMap<String, Value>>>,

    /// Name
    #[structable()]
    pub name: String,

    /// The list of dictionaries with detailed information about VM NICs.
    /// Following fields are presented in each dictionary:
    ///
    /// - `mac_address` - Mac address of the interface (String)
    /// - `rx_octets` - Received octets (Integer)
    /// - `rx_errors` - Received errors (Integer)
    /// - `rx_drop` - Received packets dropped (Integer)
    /// - `rx_packets` - Received packets (Integer)
    /// - `rx_rate` - Receive rate in bytes (Integer)
    /// - `tx_octets` - Transmitted Octets (Integer)
    /// - `tx_errors` - Transmit errors (Integer)
    /// - `tx_drop` - Transmit dropped packets (Integer)
    /// - `tx_packets` - Transmit packets (Integer)
    /// - `tx_rate` - Transmit rate in bytes (Integer)
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional, serialize)]
    pub nic_details: Option<Vec<NicDetails>>,

    /// The number of vCPUs.
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional)]
    pub num_cpus: Option<i32>,

    /// The number of disks.
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional)]
    pub num_disks: Option<i32>,

    /// The number of vNICs.
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional)]
    pub num_nics: Option<i32>,

    /// A string enum denoting the current state of the VM. Possible values
    /// are:
    ///
    /// - `pending`
    /// - `running`
    /// - `paused`
    /// - `shutdown`
    /// - `crashed`
    /// - `suspended`
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional, serialize)]
    pub state: Option<State>,

    /// The amount of time in seconds that the VM has been running.
    ///
    /// **New in version 2.48**
    #[serde(default)]
    #[structable(optional)]
    pub uptime: Option<i32>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Driver {
    // Hyperv
    #[serde(rename = "hyperv")]
    Hyperv,

    // Ironic
    #[serde(rename = "ironic")]
    Ironic,

    // Libvirt
    #[serde(rename = "libvirt")]
    Libvirt,

    // Vmwareapi
    #[serde(rename = "vmwareapi")]
    Vmwareapi,

    // Xenapi
    #[serde(rename = "xenapi")]
    Xenapi,
}

impl std::str::FromStr for Driver {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "hyperv" => Ok(Self::Hyperv),
            "ironic" => Ok(Self::Ironic),
            "libvirt" => Ok(Self::Libvirt),
            "vmwareapi" => Ok(Self::Vmwareapi),
            "xenapi" => Ok(Self::Xenapi),
            _ => Err(()),
        }
    }
}

/// `NicDetails` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct NicDetails {
    pub mac_address: Option<String>,
    pub rx_drop: Option<i32>,
    pub rx_errors: Option<i32>,
    pub rx_octets: Option<i32>,
    pub rx_packets: Option<i32>,
    pub rx_rate: Option<i32>,
    pub tx_drop: Option<i32>,
    pub tx_errors: Option<i32>,
    pub tx_octets: Option<i32>,
    pub tx_packets: Option<i32>,
    pub tx_rate: Option<i32>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum State {
    // Crashed
    #[serde(rename = "crashed")]
    Crashed,

    // Paused
    #[serde(rename = "paused")]
    Paused,

    // Pending
    #[serde(rename = "pending")]
    Pending,

    // Running
    #[serde(rename = "running")]
    Running,

    // Shutdown
    #[serde(rename = "shutdown")]
    Shutdown,

    // Suspended
    #[serde(rename = "suspended")]
    Suspended,
}

impl std::str::FromStr for State {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "crashed" => Ok(Self::Crashed),
            "paused" => Ok(Self::Paused),
            "pending" => Ok(Self::Pending),
            "running" => Ok(Self::Running),
            "shutdown" => Ok(Self::Shutdown),
            "suspended" => Ok(Self::Suspended),
            _ => Err(()),
        }
    }
}

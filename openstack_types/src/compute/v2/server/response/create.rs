// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the POST `servers` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// Server response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct ServerResponse {
    /// The administrative password for the server. If you set
    /// `enable_instance_password` configuration option to `False`, the API
    /// wouldnâ€™t return the `adminPass` field in response.
    #[serde(default, rename = "adminPass")]
    #[structable(optional, title = "adminPass")]
    pub admin_pass: Option<String>,

    /// The UUID of the server.
    #[structable()]
    pub id: String,

    /// Links pertaining to usage. See
    /// [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html)
    /// for more info.
    ///
    /// **New in version 2.40**
    #[serde(default)]
    #[structable(optional, serialize)]
    pub links: Option<Vec<Links>>,

    /// Disk configuration. The value is either:
    ///
    /// - `AUTO`. The API builds the server with a single partition the size of
    ///   the target flavor disk. The API automatically adjusts the file system
    ///   to fit the entire partition.
    /// - `MANUAL`. The API builds the server by using the partition scheme and
    ///   file system that is in the source image. If the target flavor disk is
    ///   larger, The API does not partition the remaining disk space.
    #[serde(default, rename = "OS-DCF:diskConfig")]
    #[structable(optional, serialize, title = "OS-DCF:diskConfig")]
    pub os_dcf_disk_config: Option<OsDcfDiskConfig>,

    /// One or more security groups objects.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub security_groups: Option<Vec<SecurityGroups>>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum OsDcfDiskConfig {
    // Auto
    #[serde(rename = "AUTO")]
    Auto,

    // Manual
    #[serde(rename = "MANUAL")]
    Manual,
}

impl std::str::FromStr for OsDcfDiskConfig {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "AUTO" => Ok(Self::Auto),
            "MANUAL" => Ok(Self::Manual),
            _ => Err(()),
        }
    }
}

/// Links to the resources in question. See
/// [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html)
/// for more info.
/// `Links` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Links {
    pub href: Option<String>,
    pub rel: Option<String>,
}

/// `SecurityGroups` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct SecurityGroups {
    pub name: Option<String>,
}

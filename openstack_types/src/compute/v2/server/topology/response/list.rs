// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the get servers/{server_id}/topology operation

use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use structable_derive::StructTable;

use crate::common::{OutputConfig, StructTable};

/// Topology response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct TopologyResponse {
    /// The mapping of server cores to host physical CPU
    ///
    #[structable(optional, serialize)]
    pub cpu_pinning: Option<HashMap<String, i32>>,

    /// The host NUMA node the virtual NUMA node is map to.
    ///
    #[structable(optional)]
    pub host_node: Option<i32>,

    /// The amount of memory assigned to this NUMA node in MB.
    ///
    #[structable(optional)]
    pub memory_mb: Option<i32>,

    /// The page size in KB of a server. This field is `null` if the page size
    /// information is not available.
    ///
    #[structable(optional, serialize)]
    pub pagesize_kb: Option<i32>,

    /// A mapping of host cpus thread sibling.
    ///
    #[structable(optional, serialize)]
    pub siblings: Option<Vec<i32>>,

    /// A list of IDs of the virtual CPU assigned to this NUMA node.
    ///
    #[structable(optional, serialize)]
    pub vcpu_set: Option<Vec<i32>>,
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the GET `os-hypervisors/{id}/uptime` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// Uptime response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct UptimeResponse {
    /// The hypervisor host name provided by the Nova virt driver. For the
    /// Ironic driver, it is the Ironic node uuid.
    #[structable()]
    pub hypervisor_hostname: String,

    /// The id of the hypervisor as a UUID.
    ///
    /// **New in version 2.53**
    #[structable()]
    pub id: String,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub servers: Option<Vec<Servers>>,

    /// The state of the hypervisor. One of `up` or `down`.
    #[structable(serialize)]
    pub state: State,

    /// The status of the hypervisor. One of `enabled` or `disabled`.
    #[structable(serialize)]
    pub status: Status,

    /// The total uptime of the hypervisor and information about average load.
    #[structable(optional)]
    pub uptime: Option<String>,
}

/// `Servers` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Servers {
    pub name: String,
    pub uuid: String,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum State {
    // Down
    #[serde(rename = "down")]
    Down,

    // Up
    #[serde(rename = "up")]
    Up,
}

impl std::str::FromStr for State {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "down" => Ok(Self::Down),
            "up" => Ok(Self::Up),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Deserialize, Clone, Serialize)]
pub enum Status {
    // Disabled
    #[serde(rename = "disabled")]
    Disabled,

    // Enabled
    #[serde(rename = "enabled")]
    Enabled,
}

impl std::str::FromStr for Status {
    type Err = ();
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
            "disabled" => Ok(Self::Disabled),
            "enabled" => Ok(Self::Enabled),
            _ => Err(()),
        }
    }
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the get os-hypervisors/detail operation

use crate::common::IntString;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;

/// Hypervisor response representation
#[derive(Clone, Deserialize, Serialize)]
pub struct HypervisorResponse {
    /// A dictionary that contains cpu information like `arch`, `model`,
    /// `vendor`, `features` and `topology`. The content of this field is
    /// hypervisor specific.
    ///
    /// Note
    ///
    /// Since version 2.28 `cpu_info` field is returned as a dictionary instead
    /// of string.
    ///
    /// **Available until version 2.87**
    ///
    pub cpu_info: Option<HashMap<String, Value>>,

    /// The current_workload is the number of tasks the hypervisor is
    /// responsible for. This will be equal or greater than the number of
    /// active VMs on the system (it can be greater when VMs are being deleted
    /// and the hypervisor is still cleaning up).
    ///
    /// **Available until version 2.87**
    ///
    pub current_workload: Option<i32>,

    /// The actual free disk on this hypervisor(in GiB). If allocation ratios
    /// used for overcommit are configured, this may be negative. This is
    /// intentional as it provides insight into the amount by which the disk is
    /// overcommitted.
    ///
    /// **Available until version 2.87**
    ///
    pub disk_available_least: Option<i32>,

    /// The free disk remaining on this hypervisor(in GiB). This does not take
    /// allocation ratios used for overcommit into account so this value may be
    /// negative.
    ///
    /// **Available until version 2.87**
    ///
    pub free_disk_gb: Option<i32>,

    /// The free RAM in this hypervisor(in MiB). This does not take allocation
    /// ratios used for overcommit into account so this value may be negative.
    ///
    /// **Available until version 2.87**
    ///
    pub free_ram_mb: Option<i32>,

    /// The IP address of the hypervisorâ€™s host.
    ///
    pub host_ip: Option<String>,

    /// The hypervisor host name provided by the Nova virt driver. For the
    /// Ironic driver, it is the Ironic node uuid.
    ///
    pub hypervisor_hostname: Option<String>,

    /// The hypervisor type.
    ///
    pub hypervisor_type: Option<String>,

    /// The hypervisor version.
    ///
    pub hypervisor_version: Option<i32>,

    /// The id of the hypervisor. From version 2.53 it is a string as UUID
    ///
    pub id: Option<String>,

    /// The disk in this hypervisor (in GiB). This does not take allocation
    /// ratios used for overcommit into account so there may be disparity
    /// between this and the used count.
    ///
    /// **Available until version 2.87**
    ///
    pub local_gb: Option<i32>,

    /// The disk used in this hypervisor (in GiB).
    ///
    /// **Available until version 2.87**
    ///
    pub local_gb_used: Option<i32>,

    /// The memory of this hypervisor (in MiB). This does not take allocation
    /// ratios used for overcommit into account so there may be disparity
    /// between this and the used count.
    ///
    /// **Available until version 2.87**
    ///
    pub memory_mb: Option<i32>,

    /// The memory used in this hypervisor (in MiB).
    ///
    /// **Available until version 2.87**
    ///
    pub memory_mb_used: Option<i32>,

    /// The number of running VMs on this hypervisor.
    ///
    /// **Available until version 2.87**
    ///
    pub running_vms: Option<i32>,

    /// A list of `server` objects. This field has become mandatory in
    /// microversion 2.75. If no servers is on hypervisor then empty list is
    /// returned.
    ///
    /// **New in version 2.53**
    ///
    pub servers: Option<Vec<Servers>>,

    /// The hypervisor service object.
    ///
    pub service: Option<Service>,

    /// The state of the hypervisor. One of `up` or `down`.
    ///
    pub state: Option<State>,

    /// The status of the hypervisor. One of `enabled` or `disabled`.
    ///
    pub status: Option<Status>,

    /// The total uptime of the hypervisor and information about average load.
    /// Only reported for active hosts where the virt driver supports this
    /// feature.
    ///
    /// **New in version 2.88**
    ///
    pub uptime: Option<String>,

    /// The number of vCPU in this hypervisor. This does not take allocation
    /// ratios used for overcommit into account so there may be disparity
    /// between this and the used count.
    ///
    /// **Available until version 2.87**
    ///
    pub vcpus: Option<i32>,

    /// The number of vCPU used in this hypervisor.
    ///
    /// **Available until version 2.87**
    ///
    pub vcpus_used: Option<i32>,
}

/// The hypervisor service object.
///
/// `Service` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Service {
    pub disabled_reason: Option<String>,
    pub host: Option<String>,
    pub id: Option<IntString>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum State {
    // Up
    #[serde(rename = "up")]
    Up,

    // Down
    #[serde(rename = "down")]
    Down,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Status {
    // Enabled
    #[serde(rename = "enabled")]
    Enabled,

    // Disabled
    #[serde(rename = "disabled")]
    Disabled,
}

/// `Servers` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Servers {
    pub name: String,
    pub uuid: String,
}

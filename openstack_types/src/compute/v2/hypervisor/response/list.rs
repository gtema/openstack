// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the get os-hypervisors operation

use serde::{Deserialize, Serialize};

/// Hypervisor response representation
#[derive(Clone, Deserialize, Serialize)]
struct HypervisorResponse {
    /// The hypervisor host name provided by the Nova virt driver. For the
    /// Ironic driver, it is the Ironic node uuid.
    ///
    hypervisor_hostname: String,

    /// The id of the hypervisor as a UUID.
    ///
    /// **New in version 2.53**
    ///
    id: String,

    /// A list of `server` objects. This field has become mandatory in
    /// microversion 2.75. If no servers is on hypervisor then empty list is
    /// returned.
    ///
    /// **New in version 2.53**
    ///
    servers: Vec<Servers>,

    /// The state of the hypervisor. One of `up` or `down`.
    ///
    state: State,

    /// The status of the hypervisor. One of `enabled` or `disabled`.
    ///
    status: Option<Status>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum State {
    // Up
    #[serde(rename = "up")]
    Up,

    // Down
    #[serde(rename = "down")]
    Down,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Status {
    // Disabled
    #[serde(rename = "disabled")]
    Disabled,

    // Enabled
    #[serde(rename = "enabled")]
    Enabled,
}

/// `Servers` type
#[derive(Clone, Debug, Deserialize, Serialize)]
struct Servers {
    name: String,
    uuid: String,
}

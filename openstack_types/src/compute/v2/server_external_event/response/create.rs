// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the post os-server-external-events operation

use serde::{Deserialize, Serialize};

/// ServerExternalEvent response representation
#[derive(Clone, Deserialize, Serialize)]
pub struct ServerExternalEventResponse {
    /// List of external events to process.
    ///
    pub events: Vec<Events>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Name {
    // NetworkVifUnplugged
    #[serde(rename = "network-vif-unplugged")]
    NetworkVifUnplugged,

    // VolumeExtended
    #[serde(rename = "volume-extended")]
    VolumeExtended,

    // NetworkVifPlugged
    #[serde(rename = "network-vif-plugged")]
    NetworkVifPlugged,

    // NetworkChanged
    #[serde(rename = "network-changed")]
    NetworkChanged,

    // NetworkVifDeleted
    #[serde(rename = "network-vif-deleted")]
    NetworkVifDeleted,

    // AcceleratorRequestBound
    #[serde(rename = "accelerator-request-bound")]
    AcceleratorRequestBound,

    // PowerUpdate
    #[serde(rename = "power-update")]
    PowerUpdate,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Status {
    // InProgress
    #[serde(rename = "in-progress")]
    InProgress,

    // Completed
    #[serde(rename = "completed")]
    Completed,

    // Failed
    #[serde(rename = "failed")]
    Failed,
}

/// `Events` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Events {
    pub name: Name,
    pub server_uuid: String,
    pub status: Status,
    pub tag: Option<String>,
}

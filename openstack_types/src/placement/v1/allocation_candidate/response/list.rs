// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the GET `allocation_candidates` operation

use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;
use structable::{StructTable, StructTableOptions};

/// AllocationCandidate response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct AllocationCandidateResponse {
    /// A list of objects that contain a serialized HTTP body that a client may
    /// subsequently use in a call to PUT /allocations/{consumer_uuid} to claim
    /// resources against a related set of resource providers.
    #[serde(default)]
    #[structable(optional, serialize)]
    pub allocation_requests: Option<Vec<AllocationRequests>>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub provider_summaries: Option<BTreeMap<String, ProviderSummariesItem>>,
}

/// `AllocationsItem` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct AllocationsItem {
    #[serde(default)]
    pub resources: Option<BTreeMap<String, i32>>,
}

/// `AllocationRequests` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct AllocationRequests {
    pub allocations: BTreeMap<String, AllocationsItem>,
    #[serde(default)]
    pub mappings: Option<BTreeMap<String, Vec<String>>>,
}

/// `ResourcesItem` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct ResourcesItem {
    #[serde(default)]
    pub capacity: Option<i32>,
    #[serde(default)]
    pub used: Option<i32>,
}

/// `ProviderSummariesItem` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct ProviderSummariesItem {
    #[serde(default)]
    pub parent_provider_uuid: Option<String>,
    pub resources: BTreeMap<String, ResourcesItem>,
    #[serde(default)]
    pub root_provider_uuid: Option<String>,
    #[serde(default)]
    pub traits: Option<Vec<String>>,
}

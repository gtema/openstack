// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the get clusters operation

use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Cluster response representation
#[derive(Clone, Deserialize, Serialize)]
struct ClusterResponse {
    api_address: Option<String>,

    /// The UUID of the cluster template.
    ///
    cluster_template_id: String,

    coe_version: Option<String>,

    container_version: Option<String>,

    /// The timeout for cluster creation in minutes. The value expected is a
    /// positive integer and the default is 60 minutes. If the timeout is
    /// reached during cluster creation process, the operation will be aborted
    /// and the cluster status will be set to `CREATE_FAILED`.
    ///
    create_timeout: Option<i32>,

    created_at: Option<String>,

    discovery_url: Option<String>,

    docker_volume_size: Option<i32>,

    faults: Option<HashMap<String, String>>,

    fixed_network: Option<String>,

    fixed_subnet: Option<String>,

    flavor_id: Option<String>,

    floating_ip_enabled: Option<String>,

    health_status: Option<HealthStatus>,

    health_status_reason: Option<HashMap<String, String>>,

    /// The name of the SSH keypair to configure in the cluster servers for ssh
    /// access. Users will need the key to be able to ssh to the servers in the
    /// cluster. The login name is specific to the cluster driver, for example
    /// with fedora-atomic image, default login name is `fedora`.
    ///
    keypair: Option<String>,

    labels: Option<HashMap<String, String>>,

    labels_added: Option<HashMap<String, String>>,

    labels_overridden: Option<HashMap<String, String>>,

    labels_skipped: Option<HashMap<String, String>>,

    master_addresses: Option<Vec<String>>,

    /// The number of servers that will serve as master for the cluster. The
    /// default is 1. Set to more than 1 master to enable High Availability. If
    /// the option `master-lb-enabled` is specified in the cluster template,
    /// the master servers will be placed in a load balancer pool.
    ///
    master_count: Option<i32>,

    master_flavor_id: Option<String>,

    master_lb_enabled: Option<String>,

    merge_labels: Option<String>,

    /// Name of the resource.
    ///
    name: Option<String>,

    node_addresses: Option<Vec<String>>,

    /// The number of servers that will serve as node in the cluster. The
    /// default is 1.
    ///
    node_count: Option<i32>,

    project_id: Option<String>,

    /// The reference UUID of orchestration stack from Heat orchestration
    /// service.
    ///
    stack_id: Option<String>,

    /// The current state of the cluster.
    ///
    status: Option<Status>,

    status_reason: Option<String>,

    updated_at: Option<String>,

    user_id: Option<String>,

    /// The UUID of the cluster.
    ///
    uuid: Option<String>,
}

/// A link representation.
///
/// `Links` type
#[derive(Clone, Debug, Deserialize, Serialize)]
struct Links {
    created_at: Option<String>,
    href: Option<String>,
    rel: Option<String>,
    _type: Option<String>,
    updated_at: Option<String>,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum Status {
    // SnapshotComplete
    #[serde(rename = "SNAPSHOT_COMPLETE")]
    SnapshotComplete,

    // DeleteComplete
    #[serde(rename = "DELETE_COMPLETE")]
    DeleteComplete,

    // ResumeComplete
    #[serde(rename = "RESUME_COMPLETE")]
    ResumeComplete,

    // UpdateComplete
    #[serde(rename = "UPDATE_COMPLETE")]
    UpdateComplete,

    // DeleteInProgress
    #[serde(rename = "DELETE_IN_PROGRESS")]
    DeleteInProgress,

    // CheckComplete
    #[serde(rename = "CHECK_COMPLETE")]
    CheckComplete,

    // CreateComplete
    #[serde(rename = "CREATE_COMPLETE")]
    CreateComplete,

    // CreateFailed
    #[serde(rename = "CREATE_FAILED")]
    CreateFailed,

    // AdoptComplete
    #[serde(rename = "ADOPT_COMPLETE")]
    AdoptComplete,

    // RollbackComplete
    #[serde(rename = "ROLLBACK_COMPLETE")]
    RollbackComplete,

    // CreateInProgress
    #[serde(rename = "CREATE_IN_PROGRESS")]
    CreateInProgress,

    // ResumeFailed
    #[serde(rename = "RESUME_FAILED")]
    ResumeFailed,

    // RollbackFailed
    #[serde(rename = "ROLLBACK_FAILED")]
    RollbackFailed,

    // UpdateFailed
    #[serde(rename = "UPDATE_FAILED")]
    UpdateFailed,

    // RollbackInProgress
    #[serde(rename = "ROLLBACK_IN_PROGRESS")]
    RollbackInProgress,

    // RestoreComplete
    #[serde(rename = "RESTORE_COMPLETE")]
    RestoreComplete,

    // UpdateInProgress
    #[serde(rename = "UPDATE_IN_PROGRESS")]
    UpdateInProgress,

    // DeleteFailed
    #[serde(rename = "DELETE_FAILED")]
    DeleteFailed,
}

#[derive(Debug, Deserialize, Clone, Serialize)]
#[serde(untagged)]
pub enum HealthStatus {
    // Unhealthy
    #[serde(rename = "UNHEALTHY")]
    Unhealthy,

    // Healthy
    #[serde(rename = "HEALTHY")]
    Healthy,

    // Unknown
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

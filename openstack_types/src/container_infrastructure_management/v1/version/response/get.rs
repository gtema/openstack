// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the GET `` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// Version response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct VersionResponse {
    #[serde(default)]
    #[structable(optional, serialize)]
    pub certificates: Option<Vec<Certificates>>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub clusters: Option<Vec<Clusters>>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub clustertemplates: Option<Vec<Clustertemplates>>,

    #[serde(default)]
    #[structable(optional)]
    pub created_at: Option<String>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub federations: Option<Vec<Federations>>,

    #[serde(default)]
    #[structable(optional)]
    pub id: Option<String>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub links: Option<Vec<Links>>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub media_types: Option<Vec<MediaTypes>>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub mservices: Option<Vec<Mservices>>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub nodegroups: Option<Vec<Nodegroups>>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub quotas: Option<Vec<Quotas>>,

    #[serde(default)]
    #[structable(optional, serialize)]
    pub stats: Option<Vec<Stats>>,

    #[serde(default)]
    #[structable(optional)]
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Certificates` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Certificates {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Clusters` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Clusters {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Clustertemplates` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Clustertemplates {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Federations` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Federations {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Links` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Links {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A media type representation.
/// `MediaTypes` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct MediaTypes {
    pub base: Option<String>,
    pub created_at: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Mservices` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Mservices {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Nodegroups` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Nodegroups {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Quotas` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Quotas {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

/// A link representation.
/// `Stats` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Stats {
    pub created_at: Option<String>,
    pub href: Option<String>,
    pub rel: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
}

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the GET `lbaas/loadbalancers/{loadbalancer_id}/status` operation

use serde::{Deserialize, Serialize};
use structable::{StructTable, StructTableOptions};

/// Loadbalancer response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct LoadbalancerResponse {
    /// A load balancer status object.
    #[structable(serialize)]
    pub loadbalancer: Loadbalancer,
}

/// Defines which attributes are to be shown on status response.
/// `HealthMonitor` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct HealthMonitor {
    pub id: Option<String>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub provisioning_status: Option<String>,
    pub _type: Option<String>,
}

/// Defines which attributes are to be shown on status response.
/// `Members` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Members {
    pub address: Option<String>,
    pub id: Option<String>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub protocol_port: Option<i32>,
    pub provisioning_status: Option<String>,
}

/// Defines which attributes are to be shown on status response.
/// `Pools` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Pools {
    pub health_monitor: Option<HealthMonitor>,
    pub id: Option<String>,
    pub members: Option<Vec<Members>>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub provisioning_status: Option<String>,
}

/// Defines which attributes are to be shown on status response.
/// `Listeners` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Listeners {
    pub id: Option<String>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub pools: Option<Vec<Pools>>,
    pub provisioning_status: Option<String>,
}

/// A load balancer status object.
/// `Loadbalancer` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Loadbalancer {
    pub id: Option<String>,
    pub listeners: Option<Vec<Listeners>>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub provisioning_status: Option<String>,
}

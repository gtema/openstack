// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the get lbaas/loadbalancers/{loadbalancer_id}/status operation

use serde::{Deserialize, Serialize};

/// Loadbalancer response representation
#[derive(Clone, Deserialize, Serialize)]
pub struct LoadbalancerResponse {
    /// A load balancer status object.
    ///
    loadbalancer: Loadbalancer,
}

/// Defines which attributes are to be shown on status response.
///
/// `HealthMonitor` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct HealthMonitor {
    id: Option<String>,
    name: Option<String>,
    operating_status: Option<String>,
    provisioning_status: Option<String>,
    _type: Option<String>,
}

/// Defines which attributes are to be shown on status response.
///
/// `Members` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Members {
    address: Option<String>,
    id: Option<String>,
    name: Option<String>,
    operating_status: Option<String>,
    protocol_port: Option<i32>,
    provisioning_status: Option<String>,
}

/// Defines which attributes are to be shown on status response.
///
/// `Pools` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Pools {
    health_monitor: Option<HealthMonitor>,
    id: Option<String>,
    members: Option<Vec<Members>>,
    name: Option<String>,
    operating_status: Option<String>,
    provisioning_status: Option<String>,
}

/// Defines which attributes are to be shown on status response.
///
/// `Listeners` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Listeners {
    id: Option<String>,
    name: Option<String>,
    operating_status: Option<String>,
    pools: Option<Vec<Pools>>,
    provisioning_status: Option<String>,
}

/// A load balancer status object.
///
/// `Loadbalancer` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Loadbalancer {
    id: Option<String>,
    listeners: Option<Vec<Listeners>>,
    name: Option<String>,
    operating_status: Option<String>,
    provisioning_status: Option<String>,
}

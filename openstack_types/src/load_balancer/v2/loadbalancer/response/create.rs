// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
// WARNING: This file is automatically generated from OpenAPI schema using
// `openstack-codegenerator`.
//! Response type for the POST `lbaas/loadbalancers` operation

use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use structable::{StructTable, StructTableOptions};

/// Loadbalancer response representation
#[derive(Clone, Deserialize, Serialize, StructTable)]
pub struct LoadbalancerResponse {
    /// A list of JSON objects defining “additional VIPs”. The format for these
    /// is `{"subnet_id": <subnet_id>, "ip_address": <ip_address>}`, where the
    /// `subnet_id` field is mandatory and the `ip_address` field is optional.
    /// Additional VIP subnets must all belong to the same network as the
    /// primary VIP.
    ///
    /// **New in version 2.26**
    ///
    #[structable(optional, serialize)]
    pub additional_vips: Option<Vec<AdditionalVips>>,

    #[structable(optional)]
    pub admin_state_up: Option<bool>,

    /// An availability zone name.
    ///
    #[structable(optional)]
    pub availability_zone: Option<String>,

    #[structable(optional)]
    pub created_at: Option<String>,

    #[structable(optional)]
    pub description: Option<String>,

    /// The ID of the flavor.
    ///
    #[structable(optional)]
    pub flavor_id: Option<String>,

    #[structable(optional)]
    pub id: Option<String>,

    /// The associated listener IDs, if any.
    ///
    #[structable(optional, serialize)]
    pub listeners: Option<Vec<Listeners>>,

    #[structable(optional)]
    pub name: Option<String>,

    #[structable(optional)]
    pub operating_status: Option<String>,

    /// The associated pool IDs, if any.
    ///
    #[structable(optional, serialize)]
    pub pools: Option<Vec<PoolsStructResponse>>,

    #[structable(optional)]
    pub project_id: Option<String>,

    /// Provider name for the load balancer.
    ///
    #[structable(optional)]
    pub provider: Option<String>,

    #[structable(optional)]
    pub provisioning_status: Option<String>,

    #[structable(optional, serialize)]
    pub tags: Option<Vec<String>>,

    #[structable(optional)]
    pub tenant_id: Option<String>,

    #[structable(optional)]
    pub updated_at: Option<String>,

    /// The IP address of the Virtual IP (VIP).
    ///
    #[structable(optional)]
    pub vip_address: Option<String>,

    /// The ID of the network for the Virtual IP (VIP).
    ///
    #[structable(optional)]
    pub vip_network_id: Option<String>,

    /// The ID of the Virtual IP (VIP) port.
    ///
    #[structable(optional)]
    pub vip_port_id: Option<String>,

    /// The ID of the QoS Policy which will apply to the Virtual IP (VIP).
    ///
    #[structable(optional)]
    pub vip_qos_policy_id: Option<String>,

    /// The list of Security Group IDs of the Virtual IP (VIP) port of the Load
    /// Balancer.
    ///
    /// **New in version 2.29**
    ///
    #[structable(optional, serialize)]
    pub vip_sg_ids: Option<Vec<String>>,

    /// The ID of the subnet for the Virtual IP (VIP).
    ///
    #[structable(optional)]
    pub vip_subnet_id: Option<String>,

    /// The VIP vNIC type used for the load balancer. One of `normal` or
    /// `direct`.
    ///
    /// **New in version 2.28**
    ///
    #[structable(optional)]
    pub vip_vnic_type: Option<String>,
}

/// Defines which attributes are to be shown on any response.
///
/// `Rules` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Rules {
    pub admin_state_up: Option<bool>,
    pub compare_type: Option<String>,
    pub created_at: Option<String>,
    pub id: Option<String>,
    pub invert: Option<bool>,
    pub key: Option<String>,
    pub operating_status: Option<String>,
    pub project_id: Option<String>,
    pub provisioning_status: Option<String>,
    pub tags: Option<Vec<String>>,
    pub tenant_id: Option<String>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
    pub value: Option<String>,
}

/// Defines which attributes are to be shown on any response.
///
/// `L7policies` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct L7policies {
    pub action: Option<String>,
    pub admin_state_up: Option<bool>,
    pub created_at: Option<String>,
    pub description: Option<String>,
    pub id: Option<String>,
    pub listener_id: Option<String>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub position: Option<i32>,
    pub project_id: Option<String>,
    pub provisioning_status: Option<String>,
    pub redirect_http_code: Option<i32>,
    pub redirect_pool_id: Option<String>,
    pub redirect_prefix: Option<String>,
    pub redirect_url: Option<String>,
    pub rules: Option<Vec<Rules>>,
    pub tags: Option<Vec<String>>,
    pub tenant_id: Option<String>,
    pub updated_at: Option<String>,
}

/// Base type for complex types
///
/// `Loadbalancers` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Loadbalancers {
    pub id: String,
}

/// Defines which attributes are to be shown on any response.
///
/// `Listeners` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Listeners {
    pub admin_state_up: Option<bool>,
    pub allowed_cidrs: Option<Vec<String>>,
    pub alpn_protocols: Option<Vec<String>>,
    pub client_authentication: Option<String>,
    pub client_ca_tls_container_ref: Option<String>,
    pub client_crl_container_ref: Option<String>,
    pub connection_limit: Option<i32>,
    pub created_at: Option<String>,
    pub default_pool_id: Option<String>,
    pub default_tls_container_ref: Option<String>,
    pub description: Option<String>,
    pub hsts_include_subdomains: Option<bool>,
    pub hsts_max_age: Option<i32>,
    pub hsts_preload: Option<bool>,
    pub id: Option<String>,
    pub insert_headers: Option<HashMap<String, String>>,
    pub l7policies: Option<Vec<L7policies>>,
    pub loadbalancers: Option<Vec<Loadbalancers>>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub project_id: Option<String>,
    pub protocol: Option<String>,
    pub protocol_port: Option<i32>,
    pub provisioning_status: Option<String>,
    pub sni_container_refs: Option<Vec<String>>,
    pub tags: Option<Vec<String>>,
    pub tenant_id: Option<String>,
    pub timeout_client_data: Option<i32>,
    pub timeout_member_connect: Option<i32>,
    pub timeout_member_data: Option<i32>,
    pub timeout_tcp_inspect: Option<i32>,
    pub tls_ciphers: Option<String>,
    pub tls_versions: Option<Vec<String>>,
    pub updated_at: Option<String>,
}

/// Defines which attributes are to be shown on any response.
///
/// `Members` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Members {
    pub address: Option<String>,
    pub admin_state_up: Option<bool>,
    pub backup: Option<bool>,
    pub created_at: Option<String>,
    pub id: Option<String>,
    pub monitor_address: Option<String>,
    pub monitor_port: Option<i32>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub project_id: Option<String>,
    pub protocol_port: Option<i32>,
    pub provisioning_status: Option<String>,
    pub subnet_id: Option<String>,
    pub tags: Option<Vec<String>>,
    pub tenant_id: Option<String>,
    pub updated_at: Option<String>,
    pub vnic_type: Option<String>,
    pub weight: Option<i32>,
}

/// Base type for complex types
///
/// `Pools` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Pools {
    pub id: String,
}

/// Defines which attributes are to be shown on any response.
///
/// `Healthmonitor` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Healthmonitor {
    pub admin_state_up: Option<bool>,
    pub created_at: Option<String>,
    pub delay: Option<i32>,
    pub domain_name: Option<String>,
    pub expected_codes: Option<String>,
    pub http_method: Option<String>,
    pub http_version: Option<f32>,
    pub id: Option<String>,
    pub max_retries: Option<i32>,
    pub max_retries_down: Option<i32>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub pools: Option<Vec<Pools>>,
    pub project_id: Option<String>,
    pub provisioning_status: Option<String>,
    pub tags: Option<Vec<String>>,
    pub tenant_id: Option<String>,
    pub timeout: Option<i32>,
    pub _type: Option<String>,
    pub updated_at: Option<String>,
    pub url_path: Option<String>,
}

/// Defines which attributes are to be shown on any response.
///
/// `SessionPersistence` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct SessionPersistence {
    pub cookie_name: Option<String>,
    pub persistence_granularity: Option<String>,
    pub persistence_timeout: Option<i32>,
    pub _type: Option<String>,
}

/// Base type for complex types
///
/// `PoolsListeners` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct PoolsListeners {
    pub id: String,
}

/// Defines which attributes are to be shown on any response.
///
/// `PoolsStructResponse` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct PoolsStructResponse {
    pub admin_state_up: Option<bool>,
    pub alpn_protocols: Option<Vec<String>>,
    pub ca_tls_container_ref: Option<String>,
    pub created_at: Option<String>,
    pub crl_container_ref: Option<String>,
    pub description: Option<String>,
    pub healthmonitor: Option<Healthmonitor>,
    pub healthmonitor_id: Option<String>,
    pub id: Option<String>,
    pub lb_algorithm: Option<String>,
    pub listeners: Option<Vec<PoolsListeners>>,
    pub loadbalancers: Option<Vec<Loadbalancers>>,
    pub members: Option<Vec<Members>>,
    pub name: Option<String>,
    pub operating_status: Option<String>,
    pub project_id: Option<String>,
    pub protocol: Option<String>,
    pub provisioning_status: Option<String>,
    pub session_persistence: Option<SessionPersistence>,
    pub tags: Option<Vec<String>>,
    pub tenant_id: Option<String>,
    pub tls_ciphers: Option<String>,
    pub tls_container_ref: Option<String>,
    pub tls_enabled: Option<bool>,
    pub tls_versions: Option<Vec<String>>,
    pub updated_at: Option<String>,
}

/// Type for additional vips
///
/// `AdditionalVips` type
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct AdditionalVips {
    pub ip_address: Option<String>,
    pub subnet_id: String,
}
